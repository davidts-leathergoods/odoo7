// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package talendopenerp.sale_openerpwms_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: sale_openerpwms Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class sale_openerpwms implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (davidts_dev_Database != null) {

				this.setProperty("davidts_dev_Database",
						davidts_dev_Database.toString());

			}

			if (davidts_dev_Login != null) {

				this.setProperty("davidts_dev_Login",
						davidts_dev_Login.toString());

			}

			if (davidts_dev_Password != null) {

				this.setProperty("davidts_dev_Password",
						davidts_dev_Password.toString());

			}

			if (davidts_dev_Port != null) {

				this.setProperty("davidts_dev_Port",
						davidts_dev_Port.toString());

			}

			if (davidts_dev_Schema != null) {

				this.setProperty("davidts_dev_Schema",
						davidts_dev_Schema.toString());

			}

			if (davidts_dev_Server != null) {

				this.setProperty("davidts_dev_Server",
						davidts_dev_Server.toString());

			}

			if (Path_files != null) {

				this.setProperty("Path_files", Path_files.toString());

			}

			if (Path_Header != null) {

				this.setProperty("Path_Header", Path_Header.toString());

			}

			if (picking_id != null) {

				this.setProperty("picking_id", picking_id.toString());

			}

			if (Path_Header_sale != null) {

				this.setProperty("Path_Header_sale",
						Path_Header_sale.toString());

			}

		}

		public String davidts_dev_Database;

		public String getDavidts_dev_Database() {
			return this.davidts_dev_Database;
		}

		public String davidts_dev_Login;

		public String getDavidts_dev_Login() {
			return this.davidts_dev_Login;
		}

		public java.lang.String davidts_dev_Password;

		public java.lang.String getDavidts_dev_Password() {
			return this.davidts_dev_Password;
		}

		public String davidts_dev_Port;

		public String getDavidts_dev_Port() {
			return this.davidts_dev_Port;
		}

		public String davidts_dev_Schema;

		public String getDavidts_dev_Schema() {
			return this.davidts_dev_Schema;
		}

		public String davidts_dev_Server;

		public String getDavidts_dev_Server() {
			return this.davidts_dev_Server;
		}

		public String Path_files;

		public String getPath_files() {
			return this.Path_files;
		}

		public String Path_Header;

		public String getPath_Header() {
			return this.Path_Header;
		}

		public Integer picking_id;

		public Integer getPicking_id() {
			return this.picking_id;
		}

		public String Path_Header_sale;

		public String getPath_Header_sale() {
			return this.Path_Header_sale;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "sale_openerpwms";
	private final String projectName = "TALENDOPENERP";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					sale_openerpwms.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(sale_openerpwms.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPConnection_1", System.currentTimeMillis());

		status = "failure";

		tSCPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tIterateToFlow_2_AI_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tIterateToFlow_2_AI_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileCopy_1", System.currentTimeMillis());

		status = "failure";

		tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPPut_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPPut_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_2", System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPClose_1", System.currentTimeMillis());

		status = "failure";

		tSCPClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_15", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tIterateToFlow_2_ITFO_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tIterateToFlow_2_ITFO", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tIterateToFlow_2_AI_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tIterateToFlow_2_AI", System.currentTimeMillis());

		status = "failure";

		tIterateToFlow_2_AI_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSCPConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSCPClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_15_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tIterateToFlow_2_AI_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.davidts_dev_Server + ":"
						+ context.davidts_dev_Port + "/"
						+ context.davidts_dev_Database;

				String userName_tPostgresqlConnection_1 = context.davidts_dev_Login;
				String password_tPostgresqlConnection_1 = context.davidts_dev_Password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {
					java.lang.Class.forName("org.postgresql.Driver");

					conn_tPostgresqlConnection_1 = java.sql.DriverManager
							.getConnection(url_tPostgresqlConnection_1,
									userName_tPostgresqlConnection_1,
									password_tPostgresqlConnection_1);
					globalMap.put("conn_tPostgresqlConnection_1",
							conn_tPostgresqlConnection_1);
				}
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.davidts_dev_Schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlInput_14Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String davits_host;

		public String getDavits_host() {
			return this.davits_host;
		}

		public String davits_user;

		public String getDavits_user() {
			return this.davits_user;
		}

		public String davits_password;

		public String getDavits_password() {
			return this.davits_password;
		}

		public String davits_port;

		public String getDavits_port() {
			return this.davits_port;
		}

		public String davits_path_openerp_wms;

		public String getDavits_path_openerp_wms() {
			return this.davits_path_openerp_wms;
		}

		public String davits_wmsfiles_after_treated;

		public String getDavits_wmsfiles_after_treated() {
			return this.davits_wmsfiles_after_treated;
		}

		public String davits_path_wms_openerp;

		public String getDavits_path_wms_openerp() {
			return this.davits_path_wms_openerp;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.davits_host = readString(dis);

					this.davits_user = readString(dis);

					this.davits_password = readString(dis);

					this.davits_port = readString(dis);

					this.davits_path_openerp_wms = readString(dis);

					this.davits_wmsfiles_after_treated = readString(dis);

					this.davits_path_wms_openerp = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.davits_host, dos);

				// String

				writeString(this.davits_user, dos);

				// String

				writeString(this.davits_password, dos);

				// String

				writeString(this.davits_port, dos);

				// String

				writeString(this.davits_path_openerp_wms, dos);

				// String

				writeString(this.davits_wmsfiles_after_treated, dos);

				// String

				writeString(this.davits_path_wms_openerp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("davits_host=" + davits_host);
			sb.append(",davits_user=" + davits_user);
			sb.append(",davits_password=" + davits_password);
			sb.append(",davits_port=" + davits_port);
			sb.append(",davits_path_openerp_wms=" + davits_path_openerp_wms);
			sb.append(",davits_wmsfiles_after_treated="
					+ davits_wmsfiles_after_treated);
			sb.append(",davits_path_wms_openerp=" + davits_path_wms_openerp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tFlowToIterate_3 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_3", false);
				start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_3";

				int tos_count_tFlowToIterate_3 = 0;

				int nb_line_tFlowToIterate_3 = 0;
				int counter_tFlowToIterate_3 = 0;

				/**
				 * [tFlowToIterate_3 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_14 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_14", false);
				start_Hash.put("tPostgresqlInput_14",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_14";

				int tos_count_tPostgresqlInput_14 = 0;

				int nb_line_tPostgresqlInput_14 = 0;
				java.sql.Connection conn_tPostgresqlInput_14 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_14) {
					conn_tPostgresqlInput_14 = dataSources_tPostgresqlInput_14
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_14 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_14 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_14 = context.davidts_dev_Password;
					conn_tPostgresqlInput_14 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_14,
									dbUser_tPostgresqlInput_14,
									dbPwd_tPostgresqlInput_14);

				}
				conn_tPostgresqlInput_14.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_14 = conn_tPostgresqlInput_14
						.createStatement();

				String dbquery_tPostgresqlInput_14 = "select davits_host, davits_user, davits_password, davits_port, davits_path_openerp_wms, davits_wmsfiles_after_treated, davits_path_wms_openerp  from   (select 1 as val,value as davits_host from ir_config_parameter where key='davits.host') AS req1   inner join  (select 1 as val,value as davits_user from ir_config_parameter where key='davits.user') AS req2 ON req1.val=req2.val  inner join   (select 1 as val,value as davits_password from ir_config_parameter where key='davits.password') AS req3 ON req2.val=req3.val  inner join  (select 1 as val,value as davits_port from ir_config_parameter where key='davits.port') AS req4 ON req3.val=req4.val  inner join  (select 1 as val,value as davits_path_openerp_wms from ir_config_parameter where key='davits.path_openerp_wms') AS req5   ON req4.val=req5.val  inner join   (select 1 as val,value as davits_wmsfiles_after_treated from ir_config_parameter where key='davits.wmsfiles_after_treated') AS req6 ON req5.val=req6.val   inner join   (select 1 as val,value as davits_path_wms_openerp from ir_config_parameter where key='davits.path_wms_openerp') AS req7 ON req6.val=req7.val ";

				globalMap.put("tPostgresqlInput_14_QUERY",
						dbquery_tPostgresqlInput_14);

				java.sql.ResultSet rs_tPostgresqlInput_14 = stmt_tPostgresqlInput_14
						.executeQuery(dbquery_tPostgresqlInput_14);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_14 = rs_tPostgresqlInput_14
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_14 = rsmd_tPostgresqlInput_14
						.getColumnCount();

				String tmpContent_tPostgresqlInput_14 = null;
				int column_index_tPostgresqlInput_14 = 1;
				while (rs_tPostgresqlInput_14.next()) {
					nb_line_tPostgresqlInput_14++;

					column_index_tPostgresqlInput_14 = 1;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_host = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_host = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_host = null;
						}

					}
					column_index_tPostgresqlInput_14 = 2;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_user = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_user = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_user = null;
						}

					}
					column_index_tPostgresqlInput_14 = 3;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_password = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_password = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_password = null;
						}

					}
					column_index_tPostgresqlInput_14 = 4;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_port = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_port = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_port = null;
						}

					}
					column_index_tPostgresqlInput_14 = 5;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_path_openerp_wms = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_path_openerp_wms = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_path_openerp_wms = null;
						}

					}
					column_index_tPostgresqlInput_14 = 6;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_wmsfiles_after_treated = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_wmsfiles_after_treated = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_wmsfiles_after_treated = null;
						}

					}
					column_index_tPostgresqlInput_14 = 7;

					if (colQtyInRs_tPostgresqlInput_14 < column_index_tPostgresqlInput_14) {
						row13.davits_path_wms_openerp = null;
					} else {

						tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
								.getString(column_index_tPostgresqlInput_14);
						if (tmpContent_tPostgresqlInput_14 != null) {
							row13.davits_path_wms_openerp = tmpContent_tPostgresqlInput_14;
						} else {
							row13.davits_path_wms_openerp = null;
						}

					}

					/**
					 * [tPostgresqlInput_14 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_14 main ] start
					 */

					currentComponent = "tPostgresqlInput_14";

					tos_count_tPostgresqlInput_14++;

					/**
					 * [tPostgresqlInput_14 main ] stop
					 */

					/**
					 * [tFlowToIterate_3 main ] start
					 */

					currentComponent = "tFlowToIterate_3";

					globalMap.put("davits_host", row13.davits_host);
					nb_line_tFlowToIterate_3++;
					globalMap.put("davits_user", row13.davits_user);
					nb_line_tFlowToIterate_3++;
					globalMap.put("davits_password", row13.davits_password);
					nb_line_tFlowToIterate_3++;
					globalMap.put("davits_port", row13.davits_port);
					nb_line_tFlowToIterate_3++;
					globalMap.put("davits_path_openerp_wms",
							row13.davits_path_openerp_wms);
					nb_line_tFlowToIterate_3++;
					globalMap.put("davits_wmsfiles_after_treated",
							row13.davits_wmsfiles_after_treated);
					nb_line_tFlowToIterate_3++;
					globalMap.put("davits_path_wms_openerp",
							row13.davits_path_wms_openerp);
					nb_line_tFlowToIterate_3++;
					counter_tFlowToIterate_3++;
					globalMap.put("tFlowToIterate_3_CURRENT_ITERATION",
							counter_tFlowToIterate_3);

					tos_count_tFlowToIterate_3++;

					/**
					 * [tFlowToIterate_3 main ] stop
					 */

					/**
					 * [tPostgresqlInput_14 end ] start
					 */

					currentComponent = "tPostgresqlInput_14";

				}
				stmt_tPostgresqlInput_14.close();

				conn_tPostgresqlInput_14.commit();
				conn_tPostgresqlInput_14.close();

				globalMap.put("tPostgresqlInput_14_NB_LINE",
						nb_line_tPostgresqlInput_14);

				ok_Hash.put("tPostgresqlInput_14", true);
				end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_14 end ] stop
				 */

				/**
				 * [tFlowToIterate_3 end ] start
				 */

				currentComponent = "tFlowToIterate_3";

				globalMap.put("tFlowToIterate_3_NB_LINE",
						nb_line_tFlowToIterate_3);

				ok_Hash.put("tFlowToIterate_3", true);
				end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_14:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tSCPConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 1);
	}

	public void tSCPConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSCPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSCPConnection_1 begin ] start
				 */

				ok_Hash.put("tSCPConnection_1", false);
				start_Hash.put("tSCPConnection_1", System.currentTimeMillis());
				currentComponent = "tSCPConnection_1";

				int tos_count_tSCPConnection_1 = 0;

				String hostname_tSCPConnection_1 = ((String) globalMap
						.get("davits_host"));
				String username_tSCPConnection_1 = ((String) globalMap
						.get("davits_user"));

				/* Create a connection instance */
				ch.ethz.ssh2.Connection conn_tSCPConnection_1 = new ch.ethz.ssh2.Connection(
						hostname_tSCPConnection_1,
						Integer.parseInt((String) globalMap.get("davits_port")));
				/* Now connect */
				conn_tSCPConnection_1.connect();
				boolean isAuthenticated_tSCPConnection_1 = conn_tSCPConnection_1
						.authenticateWithPassword(username_tSCPConnection_1,
								((String) globalMap.get("davits_password")));
				if (isAuthenticated_tSCPConnection_1 == false)
					throw new RuntimeException("Authentication failed.");

				globalMap.put("conn_tSCPConnection_1", conn_tSCPConnection_1);

				/**
				 * [tSCPConnection_1 begin ] stop
				 */
				/**
				 * [tSCPConnection_1 main ] start
				 */

				currentComponent = "tSCPConnection_1";

				tos_count_tSCPConnection_1++;

				/**
				 * [tSCPConnection_1 main ] stop
				 */
				/**
				 * [tSCPConnection_1 end ] start
				 */

				currentComponent = "tSCPConnection_1";

				ok_Hash.put("tSCPConnection_1", true);
				end_Hash.put("tSCPConnection_1", System.currentTimeMillis());

				/**
				 * [tSCPConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSCPConnection_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputDelimited_1Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSCPConnection_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tSCPConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class commentaireStruct implements
			routines.system.IPersistableRow<commentaireStruct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String commentaire;

		public String getCommentaire() {
			return this.commentaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.commentaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.commentaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("commentaire=" + commentaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(commentaireStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String commentaire;

		public String getCommentaire() {
			return this.commentaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.commentaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.commentaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("commentaire=" + commentaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				commentaireStruct commentaire = new commentaireStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.Path_files + ("/") + "tmp.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;
				try {
					outtFileOutputDelimited_1 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_1,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_1 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());
					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					commentaireStruct commentaire_tmp = new commentaireStruct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tFileInputDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputDelimited_1", false);
					start_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputDelimited_1";

					int tos_count_tFileInputDelimited_1 = 0;

					int nb_line_tFileInputDelimited_1 = 0;
					org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
					try {

						Object filename_tFileInputDelimited_1 = context.Path_Header_sale
								+ ("/") + "header.txt";
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
							if (footer_value_tFileInputDelimited_1 > 0
									|| random_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer and random shouldn't be bigger than 0.");
							}

						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									context.Path_Header_sale + ("/")
											+ "header.txt", "UTF-8", ";", "\n",
									true, 0, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null
								&& fid_tFileInputDelimited_1.nextRecord()) {

							row5 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row5 = new row5Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								columnIndexWithD_tFileInputDelimited_1 = 0;

								row5.commentaire = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row5 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */
							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									commentaire = null;

									// # Output table : 'commentaire'
									commentaire_tmp.commentaire = row5.commentaire;
									commentaire = commentaire_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "commentaire"
								if (commentaire != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();

									if (commentaire.commentaire != null) {

										sb_tFileOutputDelimited_1.append(

										commentaire.commentaire

										);

									}

									sb_tFileOutputDelimited_1
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;

									outtFileOutputDelimited_1
											.write(sb_tFileOutputDelimited_1
													.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

								} // End of branch "commentaire"

							} // End of branch "row5"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
					} finally {
						if (!((Object) (context.Path_Header_sale + ("/") + "header.txt") instanceof java.io.InputStream)) {
							if (fid_tFileInputDelimited_1 != null) {
								fid_tFileInputDelimited_1.close();
							}
						}
						if (fid_tFileInputDelimited_1 != null) {
							globalMap.put("tFileInputDelimited_1_NB_LINE",
									fid_tFileInputDelimited_1.getRowNumber());
						}
					}

					ok_Hash.put("tFileInputDelimited_1", true);
					end_Hash.put("tFileInputDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputDelimited_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

				} finally {
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);
				} // finally

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				tPostgresqlInput_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class OnSubjobOkStructtIterateToFlow_2 implements
			routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_2> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public java.util.Date date_done;

		public java.util.Date getDate_done() {
			return this.date_done;
		}

		public java.util.Date min_date;

		public java.util.Date getMin_date() {
			return this.min_date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public Integer stock_journal_id;

		public Integer getStock_journal_id() {
			return this.stock_journal_id;
		}

		public Integer backorder_id;

		public Integer getBackorder_id() {
			return this.backorder_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer location_id;

		public Integer getLocation_id() {
			return this.location_id;
		}

		public String move_type;

		public String getMove_type() {
			return this.move_type;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public String invoice_state;

		public String getInvoice_state() {
			return this.invoice_state;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer location_dest_id;

		public Integer getLocation_dest_id() {
			return this.location_dest_id;
		}

		public java.util.Date max_date;

		public java.util.Date getMax_date() {
			return this.max_date;
		}

		public Boolean auto_picking;

		public Boolean getAuto_picking() {
			return this.auto_picking;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer purchase_id;

		public Integer getPurchase_id() {
			return this.purchase_id;
		}

		public Integer sale_id;

		public Integer getSale_id() {
			return this.sale_id;
		}

		public String carrier_tracking_ref;

		public String getCarrier_tracking_ref() {
			return this.carrier_tracking_ref;
		}

		public Integer number_of_packages;

		public Integer getNumber_of_packages() {
			return this.number_of_packages;
		}

		public Integer carrier_id;

		public Integer getCarrier_id() {
			return this.carrier_id;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public Integer weight_uom_id;

		public Integer getWeight_uom_id() {
			return this.weight_uom_id;
		}

		public Double weight_net;

		public Double getWeight_net() {
			return this.weight_net;
		}

		public Double volume;

		public Double getVolume() {
			return this.volume;
		}

		public String warning;

		public String getWarning() {
			return this.warning;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.origin = readString(dis);

					this.date_done = readDate(dis);

					this.min_date = readDate(dis);

					this.date = readDate(dis);

					this.partner_id = readInteger(dis);

					this.stock_journal_id = readInteger(dis);

					this.backorder_id = readInteger(dis);

					this.name = readString(dis);

					this.location_id = readInteger(dis);

					this.move_type = readString(dis);

					this.company_id = readInteger(dis);

					this.invoice_state = readString(dis);

					this.note = readString(dis);

					this.state = readString(dis);

					this.location_dest_id = readInteger(dis);

					this.max_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auto_picking = null;
					} else {
						this.auto_picking = dis.readBoolean();
					}

					this.type = readString(dis);

					this.purchase_id = readInteger(dis);

					this.sale_id = readInteger(dis);

					this.carrier_tracking_ref = readString(dis);

					this.number_of_packages = readInteger(dis);

					this.carrier_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.weight_uom_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight_net = null;
					} else {
						this.weight_net = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.volume = null;
					} else {
						this.volume = dis.readDouble();
					}

					this.warning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// String

				writeString(this.origin, dos);

				// java.util.Date

				writeDate(this.date_done, dos);

				// java.util.Date

				writeDate(this.min_date, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.partner_id, dos);

				// Integer

				writeInteger(this.stock_journal_id, dos);

				// Integer

				writeInteger(this.backorder_id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.location_id, dos);

				// String

				writeString(this.move_type, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// String

				writeString(this.invoice_state, dos);

				// String

				writeString(this.note, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.location_dest_id, dos);

				// java.util.Date

				writeDate(this.max_date, dos);

				// Boolean

				if (this.auto_picking == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auto_picking);
				}

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.purchase_id, dos);

				// Integer

				writeInteger(this.sale_id, dos);

				// String

				writeString(this.carrier_tracking_ref, dos);

				// Integer

				writeInteger(this.number_of_packages, dos);

				// Integer

				writeInteger(this.carrier_id, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// Integer

				writeInteger(this.weight_uom_id, dos);

				// Double

				if (this.weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight_net);
				}

				// Double

				if (this.volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.volume);
				}

				// String

				writeString(this.warning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",date_done=" + String.valueOf(date_done));
			sb.append(",min_date=" + String.valueOf(min_date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",stock_journal_id=" + String.valueOf(stock_journal_id));
			sb.append(",backorder_id=" + String.valueOf(backorder_id));
			sb.append(",name=" + name);
			sb.append(",location_id=" + String.valueOf(location_id));
			sb.append(",move_type=" + move_type);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",invoice_state=" + invoice_state);
			sb.append(",note=" + note);
			sb.append(",state=" + state);
			sb.append(",location_dest_id=" + String.valueOf(location_dest_id));
			sb.append(",max_date=" + String.valueOf(max_date));
			sb.append(",auto_picking=" + String.valueOf(auto_picking));
			sb.append(",type=" + type);
			sb.append(",purchase_id=" + String.valueOf(purchase_id));
			sb.append(",sale_id=" + String.valueOf(sale_id));
			sb.append(",carrier_tracking_ref=" + carrier_tracking_ref);
			sb.append(",number_of_packages="
					+ String.valueOf(number_of_packages));
			sb.append(",carrier_id=" + String.valueOf(carrier_id));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",weight_uom_id=" + String.valueOf(weight_uom_id));
			sb.append(",weight_net=" + String.valueOf(weight_net));
			sb.append(",volume=" + String.valueOf(volume));
			sb.append(",warning=" + warning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnSubjobOkStructtIterateToFlow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public java.util.Date date_done;

		public java.util.Date getDate_done() {
			return this.date_done;
		}

		public java.util.Date min_date;

		public java.util.Date getMin_date() {
			return this.min_date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public Integer stock_journal_id;

		public Integer getStock_journal_id() {
			return this.stock_journal_id;
		}

		public Integer backorder_id;

		public Integer getBackorder_id() {
			return this.backorder_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer location_id;

		public Integer getLocation_id() {
			return this.location_id;
		}

		public String move_type;

		public String getMove_type() {
			return this.move_type;
		}

		public int company_id;

		public int getCompany_id() {
			return this.company_id;
		}

		public String invoice_state;

		public String getInvoice_state() {
			return this.invoice_state;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer location_dest_id;

		public Integer getLocation_dest_id() {
			return this.location_dest_id;
		}

		public java.util.Date max_date;

		public java.util.Date getMax_date() {
			return this.max_date;
		}

		public Boolean auto_picking;

		public Boolean getAuto_picking() {
			return this.auto_picking;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer purchase_id;

		public Integer getPurchase_id() {
			return this.purchase_id;
		}

		public Integer sale_id;

		public Integer getSale_id() {
			return this.sale_id;
		}

		public String carrier_tracking_ref;

		public String getCarrier_tracking_ref() {
			return this.carrier_tracking_ref;
		}

		public Integer number_of_packages;

		public Integer getNumber_of_packages() {
			return this.number_of_packages;
		}

		public Integer carrier_id;

		public Integer getCarrier_id() {
			return this.carrier_id;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public int weight_uom_id;

		public int getWeight_uom_id() {
			return this.weight_uom_id;
		}

		public Double weight_net;

		public Double getWeight_net() {
			return this.weight_net;
		}

		public Double volume;

		public Double getVolume() {
			return this.volume;
		}

		public String warning;

		public String getWarning() {
			return this.warning;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.origin = readString(dis);

					this.date_done = readDate(dis);

					this.min_date = readDate(dis);

					this.date = readDate(dis);

					this.partner_id = readInteger(dis);

					this.stock_journal_id = readInteger(dis);

					this.backorder_id = readInteger(dis);

					this.name = readString(dis);

					this.location_id = readInteger(dis);

					this.move_type = readString(dis);

					this.company_id = dis.readInt();

					this.invoice_state = readString(dis);

					this.note = readString(dis);

					this.state = readString(dis);

					this.location_dest_id = readInteger(dis);

					this.max_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auto_picking = null;
					} else {
						this.auto_picking = dis.readBoolean();
					}

					this.type = readString(dis);

					this.purchase_id = readInteger(dis);

					this.sale_id = readInteger(dis);

					this.carrier_tracking_ref = readString(dis);

					this.number_of_packages = readInteger(dis);

					this.carrier_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.weight_uom_id = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.weight_net = null;
					} else {
						this.weight_net = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.volume = null;
					} else {
						this.volume = dis.readDouble();
					}

					this.warning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// String

				writeString(this.origin, dos);

				// java.util.Date

				writeDate(this.date_done, dos);

				// java.util.Date

				writeDate(this.min_date, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.partner_id, dos);

				// Integer

				writeInteger(this.stock_journal_id, dos);

				// Integer

				writeInteger(this.backorder_id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.location_id, dos);

				// String

				writeString(this.move_type, dos);

				// int

				dos.writeInt(this.company_id);

				// String

				writeString(this.invoice_state, dos);

				// String

				writeString(this.note, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.location_dest_id, dos);

				// java.util.Date

				writeDate(this.max_date, dos);

				// Boolean

				if (this.auto_picking == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auto_picking);
				}

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.purchase_id, dos);

				// Integer

				writeInteger(this.sale_id, dos);

				// String

				writeString(this.carrier_tracking_ref, dos);

				// Integer

				writeInteger(this.number_of_packages, dos);

				// Integer

				writeInteger(this.carrier_id, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// int

				dos.writeInt(this.weight_uom_id);

				// Double

				if (this.weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight_net);
				}

				// Double

				if (this.volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.volume);
				}

				// String

				writeString(this.warning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",date_done=" + String.valueOf(date_done));
			sb.append(",min_date=" + String.valueOf(min_date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",stock_journal_id=" + String.valueOf(stock_journal_id));
			sb.append(",backorder_id=" + String.valueOf(backorder_id));
			sb.append(",name=" + name);
			sb.append(",location_id=" + String.valueOf(location_id));
			sb.append(",move_type=" + move_type);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",invoice_state=" + invoice_state);
			sb.append(",note=" + note);
			sb.append(",state=" + state);
			sb.append(",location_dest_id=" + String.valueOf(location_dest_id));
			sb.append(",max_date=" + String.valueOf(max_date));
			sb.append(",auto_picking=" + String.valueOf(auto_picking));
			sb.append(",type=" + type);
			sb.append(",purchase_id=" + String.valueOf(purchase_id));
			sb.append(",sale_id=" + String.valueOf(sale_id));
			sb.append(",carrier_tracking_ref=" + carrier_tracking_ref);
			sb.append(",number_of_packages="
					+ String.valueOf(number_of_packages));
			sb.append(",carrier_id=" + String.valueOf(carrier_id));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",weight_uom_id=" + String.valueOf(weight_uom_id));
			sb.append(",weight_net=" + String.valueOf(weight_net));
			sb.append(",volume=" + String.valueOf(volume));
			sb.append(",warning=" + warning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public java.util.Date date_done;

		public java.util.Date getDate_done() {
			return this.date_done;
		}

		public java.util.Date min_date;

		public java.util.Date getMin_date() {
			return this.min_date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public Integer stock_journal_id;

		public Integer getStock_journal_id() {
			return this.stock_journal_id;
		}

		public Integer backorder_id;

		public Integer getBackorder_id() {
			return this.backorder_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer location_id;

		public Integer getLocation_id() {
			return this.location_id;
		}

		public String move_type;

		public String getMove_type() {
			return this.move_type;
		}

		public int company_id;

		public int getCompany_id() {
			return this.company_id;
		}

		public String invoice_state;

		public String getInvoice_state() {
			return this.invoice_state;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer location_dest_id;

		public Integer getLocation_dest_id() {
			return this.location_dest_id;
		}

		public java.util.Date max_date;

		public java.util.Date getMax_date() {
			return this.max_date;
		}

		public Boolean auto_picking;

		public Boolean getAuto_picking() {
			return this.auto_picking;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer purchase_id;

		public Integer getPurchase_id() {
			return this.purchase_id;
		}

		public Integer sale_id;

		public Integer getSale_id() {
			return this.sale_id;
		}

		public String carrier_tracking_ref;

		public String getCarrier_tracking_ref() {
			return this.carrier_tracking_ref;
		}

		public Integer number_of_packages;

		public Integer getNumber_of_packages() {
			return this.number_of_packages;
		}

		public Integer carrier_id;

		public Integer getCarrier_id() {
			return this.carrier_id;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public int weight_uom_id;

		public int getWeight_uom_id() {
			return this.weight_uom_id;
		}

		public Double weight_net;

		public Double getWeight_net() {
			return this.weight_net;
		}

		public Double volume;

		public Double getVolume() {
			return this.volume;
		}

		public String warning;

		public String getWarning() {
			return this.warning;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.origin = readString(dis);

					this.date_done = readDate(dis);

					this.min_date = readDate(dis);

					this.date = readDate(dis);

					this.partner_id = readInteger(dis);

					this.stock_journal_id = readInteger(dis);

					this.backorder_id = readInteger(dis);

					this.name = readString(dis);

					this.location_id = readInteger(dis);

					this.move_type = readString(dis);

					this.company_id = dis.readInt();

					this.invoice_state = readString(dis);

					this.note = readString(dis);

					this.state = readString(dis);

					this.location_dest_id = readInteger(dis);

					this.max_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auto_picking = null;
					} else {
						this.auto_picking = dis.readBoolean();
					}

					this.type = readString(dis);

					this.purchase_id = readInteger(dis);

					this.sale_id = readInteger(dis);

					this.carrier_tracking_ref = readString(dis);

					this.number_of_packages = readInteger(dis);

					this.carrier_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.weight_uom_id = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.weight_net = null;
					} else {
						this.weight_net = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.volume = null;
					} else {
						this.volume = dis.readDouble();
					}

					this.warning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// String

				writeString(this.origin, dos);

				// java.util.Date

				writeDate(this.date_done, dos);

				// java.util.Date

				writeDate(this.min_date, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.partner_id, dos);

				// Integer

				writeInteger(this.stock_journal_id, dos);

				// Integer

				writeInteger(this.backorder_id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.location_id, dos);

				// String

				writeString(this.move_type, dos);

				// int

				dos.writeInt(this.company_id);

				// String

				writeString(this.invoice_state, dos);

				// String

				writeString(this.note, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.location_dest_id, dos);

				// java.util.Date

				writeDate(this.max_date, dos);

				// Boolean

				if (this.auto_picking == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auto_picking);
				}

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.purchase_id, dos);

				// Integer

				writeInteger(this.sale_id, dos);

				// String

				writeString(this.carrier_tracking_ref, dos);

				// Integer

				writeInteger(this.number_of_packages, dos);

				// Integer

				writeInteger(this.carrier_id, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// int

				dos.writeInt(this.weight_uom_id);

				// Double

				if (this.weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight_net);
				}

				// Double

				if (this.volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.volume);
				}

				// String

				writeString(this.warning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",date_done=" + String.valueOf(date_done));
			sb.append(",min_date=" + String.valueOf(min_date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",stock_journal_id=" + String.valueOf(stock_journal_id));
			sb.append(",backorder_id=" + String.valueOf(backorder_id));
			sb.append(",name=" + name);
			sb.append(",location_id=" + String.valueOf(location_id));
			sb.append(",move_type=" + move_type);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",invoice_state=" + invoice_state);
			sb.append(",note=" + note);
			sb.append(",state=" + state);
			sb.append(",location_dest_id=" + String.valueOf(location_dest_id));
			sb.append(",max_date=" + String.valueOf(max_date));
			sb.append(",auto_picking=" + String.valueOf(auto_picking));
			sb.append(",type=" + type);
			sb.append(",purchase_id=" + String.valueOf(purchase_id));
			sb.append(",sale_id=" + String.valueOf(sale_id));
			sb.append(",carrier_tracking_ref=" + carrier_tracking_ref);
			sb.append(",number_of_packages="
					+ String.valueOf(number_of_packages));
			sb.append(",carrier_id=" + String.valueOf(carrier_id));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",weight_uom_id=" + String.valueOf(weight_uom_id));
			sb.append(",weight_net=" + String.valueOf(weight_net));
			sb.append(",volume=" + String.valueOf(volume));
			sb.append(",warning=" + warning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_9Process(globalMap);
				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_3Process(globalMap);
				tPostgresqlInput_5Process(globalMap);
				tPostgresqlInput_11Process(globalMap);
				tPostgresqlInput_12Process(globalMap);
				tPostgresqlInput_15Process(globalMap);

				row1Struct row1 = new row1Struct();

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tIterateToFlow_2_ITFO = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_2";

				int tos_count_tFlowToIterate_2 = 0;

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_1) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_1 = dataSources_tPostgresqlInput_1
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_1);
				}

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "select id, create_uid, create_date, write_date, write_uid, origin, date_done, min_date, date, partner_id, stock_journal_id, backorder_id, name, location_id, move_type, company_id, invoice_state, note, state, location_dest_id, max_date, auto_picking, type, purchase_id, sale_id, carrier_tracking_ref, number_of_packages, carrier_id, weight, weight_uom_id, weight_net, volume, warning FROM stock_picking where type = 'out' and id = "
						+ context.getProperty("picking_id");

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				int column_index_tPostgresqlInput_1 = 1;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					column_index_tPostgresqlInput_1 = 1;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.id = 0;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_1 = 2;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.create_uid = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.create_uid = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.create_uid = null;
						}

					}
					column_index_tPostgresqlInput_1 = 3;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.create_date = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row1.create_date = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row1.create_date = null;
						}

					}
					column_index_tPostgresqlInput_1 = 4;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.write_date = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row1.write_date = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row1.write_date = null;
						}

					}
					column_index_tPostgresqlInput_1 = 5;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.write_uid = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.write_uid = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.write_uid = null;
						}

					}
					column_index_tPostgresqlInput_1 = 6;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.origin = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.origin = tmpContent_tPostgresqlInput_1;
						} else {
							row1.origin = null;
						}

					}
					column_index_tPostgresqlInput_1 = 7;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.date_done = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row1.date_done = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row1.date_done = null;
						}

					}
					column_index_tPostgresqlInput_1 = 8;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.min_date = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row1.min_date = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row1.min_date = null;
						}

					}
					column_index_tPostgresqlInput_1 = 9;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.date = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row1.date = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row1.date = null;
						}

					}
					column_index_tPostgresqlInput_1 = 10;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.partner_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.partner_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.partner_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 11;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.stock_journal_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.stock_journal_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.stock_journal_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 12;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.backorder_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.backorder_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.backorder_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 13;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.name = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.name = tmpContent_tPostgresqlInput_1;
						} else {
							row1.name = null;
						}

					}
					column_index_tPostgresqlInput_1 = 14;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.location_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.location_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.location_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 15;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.move_type = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.move_type = tmpContent_tPostgresqlInput_1;
						} else {
							row1.move_type = null;
						}

					}
					column_index_tPostgresqlInput_1 = 16;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.company_id = 0;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.company_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_1 = 17;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.invoice_state = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.invoice_state = tmpContent_tPostgresqlInput_1;
						} else {
							row1.invoice_state = null;
						}

					}
					column_index_tPostgresqlInput_1 = 18;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.note = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.note = tmpContent_tPostgresqlInput_1;
						} else {
							row1.note = null;
						}

					}
					column_index_tPostgresqlInput_1 = 19;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.state = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.state = tmpContent_tPostgresqlInput_1;
						} else {
							row1.state = null;
						}

					}
					column_index_tPostgresqlInput_1 = 20;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.location_dest_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.location_dest_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.location_dest_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 21;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.max_date = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getTimestamp(column_index_tPostgresqlInput_1) != null) {
							row1.max_date = new java.util.Date(
									rs_tPostgresqlInput_1.getTimestamp(
											column_index_tPostgresqlInput_1)
											.getTime());
						} else {
							row1.max_date = null;
						}

					}
					column_index_tPostgresqlInput_1 = 22;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.auto_picking = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.auto_picking = rs_tPostgresqlInput_1
									.getBoolean(column_index_tPostgresqlInput_1);
						} else {
							row1.auto_picking = null;
						}

					}
					column_index_tPostgresqlInput_1 = 23;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.type = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.type = tmpContent_tPostgresqlInput_1;
						} else {
							row1.type = null;
						}

					}
					column_index_tPostgresqlInput_1 = 24;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.purchase_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.purchase_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.purchase_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 25;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.sale_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.sale_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.sale_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 26;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.carrier_tracking_ref = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.carrier_tracking_ref = tmpContent_tPostgresqlInput_1;
						} else {
							row1.carrier_tracking_ref = null;
						}

					}
					column_index_tPostgresqlInput_1 = 27;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.number_of_packages = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.number_of_packages = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.number_of_packages = null;
						}

					}
					column_index_tPostgresqlInput_1 = 28;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.carrier_id = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.carrier_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							row1.carrier_id = null;
						}

					}
					column_index_tPostgresqlInput_1 = 29;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.weight = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.weight = rs_tPostgresqlInput_1
									.getDouble(column_index_tPostgresqlInput_1);
						} else {
							row1.weight = null;
						}

					}
					column_index_tPostgresqlInput_1 = 30;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.weight_uom_id = 0;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.weight_uom_id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_1 = 31;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.weight_net = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.weight_net = rs_tPostgresqlInput_1
									.getDouble(column_index_tPostgresqlInput_1);
						} else {
							row1.weight_net = null;
						}

					}
					column_index_tPostgresqlInput_1 = 32;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.volume = null;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.volume = rs_tPostgresqlInput_1
									.getDouble(column_index_tPostgresqlInput_1);
						} else {
							row1.volume = null;
						}

					}
					column_index_tPostgresqlInput_1 = 33;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.warning = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.warning = tmpContent_tPostgresqlInput_1;
						} else {
							row1.warning = null;
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tFlowToIterate_2 main ] start
					 */

					currentComponent = "tFlowToIterate_2";

					globalMap.put("id", row1.id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("create_uid", row1.create_uid);
					nb_line_tFlowToIterate_2++;
					globalMap.put("create_date", row1.create_date);
					nb_line_tFlowToIterate_2++;
					globalMap.put("write_date", row1.write_date);
					nb_line_tFlowToIterate_2++;
					globalMap.put("write_uid", row1.write_uid);
					nb_line_tFlowToIterate_2++;
					globalMap.put("origin", row1.origin);
					nb_line_tFlowToIterate_2++;
					globalMap.put("date_done", row1.date_done);
					nb_line_tFlowToIterate_2++;
					globalMap.put("min_date", row1.min_date);
					nb_line_tFlowToIterate_2++;
					globalMap.put("date", row1.date);
					nb_line_tFlowToIterate_2++;
					globalMap.put("partner_id", row1.partner_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("stock_journal_id", row1.stock_journal_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("backorder_id", row1.backorder_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("name", row1.name);
					nb_line_tFlowToIterate_2++;
					globalMap.put("location_id", row1.location_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("move_type", row1.move_type);
					nb_line_tFlowToIterate_2++;
					globalMap.put("company_id", row1.company_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("invoice_state", row1.invoice_state);
					nb_line_tFlowToIterate_2++;
					globalMap.put("note", row1.note);
					nb_line_tFlowToIterate_2++;
					globalMap.put("state", row1.state);
					nb_line_tFlowToIterate_2++;
					globalMap.put("location_dest_id", row1.location_dest_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("max_date", row1.max_date);
					nb_line_tFlowToIterate_2++;
					globalMap.put("auto_picking", row1.auto_picking);
					nb_line_tFlowToIterate_2++;
					globalMap.put("type", row1.type);
					nb_line_tFlowToIterate_2++;
					globalMap.put("purchase_id", row1.purchase_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("sale_id", row1.sale_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("carrier_tracking_ref",
							row1.carrier_tracking_ref);
					nb_line_tFlowToIterate_2++;
					globalMap
							.put("number_of_packages", row1.number_of_packages);
					nb_line_tFlowToIterate_2++;
					globalMap.put("carrier_id", row1.carrier_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("weight", row1.weight);
					nb_line_tFlowToIterate_2++;
					globalMap.put("weight_uom_id", row1.weight_uom_id);
					nb_line_tFlowToIterate_2++;
					globalMap.put("weight_net", row1.weight_net);
					nb_line_tFlowToIterate_2++;
					globalMap.put("volume", row1.volume);
					nb_line_tFlowToIterate_2++;
					globalMap.put("warning", row1.warning);
					nb_line_tFlowToIterate_2++;
					counter_tFlowToIterate_2++;
					globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
							counter_tFlowToIterate_2);

					tos_count_tFlowToIterate_2++;

					/**
					 * [tFlowToIterate_2 main ] stop
					 */
					NB_ITERATE_tIterateToFlow_2_ITFO++;
					iterateLoop++;

					/**
					 * [tIterateToFlow_2_ITFO begin ] start
					 */

					ok_Hash.put("tIterateToFlow_2_ITFO", false);
					start_Hash.put("tIterateToFlow_2_ITFO",
							System.currentTimeMillis());
					currentComponent = "tIterateToFlow_2_ITFO";

					int tos_count_tIterateToFlow_2_ITFO = 0;

					OnSubjobOkStructtIterateToFlow_2 struct_tIterateToFlow_2_ITFO = new OnSubjobOkStructtIterateToFlow_2();
					struct_tIterateToFlow_2_ITFO.id = (Integer) globalMap
							.get("id");
					struct_tIterateToFlow_2_ITFO.create_uid = (Integer) globalMap
							.get("create_uid");
					struct_tIterateToFlow_2_ITFO.create_date = (Date) globalMap
							.get("create_date");
					struct_tIterateToFlow_2_ITFO.write_date = (Date) globalMap
							.get("write_date");
					struct_tIterateToFlow_2_ITFO.write_uid = (Integer) globalMap
							.get("write_uid");
					struct_tIterateToFlow_2_ITFO.origin = (String) globalMap
							.get("origin");
					struct_tIterateToFlow_2_ITFO.date_done = (Date) globalMap
							.get("date_done");
					struct_tIterateToFlow_2_ITFO.min_date = (Date) globalMap
							.get("min_date");
					struct_tIterateToFlow_2_ITFO.date = (Date) globalMap
							.get("date");
					struct_tIterateToFlow_2_ITFO.partner_id = (Integer) globalMap
							.get("partner_id");
					struct_tIterateToFlow_2_ITFO.stock_journal_id = (Integer) globalMap
							.get("stock_journal_id");
					struct_tIterateToFlow_2_ITFO.backorder_id = (Integer) globalMap
							.get("backorder_id");
					struct_tIterateToFlow_2_ITFO.name = (String) globalMap
							.get("name");
					struct_tIterateToFlow_2_ITFO.location_id = (Integer) globalMap
							.get("location_id");
					struct_tIterateToFlow_2_ITFO.move_type = (String) globalMap
							.get("move_type");
					struct_tIterateToFlow_2_ITFO.company_id = (Integer) globalMap
							.get("company_id");
					struct_tIterateToFlow_2_ITFO.invoice_state = (String) globalMap
							.get("invoice_state");
					struct_tIterateToFlow_2_ITFO.note = (String) globalMap
							.get("note");
					struct_tIterateToFlow_2_ITFO.state = (String) globalMap
							.get("state");
					struct_tIterateToFlow_2_ITFO.location_dest_id = (Integer) globalMap
							.get("location_dest_id");
					struct_tIterateToFlow_2_ITFO.max_date = (Date) globalMap
							.get("max_date");
					struct_tIterateToFlow_2_ITFO.auto_picking = (Boolean) globalMap
							.get("auto_picking");
					struct_tIterateToFlow_2_ITFO.type = (String) globalMap
							.get("type");
					struct_tIterateToFlow_2_ITFO.purchase_id = (Integer) globalMap
							.get("purchase_id");
					struct_tIterateToFlow_2_ITFO.sale_id = (Integer) globalMap
							.get("sale_id");
					struct_tIterateToFlow_2_ITFO.carrier_tracking_ref = (String) globalMap
							.get("carrier_tracking_ref");
					struct_tIterateToFlow_2_ITFO.number_of_packages = (Integer) globalMap
							.get("number_of_packages");
					struct_tIterateToFlow_2_ITFO.carrier_id = (Integer) globalMap
							.get("carried_id");
					struct_tIterateToFlow_2_ITFO.weight = (Double) globalMap
							.get("weight");
					struct_tIterateToFlow_2_ITFO.weight_uom_id = (Integer) globalMap
							.get("weight_uom_id");
					struct_tIterateToFlow_2_ITFO.weight_net = (Double) globalMap
							.get("weight_net");
					struct_tIterateToFlow_2_ITFO.volume = (Double) globalMap
							.get("volume");
					struct_tIterateToFlow_2_ITFO.warning = (String) globalMap
							.get("warning");

					if (globalMap.get("tIterateToFlow_2") != null) {
						java.util.List<OnSubjobOkStructtIterateToFlow_2> list_tIterateToFlow_2_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_2>) globalMap
								.get("tIterateToFlow_2");
						list_tIterateToFlow_2_ITFO
								.add(struct_tIterateToFlow_2_ITFO);
					} else {
						java.util.List<OnSubjobOkStructtIterateToFlow_2> list_tIterateToFlow_2_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_2>();
						list_tIterateToFlow_2_ITFO
								.add(struct_tIterateToFlow_2_ITFO);
						globalMap.put("tIterateToFlow_2",
								list_tIterateToFlow_2_ITFO);
					}

					/**
					 * [tIterateToFlow_2_ITFO begin ] stop
					 */
					/**
					 * [tIterateToFlow_2_ITFO main ] start
					 */

					currentComponent = "tIterateToFlow_2_ITFO";

					tos_count_tIterateToFlow_2_ITFO++;

					/**
					 * [tIterateToFlow_2_ITFO main ] stop
					 */
					/**
					 * [tIterateToFlow_2_ITFO end ] start
					 */

					currentComponent = "tIterateToFlow_2_ITFO";

					ok_Hash.put("tIterateToFlow_2_ITFO", true);
					end_Hash.put("tIterateToFlow_2_ITFO",
							System.currentTimeMillis());

					/**
					 * [tIterateToFlow_2_ITFO end ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE",
						nb_line_tFlowToIterate_2);

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tIterateToFlow_2_AIProcess(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class purchase_lineStruct implements
			routines.system.IPersistableRow<purchase_lineStruct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String D;

		public String getD() {
			return this.D;
		}

		public Integer num_line;

		public Integer getNum_line() {
			return this.num_line;
		}

		public String default_code;

		public String getDefault_code() {
			return this.default_code;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String newColumn5;

		public String getNewColumn5() {
			return this.newColumn5;
		}

		public Integer product_uom_qty;

		public Integer getProduct_uom_qty() {
			return this.product_uom_qty;
		}

		public Integer product_uom_qty_1;

		public Integer getProduct_uom_qty_1() {
			return this.product_uom_qty_1;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.D = readString(dis);

					this.num_line = readInteger(dis);

					this.default_code = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.newColumn5 = readString(dis);

					this.product_uom_qty = readInteger(dis);

					this.product_uom_qty_1 = readInteger(dis);

					this.name = readString(dis);

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.D, dos);

				// Integer

				writeInteger(this.num_line, dos);

				// String

				writeString(this.default_code, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.newColumn5, dos);

				// Integer

				writeInteger(this.product_uom_qty, dos);

				// Integer

				writeInteger(this.product_uom_qty_1, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("D=" + D);
			sb.append(",num_line=" + String.valueOf(num_line));
			sb.append(",default_code=" + default_code);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",newColumn5=" + newColumn5);
			sb.append(",product_uom_qty=" + String.valueOf(product_uom_qty));
			sb.append(",product_uom_qty_1=" + String.valueOf(product_uom_qty_1));
			sb.append(",name=" + name);
			sb.append(",newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(purchase_lineStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Double product_uos_qty;

		public Double getProduct_uos_qty() {
			return this.product_uos_qty;
		}

		public Double product_qty;

		public Double getProduct_qty() {
			return this.product_qty;
		}

		public int product_id;

		public int getProduct_id() {
			return this.product_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_uos_qty = null;
					} else {
						this.product_uos_qty = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.product_qty = null;
					} else {
						this.product_qty = dis.readDouble();
					}

					this.product_id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Double

				if (this.product_uos_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_uos_qty);
				}

				// Double

				if (this.product_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_qty);
				}

				// int

				dos.writeInt(this.product_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",product_uos_qty=" + String.valueOf(product_uos_qty));
			sb.append(",product_qty=" + String.valueOf(product_qty));
			sb.append(",product_id=" + String.valueOf(product_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_6Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_6Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public Double product_uos_qty;

		public Double getProduct_uos_qty() {
			return this.product_uos_qty;
		}

		public Double product_qty;

		public Double getProduct_qty() {
			return this.product_qty;
		}

		public int product_id;

		public int getProduct_id() {
			return this.product_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_uos_qty = null;
					} else {
						this.product_uos_qty = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.product_qty = null;
					} else {
						this.product_qty = dis.readDouble();
					}

					this.product_id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// Double

				if (this.product_uos_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_uos_qty);
				}

				// Double

				if (this.product_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_qty);
				}

				// int

				dos.writeInt(this.product_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",product_uos_qty=" + String.valueOf(product_uos_qty));
			sb.append(",product_qty=" + String.valueOf(product_qty));
			sb.append(",product_id=" + String.valueOf(product_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_7Process(globalMap);
				tPostgresqlInput_8Process(globalMap);

				row2Struct row2 = new row2Struct();
				purchase_lineStruct purchase_line = new purchase_lineStruct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.Path_files + ("/") + "tmp.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}

				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;
				try {
					outtFileOutputDelimited_3 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_3,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_3 begin ] stop
					 */

					/**
					 * [tMap_3 begin ] start
					 */

					ok_Hash.put("tMap_3", false);
					start_Hash.put("tMap_3", System.currentTimeMillis());
					currentComponent = "tMap_3";

					int tos_count_tMap_3 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
							.get("tHash_Lookup_row8"));

					row8Struct row8HashKey = new row8Struct();
					row8Struct row8Default = new row8Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
							.get("tHash_Lookup_row9"));

					row9Struct row9HashKey = new row9Struct();
					row9Struct row9Default = new row9Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_3__Struct {
					}
					Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					purchase_lineStruct purchase_line_tmp = new purchase_lineStruct();
					// ###############################

					/**
					 * [tMap_3 begin ] stop
					 */

					/**
					 * [tPostgresqlInput_6 begin ] start
					 */

					ok_Hash.put("tPostgresqlInput_6", false);
					start_Hash.put("tPostgresqlInput_6",
							System.currentTimeMillis());
					currentComponent = "tPostgresqlInput_6";

					int tos_count_tPostgresqlInput_6 = 0;

					int nb_line_tPostgresqlInput_6 = 0;
					java.sql.Connection conn_tPostgresqlInput_6 = null;
					conn_tPostgresqlInput_6 = (java.sql.Connection) globalMap
							.get("conn_tPostgresqlConnection_1");
					if (null == conn_tPostgresqlInput_6) {
						java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						conn_tPostgresqlInput_6 = dataSources_tPostgresqlInput_6
								.get("").getConnection();
						// globalMap.put("conn_tPostgresqlConnection_1",
						// conn_tPostgresqlInput_6);
					}

					java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6
							.createStatement();

					String dbquery_tPostgresqlInput_6 = "select name,product_uos_qty,product_qty,product_id from stock_move where picking_id="
							+ context.getProperty("picking_id");

					globalMap.put("tPostgresqlInput_6_QUERY",
							dbquery_tPostgresqlInput_6);

					java.sql.ResultSet rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6
							.executeQuery(dbquery_tPostgresqlInput_6);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6
							.getColumnCount();

					String tmpContent_tPostgresqlInput_6 = null;
					int column_index_tPostgresqlInput_6 = 1;
					while (rs_tPostgresqlInput_6.next()) {
						nb_line_tPostgresqlInput_6++;

						column_index_tPostgresqlInput_6 = 1;

						if (colQtyInRs_tPostgresqlInput_6 < column_index_tPostgresqlInput_6) {
							row2.name = null;
						} else {

							tmpContent_tPostgresqlInput_6 = rs_tPostgresqlInput_6
									.getString(column_index_tPostgresqlInput_6);
							if (tmpContent_tPostgresqlInput_6 != null) {
								row2.name = tmpContent_tPostgresqlInput_6;
							} else {
								row2.name = null;
							}

						}
						column_index_tPostgresqlInput_6 = 2;

						if (colQtyInRs_tPostgresqlInput_6 < column_index_tPostgresqlInput_6) {
							row2.product_uos_qty = null;
						} else {

							if (rs_tPostgresqlInput_6
									.getObject(column_index_tPostgresqlInput_6) != null) {
								row2.product_uos_qty = rs_tPostgresqlInput_6
										.getDouble(column_index_tPostgresqlInput_6);
							} else {
								row2.product_uos_qty = null;
							}

						}
						column_index_tPostgresqlInput_6 = 3;

						if (colQtyInRs_tPostgresqlInput_6 < column_index_tPostgresqlInput_6) {
							row2.product_qty = null;
						} else {

							if (rs_tPostgresqlInput_6
									.getObject(column_index_tPostgresqlInput_6) != null) {
								row2.product_qty = rs_tPostgresqlInput_6
										.getDouble(column_index_tPostgresqlInput_6);
							} else {
								row2.product_qty = null;
							}

						}
						column_index_tPostgresqlInput_6 = 4;

						if (colQtyInRs_tPostgresqlInput_6 < column_index_tPostgresqlInput_6) {
							row2.product_id = 0;
						} else {

							if (rs_tPostgresqlInput_6
									.getObject(column_index_tPostgresqlInput_6) != null) {
								row2.product_id = rs_tPostgresqlInput_6
										.getInt(column_index_tPostgresqlInput_6);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}

						}

						/**
						 * [tPostgresqlInput_6 begin ] stop
						 */
						/**
						 * [tPostgresqlInput_6 main ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						tos_count_tPostgresqlInput_6++;

						/**
						 * [tPostgresqlInput_6 main ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row8"
						// /////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row8__id = row2.product_id;
							if (exprKeyValue_row8__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row8HashKey.id = (int) (Integer) exprKeyValue_row8__id;
							}

							row8HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row8.lookup(row8HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.id = '"
							// + row8HashKey.id + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null
								&& tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row9"
						// /////////////////////////////////////////////

						boolean forceLooprow9 = false;

						row9Struct row9ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row9__id = row8.product_tmpl_id;
							if (exprKeyValue_row9__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row9HashKey.id = (int) (Integer) exprKeyValue_row9__id;
							}

							row9HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row9.lookup(row9HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_3
									|| !tHash_Lookup_row9.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_3 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.id = '"
							// + row9HashKey.id + "'");
						} // G 071

						row9Struct row9 = null;

						row9Struct fromLookup_row9 = null;
						row9 = row9Default;

						if (tHash_Lookup_row9 != null
								&& tHash_Lookup_row9.hasNext()) { // G 099

							fromLookup_row9 = tHash_Lookup_row9.next();

						} // G 099

						if (fromLookup_row9 != null) {
							row9 = fromLookup_row9;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							purchase_line = null;

							if (!rejectedInnerJoin_tMap_3) {

								// # Output table : 'purchase_line'
								purchase_line_tmp.D = "D";
								purchase_line_tmp.num_line = Numeric.sequence(
										"s1", 1, 1) * 10000;
								purchase_line_tmp.default_code = (row8.old_code != null ? row8.old_code
										: "").trim();
								purchase_line_tmp.newColumn1 = null;
								purchase_line_tmp.newColumn2 = null;
								purchase_line_tmp.newColumn3 = null;
								purchase_line_tmp.newColumn4 = null;
								purchase_line_tmp.newColumn5 = null;
								purchase_line_tmp.product_uom_qty = row2.product_qty
										.intValue();
								purchase_line_tmp.product_uom_qty_1 = row2.product_qty
										.intValue();
								purchase_line_tmp.name = (row8.name != null ? row8.name
										: "").trim();
								purchase_line_tmp.newColumn = null;
								purchase_line = purchase_line_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */
						// Start of branch "purchase_line"
						if (purchase_line != null) {

							/**
							 * [tFileOutputDelimited_3 main ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();

							if (purchase_line.D != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.D

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.num_line != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.num_line

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.default_code != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.default_code

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.newColumn1 != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.newColumn1

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.newColumn2 != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.newColumn2

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.newColumn3 != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.newColumn3

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.newColumn4 != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.newColumn4

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.newColumn5 != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.newColumn5

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.product_uom_qty != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.product_uom_qty

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.product_uom_qty_1 != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.product_uom_qty_1

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.name != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.name

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);

							if (purchase_line.newColumn != null) {

								sb_tFileOutputDelimited_3.append(

								purchase_line.newColumn

								);

							}

							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

							nb_line_tFileOutputDelimited_3++;

							outtFileOutputDelimited_3
									.write(sb_tFileOutputDelimited_3.toString());

							tos_count_tFileOutputDelimited_3++;

							/**
							 * [tFileOutputDelimited_3 main ] stop
							 */

						} // End of branch "purchase_line"

						/**
						 * [tPostgresqlInput_6 end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

					}
					stmt_tPostgresqlInput_6.close();

					globalMap.put("tPostgresqlInput_6_NB_LINE",
							nb_line_tPostgresqlInput_6);

					ok_Hash.put("tPostgresqlInput_6", true);
					end_Hash.put("tPostgresqlInput_6",
							System.currentTimeMillis());

					/**
					 * [tPostgresqlInput_6 end ] stop
					 */

					/**
					 * [tMap_3 end ] start
					 */

					currentComponent = "tMap_3";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove("tHash_Lookup_row8");

					if (tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove("tHash_Lookup_row9");

					// ###############################

					ok_Hash.put("tMap_3", true);
					end_Hash.put("tMap_3", System.currentTimeMillis());

					/**
					 * [tMap_3 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

				} finally {
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);
				} // finally

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				tFileCopy_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row9");

		}

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_1 begin ] start
				 */

				ok_Hash.put("tFileCopy_1", false);
				start_Hash.put("tFileCopy_1", System.currentTimeMillis());
				currentComponent = "tFileCopy_1";

				int tos_count_tFileCopy_1 = 0;

				/**
				 * [tFileCopy_1 begin ] stop
				 */
				/**
				 * [tFileCopy_1 main ] start
				 */

				currentComponent = "tFileCopy_1";

				String srcFileName_tFileCopy_1 = context.Path_files + ("/")
						+ "tmp.txt";

				java.io.File srcFile_tFileCopy_1 = new java.io.File(
						srcFileName_tFileCopy_1);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_1.exists()
						|| !srcFile_tFileCopy_1.isFile()) {
					throw new RuntimeException("The source File \""
							+ srcFileName_tFileCopy_1
							+ "\" does not exist or is not a file.");
				}

				String desDirName_tFileCopy_1 = context.Path_files;

				String desFileName_tFileCopy_1 = TalendDate.formatDate(
						"ddMMyy", new Date())
						+ "_X"
						+ ((String) globalMap.get("origin")) + ".txt";

				if (desFileName_tFileCopy_1 != null
						&& ("").equals(desFileName_tFileCopy_1.trim())) {
					desFileName_tFileCopy_1 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_1 = new java.io.File(
						desDirName_tFileCopy_1, desFileName_tFileCopy_1);

				if (!srcFile_tFileCopy_1.getPath().equals(
						desFile_tFileCopy_1.getPath())) {
					java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1
							.getParentFile();

					if (parentFile_tFileCopy_1 != null
							&& !parentFile_tFileCopy_1.exists()) {
						parentFile_tFileCopy_1.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(),
							desFile_tFileCopy_1.getPath(), true);
					java.io.File isRemoved_tFileCopy_1 = new java.io.File(
							context.Path_files + ("/") + "tmp.txt");
					if (isRemoved_tFileCopy_1.exists()) {
						System.err
								.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
					}

				}
				globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",
						desFile_tFileCopy_1.getPath());
				globalMap.put("tFileCopy_1_DESTINATION_FILENAME",
						desFile_tFileCopy_1.getName());

				globalMap.put("tFileCopy_1_SOURCE_DIRECTORY",
						srcFile_tFileCopy_1.getParent());
				globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY",
						desFile_tFileCopy_1.getParent());

				tos_count_tFileCopy_1++;

				/**
				 * [tFileCopy_1 main ] stop
				 */
				/**
				 * [tFileCopy_1 end ] start
				 */

				currentComponent = "tFileCopy_1";

				ok_Hash.put("tFileCopy_1", true);
				end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				/**
				 * [tFileCopy_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tSCPPut_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());
				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.Path_files;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				maskList_tFileList_1.add("*.txt");
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final String filemask_tFileList_1 : maskList_tFileList_1) {
								String filemask_compile_tFileList_1 = filemask_tFileList_1;

								filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_1.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_1);

								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									list_tFileList_1.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */
					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tSCPPut_1++;
					iterateLoop++;

					/**
					 * [tSCPPut_1 begin ] start
					 */

					ok_Hash.put("tSCPPut_1", false);
					start_Hash.put("tSCPPut_1", System.currentTimeMillis());
					currentComponent = "tSCPPut_1";

					int tos_count_tSCPPut_1 = 0;

					int nb_file_tSCPPut_1 = 0;
					globalMap.put("tSCPPut_1_STATUS", "");

					/* Create a connection instance */

					ch.ethz.ssh2.Connection conn_tSCPPut_1 = (ch.ethz.ssh2.Connection) globalMap
							.get("conn_tSCPConnection_1");

					ch.ethz.ssh2.SCPClient scp_tSCPPut_1 = new ch.ethz.ssh2.SCPClient(
							conn_tSCPPut_1);

					java.util.List<String> sourceList_tSCPPut_1 = new java.util.ArrayList<String>();
					if ((new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")))
							.exists())
							&& (new java.io.File(
									((String) globalMap
											.get("tFileList_1_CURRENT_FILEPATH")))
									.isFile())) {
						sourceList_tSCPPut_1.add(((String) globalMap
								.get("tFileList_1_CURRENT_FILEPATH")));
					}
					String[] sourceFileNames_tSCPPut_1 = new String[sourceList_tSCPPut_1
							.size()];
					for (int i_tSCPPut_1 = 0; i_tSCPPut_1 < sourceList_tSCPPut_1
							.size(); i_tSCPPut_1++) {
						sourceFileNames_tSCPPut_1[i_tSCPPut_1] = sourceList_tSCPPut_1
								.get(i_tSCPPut_1);
					}

					/**
					 * [tSCPPut_1 begin ] stop
					 */
					/**
					 * [tSCPPut_1 main ] start
					 */

					currentComponent = "tSCPPut_1";

					try {
						if (sourceFileNames_tSCPPut_1 != null
								&& sourceFileNames_tSCPPut_1.length != 0) {
							scp_tSCPPut_1.put(sourceFileNames_tSCPPut_1,
									((String) globalMap
											.get("davits_path_openerp_wms")),
									"0644");
							nb_file_tSCPPut_1 = sourceFileNames_tSCPPut_1.length;
							globalMap.put("tSCPPut_1_STATUS", "File put OK.");
						} else {
							globalMap.put("tSCPPut_1_STATUS",
									"No file transfered.");
						}
					} catch (java.lang.Exception e) {
						e.printStackTrace();
						globalMap.put("tSCPPut_1_STATUS", "File put fail.");
					}

					tos_count_tSCPPut_1++;

					/**
					 * [tSCPPut_1 main ] stop
					 */
					/**
					 * [tSCPPut_1 end ] start
					 */

					currentComponent = "tSCPPut_1";

					globalMap.put("tSCPPut_1_NB_FILE", nb_file_tSCPPut_1);

					ok_Hash.put("tSCPPut_1", true);
					end_Hash.put("tSCPPut_1", System.currentTimeMillis());

					/**
					 * [tSCPPut_1 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileDelete_1 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());
				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = context.Path_files;
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				maskList_tFileList_2.add("*.txt");
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final String filemask_tFileList_2 : maskList_tFileList_2) {
								String filemask_compile_tFileList_2 = filemask_tFileList_2;

								filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_2.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_2);

								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									list_tFileList_2.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */
					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */
					NB_ITERATE_tFileDelete_1++;
					iterateLoop++;

					/**
					 * [tFileDelete_1 begin ] start
					 */

					ok_Hash.put("tFileDelete_1", false);
					start_Hash.put("tFileDelete_1", System.currentTimeMillis());
					currentComponent = "tFileDelete_1";

					int tos_count_tFileDelete_1 = 0;

					/**
					 * [tFileDelete_1 begin ] stop
					 */
					/**
					 * [tFileDelete_1 main ] start
					 */

					currentComponent = "tFileDelete_1";

					class DeleteFoldertFileDelete_1 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_1 = new java.io.File(
							((String) globalMap
									.get("tFileList_2_CURRENT_FILEPATH")));
					if (file_tFileDelete_1.exists()
							&& file_tFileDelete_1.isFile()) {
						if (file_tFileDelete_1.delete()) {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"No file deleted.");
						}
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File does not exists or is invalid.");
					}
					globalMap.put("tFileDelete_1_DELETE_PATH",
							((String) globalMap
									.get("tFileList_2_CURRENT_FILEPATH")));

					tos_count_tFileDelete_1++;

					/**
					 * [tFileDelete_1 main ] stop
					 */
					/**
					 * [tFileDelete_1 end ] start
					 */

					currentComponent = "tFileDelete_1";

					ok_Hash.put("tFileDelete_1", true);
					end_Hash.put("tFileDelete_1", System.currentTimeMillis());

					/**
					 * [tFileDelete_1 end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSCPClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tSCPClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSCPClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSCPClose_1 begin ] start
				 */

				ok_Hash.put("tSCPClose_1", false);
				start_Hash.put("tSCPClose_1", System.currentTimeMillis());
				currentComponent = "tSCPClose_1";

				int tos_count_tSCPClose_1 = 0;

				/**
				 * [tSCPClose_1 begin ] stop
				 */
				/**
				 * [tSCPClose_1 main ] start
				 */

				currentComponent = "tSCPClose_1";

				ch.ethz.ssh2.Connection conn_tSCPClose_1 = (ch.ethz.ssh2.Connection) globalMap
						.get("conn_tSCPConnection_1");
				if (conn_tSCPClose_1 != null) {
					conn_tSCPClose_1.close();
				}

				tos_count_tSCPClose_1++;

				/**
				 * [tSCPClose_1 main ] stop
				 */
				/**
				 * [tSCPClose_1 end ] start
				 */

				currentComponent = "tSCPClose_1";

				ok_Hash.put("tSCPClose_1", true);
				end_Hash.put("tSCPClose_1", System.currentTimeMillis());

				/**
				 * [tSCPClose_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tSCPClose_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String order_policy;

		public String getOrder_policy() {
			return this.order_policy;
		}

		public int shop_id;

		public int getShop_id() {
			return this.shop_id;
		}

		public String client_order_ref;

		public String getClient_order_ref() {
			return this.client_order_ref;
		}

		public java.util.Date date_order;

		public java.util.Date getDate_order() {
			return this.date_order;
		}

		public int partner_id;

		public int getPartner_id() {
			return this.partner_id;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public Integer fiscal_position;

		public Integer getFiscal_position() {
			return this.fiscal_position;
		}

		public Integer user_id;

		public Integer getUser_id() {
			return this.user_id;
		}

		public Integer payment_term;

		public Integer getPayment_term() {
			return this.payment_term;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public Double amount_tax;

		public Double getAmount_tax() {
			return this.amount_tax;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public int pricelist_id;

		public int getPricelist_id() {
			return this.pricelist_id;
		}

		public int partner_invoice_id;

		public int getPartner_invoice_id() {
			return this.partner_invoice_id;
		}

		public Double amount_untaxed;

		public Double getAmount_untaxed() {
			return this.amount_untaxed;
		}

		public java.util.Date date_confirm;

		public java.util.Date getDate_confirm() {
			return this.date_confirm;
		}

		public Double amount_total;

		public Double getAmount_total() {
			return this.amount_total;
		}

		public Integer project_id;

		public Integer getProject_id() {
			return this.project_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public int partner_shipping_id;

		public int getPartner_shipping_id() {
			return this.partner_shipping_id;
		}

		public String invoice_quantity;

		public String getInvoice_quantity() {
			return this.invoice_quantity;
		}

		public Integer section_id;

		public Integer getSection_id() {
			return this.section_id;
		}

		public String picking_policy;

		public String getPicking_policy() {
			return this.picking_policy;
		}

		public Integer incoterm;

		public Integer getIncoterm() {
			return this.incoterm;
		}

		public Boolean shipped;

		public Boolean getShipped() {
			return this.shipped;
		}

		public Integer carrier_id;

		public Integer getCarrier_id() {
			return this.carrier_id;
		}

		public java.util.Date effective_date;

		public java.util.Date getEffective_date() {
			return this.effective_date;
		}

		public java.util.Date requested_date;

		public java.util.Date getRequested_date() {
			return this.requested_date;
		}

		public java.util.Date commitment_date;

		public java.util.Date getCommitment_date() {
			return this.commitment_date;
		}

		public String warning;

		public String getWarning() {
			return this.warning;
		}

		public java.util.Date ex_work;

		public java.util.Date getEx_work() {
			return this.ex_work;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.name == null) ? 0 : this.name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.name == null) {
				if (other.name != null)
					return false;
			} else if (!this.name.equals(other.name))
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id = this.id;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_date = this.write_date;
			other.write_uid = this.write_uid;
			other.origin = this.origin;
			other.order_policy = this.order_policy;
			other.shop_id = this.shop_id;
			other.client_order_ref = this.client_order_ref;
			other.date_order = this.date_order;
			other.partner_id = this.partner_id;
			other.note = this.note;
			other.fiscal_position = this.fiscal_position;
			other.user_id = this.user_id;
			other.payment_term = this.payment_term;
			other.company_id = this.company_id;
			other.amount_tax = this.amount_tax;
			other.state = this.state;
			other.pricelist_id = this.pricelist_id;
			other.partner_invoice_id = this.partner_invoice_id;
			other.amount_untaxed = this.amount_untaxed;
			other.date_confirm = this.date_confirm;
			other.amount_total = this.amount_total;
			other.project_id = this.project_id;
			other.name = this.name;
			other.partner_shipping_id = this.partner_shipping_id;
			other.invoice_quantity = this.invoice_quantity;
			other.section_id = this.section_id;
			other.picking_policy = this.picking_policy;
			other.incoterm = this.incoterm;
			other.shipped = this.shipped;
			other.carrier_id = this.carrier_id;
			other.effective_date = this.effective_date;
			other.requested_date = this.requested_date;
			other.commitment_date = this.commitment_date;
			other.warning = this.warning;
			other.ex_work = this.ex_work;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.name = this.name;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				this.create_uid = readInteger(dis, ois);

				this.create_date = readDate(dis, ois);

				this.write_date = readDate(dis, ois);

				this.write_uid = readInteger(dis, ois);

				this.origin = readString(dis, ois);

				this.order_policy = readString(dis, ois);

				this.shop_id = dis.readInt();

				this.client_order_ref = readString(dis, ois);

				this.date_order = readDate(dis, ois);

				this.partner_id = dis.readInt();

				this.note = readString(dis, ois);

				this.fiscal_position = readInteger(dis, ois);

				this.user_id = readInteger(dis, ois);

				this.payment_term = readInteger(dis, ois);

				this.company_id = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.amount_tax = null;
				} else {
					this.amount_tax = dis.readDouble();
				}

				this.state = readString(dis, ois);

				this.pricelist_id = dis.readInt();

				this.partner_invoice_id = dis.readInt();

				length = dis.readByte();
				if (length == -1) {
					this.amount_untaxed = null;
				} else {
					this.amount_untaxed = dis.readDouble();
				}

				this.date_confirm = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.amount_total = null;
				} else {
					this.amount_total = dis.readDouble();
				}

				this.project_id = readInteger(dis, ois);

				this.partner_shipping_id = dis.readInt();

				this.invoice_quantity = readString(dis, ois);

				this.section_id = readInteger(dis, ois);

				this.picking_policy = readString(dis, ois);

				this.incoterm = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.shipped = null;
				} else {
					this.shipped = dis.readBoolean();
				}

				this.carrier_id = readInteger(dis, ois);

				this.effective_date = readDate(dis, ois);

				this.requested_date = readDate(dis, ois);

				this.commitment_date = readDate(dis, ois);

				this.warning = readString(dis, ois);

				this.ex_work = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				writeInteger(this.create_uid, dos, oos);

				writeDate(this.create_date, dos, oos);

				writeDate(this.write_date, dos, oos);

				writeInteger(this.write_uid, dos, oos);

				writeString(this.origin, dos, oos);

				writeString(this.order_policy, dos, oos);

				dos.writeInt(this.shop_id);

				writeString(this.client_order_ref, dos, oos);

				writeDate(this.date_order, dos, oos);

				dos.writeInt(this.partner_id);

				writeString(this.note, dos, oos);

				writeInteger(this.fiscal_position, dos, oos);

				writeInteger(this.user_id, dos, oos);

				writeInteger(this.payment_term, dos, oos);

				writeInteger(this.company_id, dos, oos);

				if (this.amount_tax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.amount_tax);
				}

				writeString(this.state, dos, oos);

				dos.writeInt(this.pricelist_id);

				dos.writeInt(this.partner_invoice_id);

				if (this.amount_untaxed == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.amount_untaxed);
				}

				writeDate(this.date_confirm, dos, oos);

				if (this.amount_total == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.amount_total);
				}

				writeInteger(this.project_id, dos, oos);

				dos.writeInt(this.partner_shipping_id);

				writeString(this.invoice_quantity, dos, oos);

				writeInteger(this.section_id, dos, oos);

				writeString(this.picking_policy, dos, oos);

				writeInteger(this.incoterm, dos, oos);

				if (this.shipped == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.shipped);
				}

				writeInteger(this.carrier_id, dos, oos);

				writeDate(this.effective_date, dos, oos);

				writeDate(this.requested_date, dos, oos);

				writeDate(this.commitment_date, dos, oos);

				writeString(this.warning, dos, oos);

				writeDate(this.ex_work, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",order_policy=" + order_policy);
			sb.append(",shop_id=" + String.valueOf(shop_id));
			sb.append(",client_order_ref=" + client_order_ref);
			sb.append(",date_order=" + String.valueOf(date_order));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",note=" + note);
			sb.append(",fiscal_position=" + String.valueOf(fiscal_position));
			sb.append(",user_id=" + String.valueOf(user_id));
			sb.append(",payment_term=" + String.valueOf(payment_term));
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",amount_tax=" + String.valueOf(amount_tax));
			sb.append(",state=" + state);
			sb.append(",pricelist_id=" + String.valueOf(pricelist_id));
			sb.append(",partner_invoice_id="
					+ String.valueOf(partner_invoice_id));
			sb.append(",amount_untaxed=" + String.valueOf(amount_untaxed));
			sb.append(",date_confirm=" + String.valueOf(date_confirm));
			sb.append(",amount_total=" + String.valueOf(amount_total));
			sb.append(",project_id=" + String.valueOf(project_id));
			sb.append(",name=" + name);
			sb.append(",partner_shipping_id="
					+ String.valueOf(partner_shipping_id));
			sb.append(",invoice_quantity=" + invoice_quantity);
			sb.append(",section_id=" + String.valueOf(section_id));
			sb.append(",picking_policy=" + picking_policy);
			sb.append(",incoterm=" + String.valueOf(incoterm));
			sb.append(",shipped=" + String.valueOf(shipped));
			sb.append(",carrier_id=" + String.valueOf(carrier_id));
			sb.append(",effective_date=" + String.valueOf(effective_date));
			sb.append(",requested_date=" + String.valueOf(requested_date));
			sb.append(",commitment_date=" + String.valueOf(commitment_date));
			sb.append(",warning=" + warning);
			sb.append(",ex_work=" + String.valueOf(ex_work));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.name, other.name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row6";

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tPostgresqlInput_9 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_9 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_9", false);
				start_Hash
						.put("tPostgresqlInput_9", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_9";

				int tos_count_tPostgresqlInput_9 = 0;

				int nb_line_tPostgresqlInput_9 = 0;
				java.sql.Connection conn_tPostgresqlInput_9 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_9) {
					conn_tPostgresqlInput_9 = dataSources_tPostgresqlInput_9
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_9 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_9 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_9 = context.davidts_dev_Password;
					conn_tPostgresqlInput_9 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_9,
									dbUser_tPostgresqlInput_9,
									dbPwd_tPostgresqlInput_9);

				}
				conn_tPostgresqlInput_9.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9
						.createStatement();

				String dbquery_tPostgresqlInput_9 = "SELECT  id,create_uid,create_date,write_date,write_uid,origin,order_policy,shop_id,  client_order_ref,date_order,partner_id,note,fiscal_position,user_id,payment_term,company_id,  amount_tax,state,pricelist_id,partner_invoice_id,amount_untaxed,date_confirm,amount_total,  project_id,name,partner_shipping_id,invoice_quantity,section_id,picking_policy,incoterm,  shipped,carrier_id,effective_date,requested_date,commitment_date,warning,ex_work FROM sale_order";

				globalMap.put("tPostgresqlInput_9_QUERY",
						dbquery_tPostgresqlInput_9);

				java.sql.ResultSet rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9
						.executeQuery(dbquery_tPostgresqlInput_9);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9
						.getColumnCount();

				String tmpContent_tPostgresqlInput_9 = null;
				int column_index_tPostgresqlInput_9 = 1;
				while (rs_tPostgresqlInput_9.next()) {
					nb_line_tPostgresqlInput_9++;

					column_index_tPostgresqlInput_9 = 1;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.id = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 2;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.create_uid = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.create_uid = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.create_uid = null;
						}

					}
					column_index_tPostgresqlInput_9 = 3;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.create_date = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.create_date = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.create_date = null;
						}

					}
					column_index_tPostgresqlInput_9 = 4;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.write_date = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.write_date = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.write_date = null;
						}

					}
					column_index_tPostgresqlInput_9 = 5;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.write_uid = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.write_uid = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.write_uid = null;
						}

					}
					column_index_tPostgresqlInput_9 = 6;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.origin = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.origin = tmpContent_tPostgresqlInput_9;
						} else {
							row6.origin = null;
						}

					}
					column_index_tPostgresqlInput_9 = 7;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.order_policy = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.order_policy = tmpContent_tPostgresqlInput_9;
						} else {
							row6.order_policy = null;
						}

					}
					column_index_tPostgresqlInput_9 = 8;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.shop_id = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.shop_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 9;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.client_order_ref = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.client_order_ref = tmpContent_tPostgresqlInput_9;
						} else {
							row6.client_order_ref = null;
						}

					}
					column_index_tPostgresqlInput_9 = 10;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.date_order = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.date_order = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.date_order = null;
						}

					}
					column_index_tPostgresqlInput_9 = 11;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.partner_id = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.partner_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 12;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.note = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.note = tmpContent_tPostgresqlInput_9;
						} else {
							row6.note = null;
						}

					}
					column_index_tPostgresqlInput_9 = 13;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.fiscal_position = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.fiscal_position = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.fiscal_position = null;
						}

					}
					column_index_tPostgresqlInput_9 = 14;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.user_id = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.user_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.user_id = null;
						}

					}
					column_index_tPostgresqlInput_9 = 15;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.payment_term = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.payment_term = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.payment_term = null;
						}

					}
					column_index_tPostgresqlInput_9 = 16;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.company_id = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.company_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.company_id = null;
						}

					}
					column_index_tPostgresqlInput_9 = 17;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.amount_tax = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.amount_tax = rs_tPostgresqlInput_9
									.getDouble(column_index_tPostgresqlInput_9);
						} else {
							row6.amount_tax = null;
						}

					}
					column_index_tPostgresqlInput_9 = 18;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.state = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.state = tmpContent_tPostgresqlInput_9;
						} else {
							row6.state = null;
						}

					}
					column_index_tPostgresqlInput_9 = 19;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.pricelist_id = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.pricelist_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 20;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.partner_invoice_id = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.partner_invoice_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 21;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.amount_untaxed = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.amount_untaxed = rs_tPostgresqlInput_9
									.getDouble(column_index_tPostgresqlInput_9);
						} else {
							row6.amount_untaxed = null;
						}

					}
					column_index_tPostgresqlInput_9 = 22;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.date_confirm = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.date_confirm = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.date_confirm = null;
						}

					}
					column_index_tPostgresqlInput_9 = 23;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.amount_total = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.amount_total = rs_tPostgresqlInput_9
									.getDouble(column_index_tPostgresqlInput_9);
						} else {
							row6.amount_total = null;
						}

					}
					column_index_tPostgresqlInput_9 = 24;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.project_id = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.project_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.project_id = null;
						}

					}
					column_index_tPostgresqlInput_9 = 25;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.name = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.name = tmpContent_tPostgresqlInput_9;
						} else {
							row6.name = null;
						}

					}
					column_index_tPostgresqlInput_9 = 26;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.partner_shipping_id = 0;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.partner_shipping_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_9 = 27;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.invoice_quantity = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.invoice_quantity = tmpContent_tPostgresqlInput_9;
						} else {
							row6.invoice_quantity = null;
						}

					}
					column_index_tPostgresqlInput_9 = 28;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.section_id = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.section_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.section_id = null;
						}

					}
					column_index_tPostgresqlInput_9 = 29;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.picking_policy = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.picking_policy = tmpContent_tPostgresqlInput_9;
						} else {
							row6.picking_policy = null;
						}

					}
					column_index_tPostgresqlInput_9 = 30;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.incoterm = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.incoterm = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.incoterm = null;
						}

					}
					column_index_tPostgresqlInput_9 = 31;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.shipped = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.shipped = rs_tPostgresqlInput_9
									.getBoolean(column_index_tPostgresqlInput_9);
						} else {
							row6.shipped = null;
						}

					}
					column_index_tPostgresqlInput_9 = 32;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.carrier_id = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getObject(column_index_tPostgresqlInput_9) != null) {
							row6.carrier_id = rs_tPostgresqlInput_9
									.getInt(column_index_tPostgresqlInput_9);
						} else {
							row6.carrier_id = null;
						}

					}
					column_index_tPostgresqlInput_9 = 33;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.effective_date = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.effective_date = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.effective_date = null;
						}

					}
					column_index_tPostgresqlInput_9 = 34;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.requested_date = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.requested_date = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.requested_date = null;
						}

					}
					column_index_tPostgresqlInput_9 = 35;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.commitment_date = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.commitment_date = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.commitment_date = null;
						}

					}
					column_index_tPostgresqlInput_9 = 36;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.warning = null;
					} else {

						tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
								.getString(column_index_tPostgresqlInput_9);
						if (tmpContent_tPostgresqlInput_9 != null) {
							row6.warning = tmpContent_tPostgresqlInput_9;
						} else {
							row6.warning = null;
						}

					}
					column_index_tPostgresqlInput_9 = 37;

					if (colQtyInRs_tPostgresqlInput_9 < column_index_tPostgresqlInput_9) {
						row6.ex_work = null;
					} else {

						if (rs_tPostgresqlInput_9
								.getTimestamp(column_index_tPostgresqlInput_9) != null) {
							row6.ex_work = new java.util.Date(
									rs_tPostgresqlInput_9.getTimestamp(
											column_index_tPostgresqlInput_9)
											.getTime());
						} else {
							row6.ex_work = null;
						}

					}

					/**
					 * [tPostgresqlInput_9 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_9 main ] start
					 */

					currentComponent = "tPostgresqlInput_9";

					tos_count_tPostgresqlInput_9++;

					/**
					 * [tPostgresqlInput_9 main ] stop
					 */

					/**
					 * [tAdvancedHash_row6 main ] start
					 */

					currentComponent = "tAdvancedHash_row6";

					row6Struct row6_HashRow = new row6Struct();

					row6_HashRow.id = row6.id;

					row6_HashRow.create_uid = row6.create_uid;

					row6_HashRow.create_date = row6.create_date;

					row6_HashRow.write_date = row6.write_date;

					row6_HashRow.write_uid = row6.write_uid;

					row6_HashRow.origin = row6.origin;

					row6_HashRow.order_policy = row6.order_policy;

					row6_HashRow.shop_id = row6.shop_id;

					row6_HashRow.client_order_ref = row6.client_order_ref;

					row6_HashRow.date_order = row6.date_order;

					row6_HashRow.partner_id = row6.partner_id;

					row6_HashRow.note = row6.note;

					row6_HashRow.fiscal_position = row6.fiscal_position;

					row6_HashRow.user_id = row6.user_id;

					row6_HashRow.payment_term = row6.payment_term;

					row6_HashRow.company_id = row6.company_id;

					row6_HashRow.amount_tax = row6.amount_tax;

					row6_HashRow.state = row6.state;

					row6_HashRow.pricelist_id = row6.pricelist_id;

					row6_HashRow.partner_invoice_id = row6.partner_invoice_id;

					row6_HashRow.amount_untaxed = row6.amount_untaxed;

					row6_HashRow.date_confirm = row6.date_confirm;

					row6_HashRow.amount_total = row6.amount_total;

					row6_HashRow.project_id = row6.project_id;

					row6_HashRow.name = row6.name;

					row6_HashRow.partner_shipping_id = row6.partner_shipping_id;

					row6_HashRow.invoice_quantity = row6.invoice_quantity;

					row6_HashRow.section_id = row6.section_id;

					row6_HashRow.picking_policy = row6.picking_policy;

					row6_HashRow.incoterm = row6.incoterm;

					row6_HashRow.shipped = row6.shipped;

					row6_HashRow.carrier_id = row6.carrier_id;

					row6_HashRow.effective_date = row6.effective_date;

					row6_HashRow.requested_date = row6.requested_date;

					row6_HashRow.commitment_date = row6.commitment_date;

					row6_HashRow.warning = row6.warning;

					row6_HashRow.ex_work = row6.ex_work;

					tHash_Lookup_row6.put(row6_HashRow);

					tos_count_tAdvancedHash_row6++;

					/**
					 * [tAdvancedHash_row6 main ] stop
					 */

					/**
					 * [tPostgresqlInput_9 end ] start
					 */

					currentComponent = "tPostgresqlInput_9";

				}
				stmt_tPostgresqlInput_9.close();

				conn_tPostgresqlInput_9.commit();
				conn_tPostgresqlInput_9.close();

				globalMap.put("tPostgresqlInput_9_NB_LINE",
						nb_line_tPostgresqlInput_9);

				ok_Hash.put("tPostgresqlInput_9", true);
				end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String street2;

		public String getStreet2() {
			return this.street2;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Boolean is_company;

		public Boolean getIs_company() {
			return this.is_company;
		}

		public Integer state_id;

		public Integer getState_id() {
			return this.state_id;
		}

		public Integer section_id;

		public Integer getSection_id() {
			return this.section_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id = this.id;
			other.name = this.name;
			other.street = this.street;
			other.city = this.city;
			other.zip = this.zip;
			other.country_id = this.country_id;
			other.type = this.type;
			other.fax = this.fax;
			other.street2 = this.street2;
			other.date = this.date;
			other.is_company = this.is_company;
			other.state_id = this.state_id;
			other.section_id = this.section_id;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.street = readString(dis, ois);

				this.city = readString(dis, ois);

				this.zip = readString(dis, ois);

				this.country_id = readInteger(dis, ois);

				this.type = readString(dis, ois);

				this.fax = readString(dis, ois);

				this.street2 = readString(dis, ois);

				this.date = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.is_company = null;
				} else {
					this.is_company = dis.readBoolean();
				}

				this.state_id = readInteger(dis, ois);

				this.section_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.street, dos, oos);

				writeString(this.city, dos, oos);

				writeString(this.zip, dos, oos);

				writeInteger(this.country_id, dos, oos);

				writeString(this.type, dos, oos);

				writeString(this.fax, dos, oos);

				writeString(this.street2, dos, oos);

				writeDate(this.date, dos, oos);

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				writeInteger(this.state_id, dos, oos);

				writeInteger(this.section_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",street=" + street);
			sb.append(",city=" + city);
			sb.append(",zip=" + zip);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",type=" + type);
			sb.append(",fax=" + fax);
			sb.append(",street2=" + street2);
			sb.append(",date=" + String.valueOf(date));
			sb.append(",is_company=" + String.valueOf(is_company));
			sb.append(",state_id=" + String.valueOf(state_id));
			sb.append(",section_id=" + String.valueOf(section_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_2) {
					conn_tPostgresqlInput_2 = dataSources_tPostgresqlInput_2
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_2 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_2 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_2 = context.davidts_dev_Password;
					conn_tPostgresqlInput_2 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_2,
									dbUser_tPostgresqlInput_2,
									dbPwd_tPostgresqlInput_2);

				}
				conn_tPostgresqlInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT  id,name,street,city,zip,country_id,type,fax,street2,date,is_company,state_id,section_id FROM res_partner";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
						.executeQuery(dbquery_tPostgresqlInput_2);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
						.getColumnCount();

				String tmpContent_tPostgresqlInput_2 = null;
				int column_index_tPostgresqlInput_2 = 1;
				while (rs_tPostgresqlInput_2.next()) {
					nb_line_tPostgresqlInput_2++;

					column_index_tPostgresqlInput_2 = 1;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.id = 0;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row4.id = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_2 = 2;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.name = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.name = tmpContent_tPostgresqlInput_2;
						} else {
							row4.name = null;
						}

					}
					column_index_tPostgresqlInput_2 = 3;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.street = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.street = tmpContent_tPostgresqlInput_2;
						} else {
							row4.street = null;
						}

					}
					column_index_tPostgresqlInput_2 = 4;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.city = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.city = tmpContent_tPostgresqlInput_2;
						} else {
							row4.city = null;
						}

					}
					column_index_tPostgresqlInput_2 = 5;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.zip = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.zip = tmpContent_tPostgresqlInput_2;
						} else {
							row4.zip = null;
						}

					}
					column_index_tPostgresqlInput_2 = 6;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.country_id = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row4.country_id = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							row4.country_id = null;
						}

					}
					column_index_tPostgresqlInput_2 = 7;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.type = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.type = tmpContent_tPostgresqlInput_2;
						} else {
							row4.type = null;
						}

					}
					column_index_tPostgresqlInput_2 = 8;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.fax = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.fax = tmpContent_tPostgresqlInput_2;
						} else {
							row4.fax = null;
						}

					}
					column_index_tPostgresqlInput_2 = 9;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.street2 = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.street2 = tmpContent_tPostgresqlInput_2;
						} else {
							row4.street2 = null;
						}

					}
					column_index_tPostgresqlInput_2 = 10;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.date = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getTimestamp(column_index_tPostgresqlInput_2) != null) {
							row4.date = new java.util.Date(
									rs_tPostgresqlInput_2.getTimestamp(
											column_index_tPostgresqlInput_2)
											.getTime());
						} else {
							row4.date = null;
						}

					}
					column_index_tPostgresqlInput_2 = 11;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.is_company = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row4.is_company = rs_tPostgresqlInput_2
									.getBoolean(column_index_tPostgresqlInput_2);
						} else {
							row4.is_company = null;
						}

					}
					column_index_tPostgresqlInput_2 = 12;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.state_id = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row4.state_id = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							row4.state_id = null;
						}

					}
					column_index_tPostgresqlInput_2 = 13;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.section_id = null;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row4.section_id = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							row4.section_id = null;
						}

					}

					/**
					 * [tPostgresqlInput_2 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_2 main ] start
					 */

					currentComponent = "tPostgresqlInput_2";

					tos_count_tPostgresqlInput_2++;

					/**
					 * [tPostgresqlInput_2 main ] stop
					 */

					/**
					 * [tAdvancedHash_row4 main ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.id = row4.id;

					row4_HashRow.name = row4.name;

					row4_HashRow.street = row4.street;

					row4_HashRow.city = row4.city;

					row4_HashRow.zip = row4.zip;

					row4_HashRow.country_id = row4.country_id;

					row4_HashRow.type = row4.type;

					row4_HashRow.fax = row4.fax;

					row4_HashRow.street2 = row4.street2;

					row4_HashRow.date = row4.date;

					row4_HashRow.is_company = row4.is_company;

					row4_HashRow.state_id = row4.state_id;

					row4_HashRow.section_id = row4.section_id;

					tHash_Lookup_row4.put(row4_HashRow);

					tos_count_tAdvancedHash_row4++;

					/**
					 * [tAdvancedHash_row4 main ] stop
					 */

					/**
					 * [tPostgresqlInput_2 end ] start
					 */

					currentComponent = "tPostgresqlInput_2";

				}
				stmt_tPostgresqlInput_2.close();

				conn_tPostgresqlInput_2.commit();
				conn_tPostgresqlInput_2.close();

				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String street2;

		public String getStreet2() {
			return this.street2;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Boolean is_company;

		public Boolean getIs_company() {
			return this.is_company;
		}

		public Integer state_id;

		public Integer getState_id() {
			return this.state_id;
		}

		public Integer section_id;

		public Integer getSection_id() {
			return this.section_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.id = this.id;
			other.name = this.name;
			other.street = this.street;
			other.city = this.city;
			other.zip = this.zip;
			other.country_id = this.country_id;
			other.type = this.type;
			other.fax = this.fax;
			other.street2 = this.street2;
			other.date = this.date;
			other.is_company = this.is_company;
			other.state_id = this.state_id;
			other.section_id = this.section_id;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.street = readString(dis, ois);

				this.city = readString(dis, ois);

				this.zip = readString(dis, ois);

				this.country_id = readInteger(dis, ois);

				this.type = readString(dis, ois);

				this.fax = readString(dis, ois);

				this.street2 = readString(dis, ois);

				this.date = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.is_company = null;
				} else {
					this.is_company = dis.readBoolean();
				}

				this.state_id = readInteger(dis, ois);

				this.section_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.street, dos, oos);

				writeString(this.city, dos, oos);

				writeString(this.zip, dos, oos);

				writeInteger(this.country_id, dos, oos);

				writeString(this.type, dos, oos);

				writeString(this.fax, dos, oos);

				writeString(this.street2, dos, oos);

				writeDate(this.date, dos, oos);

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				writeInteger(this.state_id, dos, oos);

				writeInteger(this.section_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",street=" + street);
			sb.append(",city=" + city);
			sb.append(",zip=" + zip);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",type=" + type);
			sb.append(",fax=" + fax);
			sb.append(",street2=" + street2);
			sb.append(",date=" + String.valueOf(date));
			sb.append(",is_company=" + String.valueOf(is_company));
			sb.append(",state_id=" + String.valueOf(state_id));
			sb.append(",section_id=" + String.valueOf(section_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_3) {
					conn_tPostgresqlInput_3 = dataSources_tPostgresqlInput_3
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_3 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_3 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_3 = context.davidts_dev_Password;
					conn_tPostgresqlInput_3 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_3,
									dbUser_tPostgresqlInput_3,
									dbPwd_tPostgresqlInput_3);

				}
				conn_tPostgresqlInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT  id,name,street,city,zip,country_id,type,fax,street2,date,is_company,state_id,section_id  FROM res_partner";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);

				java.sql.ResultSet rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
						.executeQuery(dbquery_tPostgresqlInput_3);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
						.getColumnCount();

				String tmpContent_tPostgresqlInput_3 = null;
				int column_index_tPostgresqlInput_3 = 1;
				while (rs_tPostgresqlInput_3.next()) {
					nb_line_tPostgresqlInput_3++;

					column_index_tPostgresqlInput_3 = 1;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.id = 0;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row7.id = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_3 = 2;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.name = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.name = tmpContent_tPostgresqlInput_3;
						} else {
							row7.name = null;
						}

					}
					column_index_tPostgresqlInput_3 = 3;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.street = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.street = tmpContent_tPostgresqlInput_3;
						} else {
							row7.street = null;
						}

					}
					column_index_tPostgresqlInput_3 = 4;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.city = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.city = tmpContent_tPostgresqlInput_3;
						} else {
							row7.city = null;
						}

					}
					column_index_tPostgresqlInput_3 = 5;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.zip = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.zip = tmpContent_tPostgresqlInput_3;
						} else {
							row7.zip = null;
						}

					}
					column_index_tPostgresqlInput_3 = 6;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.country_id = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row7.country_id = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							row7.country_id = null;
						}

					}
					column_index_tPostgresqlInput_3 = 7;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.type = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.type = tmpContent_tPostgresqlInput_3;
						} else {
							row7.type = null;
						}

					}
					column_index_tPostgresqlInput_3 = 8;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.fax = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.fax = tmpContent_tPostgresqlInput_3;
						} else {
							row7.fax = null;
						}

					}
					column_index_tPostgresqlInput_3 = 9;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.street2 = null;
					} else {

						tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
								.getString(column_index_tPostgresqlInput_3);
						if (tmpContent_tPostgresqlInput_3 != null) {
							row7.street2 = tmpContent_tPostgresqlInput_3;
						} else {
							row7.street2 = null;
						}

					}
					column_index_tPostgresqlInput_3 = 10;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.date = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getTimestamp(column_index_tPostgresqlInput_3) != null) {
							row7.date = new java.util.Date(
									rs_tPostgresqlInput_3.getTimestamp(
											column_index_tPostgresqlInput_3)
											.getTime());
						} else {
							row7.date = null;
						}

					}
					column_index_tPostgresqlInput_3 = 11;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.is_company = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row7.is_company = rs_tPostgresqlInput_3
									.getBoolean(column_index_tPostgresqlInput_3);
						} else {
							row7.is_company = null;
						}

					}
					column_index_tPostgresqlInput_3 = 12;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.state_id = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row7.state_id = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							row7.state_id = null;
						}

					}
					column_index_tPostgresqlInput_3 = 13;

					if (colQtyInRs_tPostgresqlInput_3 < column_index_tPostgresqlInput_3) {
						row7.section_id = null;
					} else {

						if (rs_tPostgresqlInput_3
								.getObject(column_index_tPostgresqlInput_3) != null) {
							row7.section_id = rs_tPostgresqlInput_3
									.getInt(column_index_tPostgresqlInput_3);
						} else {
							row7.section_id = null;
						}

					}

					/**
					 * [tPostgresqlInput_3 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_3 main ] start
					 */

					currentComponent = "tPostgresqlInput_3";

					tos_count_tPostgresqlInput_3++;

					/**
					 * [tPostgresqlInput_3 main ] stop
					 */

					/**
					 * [tAdvancedHash_row7 main ] start
					 */

					currentComponent = "tAdvancedHash_row7";

					row7Struct row7_HashRow = new row7Struct();

					row7_HashRow.id = row7.id;

					row7_HashRow.name = row7.name;

					row7_HashRow.street = row7.street;

					row7_HashRow.city = row7.city;

					row7_HashRow.zip = row7.zip;

					row7_HashRow.country_id = row7.country_id;

					row7_HashRow.type = row7.type;

					row7_HashRow.fax = row7.fax;

					row7_HashRow.street2 = row7.street2;

					row7_HashRow.date = row7.date;

					row7_HashRow.is_company = row7.is_company;

					row7_HashRow.state_id = row7.state_id;

					row7_HashRow.section_id = row7.section_id;

					tHash_Lookup_row7.put(row7_HashRow);

					tos_count_tAdvancedHash_row7++;

					/**
					 * [tAdvancedHash_row7 main ] stop
					 */

					/**
					 * [tPostgresqlInput_3 end ] start
					 */

					currentComponent = "tPostgresqlInput_3";

				}
				stmt_tPostgresqlInput_3.close();

				conn_tPostgresqlInput_3.commit();
				conn_tPostgresqlInput_3.close();

				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.id = this.id;
			other.code = this.code;
			other.name = this.name;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.code = readString(dis, ois);

				this.name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.code, dos, oos);

				writeString(this.name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",code=" + code);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tPostgresqlInput_5 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_5) {
					conn_tPostgresqlInput_5 = dataSources_tPostgresqlInput_5
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_5 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_5 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_5 = context.davidts_dev_Password;
					conn_tPostgresqlInput_5 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_5,
									dbUser_tPostgresqlInput_5,
									dbPwd_tPostgresqlInput_5);

				}
				conn_tPostgresqlInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "SELECT  id,code,name FROM res_country";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);

				java.sql.ResultSet rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
						.executeQuery(dbquery_tPostgresqlInput_5);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
						.getColumnCount();

				String tmpContent_tPostgresqlInput_5 = null;
				int column_index_tPostgresqlInput_5 = 1;
				while (rs_tPostgresqlInput_5.next()) {
					nb_line_tPostgresqlInput_5++;

					column_index_tPostgresqlInput_5 = 1;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row10.id = 0;
					} else {

						if (rs_tPostgresqlInput_5
								.getObject(column_index_tPostgresqlInput_5) != null) {
							row10.id = rs_tPostgresqlInput_5
									.getInt(column_index_tPostgresqlInput_5);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_5 = 2;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row10.code = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row10.code = tmpContent_tPostgresqlInput_5;
						} else {
							row10.code = null;
						}

					}
					column_index_tPostgresqlInput_5 = 3;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row10.name = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row10.name = tmpContent_tPostgresqlInput_5;
						} else {
							row10.name = null;
						}

					}

					/**
					 * [tPostgresqlInput_5 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_5 main ] start
					 */

					currentComponent = "tPostgresqlInput_5";

					tos_count_tPostgresqlInput_5++;

					/**
					 * [tPostgresqlInput_5 main ] stop
					 */

					/**
					 * [tAdvancedHash_row10 main ] start
					 */

					currentComponent = "tAdvancedHash_row10";

					row10Struct row10_HashRow = new row10Struct();

					row10_HashRow.id = row10.id;

					row10_HashRow.code = row10.code;

					row10_HashRow.name = row10.name;

					tHash_Lookup_row10.put(row10_HashRow);

					tos_count_tAdvancedHash_row10++;

					/**
					 * [tAdvancedHash_row10 main ] stop
					 */

					/**
					 * [tPostgresqlInput_5 end ] start
					 */

					currentComponent = "tPostgresqlInput_5";

				}
				stmt_tPostgresqlInput_5.close();

				conn_tPostgresqlInput_5.commit();
				conn_tPostgresqlInput_5.close();

				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableComparableLookupRow<row11Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String code;

		public String getCode() {
			return this.code;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.id = this.id;
			other.code = this.code;
			other.name = this.name;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.code = readString(dis, ois);

				this.name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.code, dos, oos);

				writeString(this.name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",code=" + code);
			sb.append(",name=" + name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();

				/**
				 * [tAdvancedHash_row11 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row11", false);
				start_Hash.put("tAdvancedHash_row11",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row11";

				int tos_count_tAdvancedHash_row11 = 0;

				// connection name:row11
				// source node:tPostgresqlInput_11 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row11,row11) |
				// target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row11Struct> getLookup(matchingModeEnum_row11);

				globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);

				/**
				 * [tAdvancedHash_row11 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_11", false);
				start_Hash.put("tPostgresqlInput_11",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_11";

				int tos_count_tPostgresqlInput_11 = 0;

				int nb_line_tPostgresqlInput_11 = 0;
				java.sql.Connection conn_tPostgresqlInput_11 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_11) {
					conn_tPostgresqlInput_11 = dataSources_tPostgresqlInput_11
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_11 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_11 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_11 = context.davidts_dev_Password;
					conn_tPostgresqlInput_11 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_11,
									dbUser_tPostgresqlInput_11,
									dbPwd_tPostgresqlInput_11);

				}
				conn_tPostgresqlInput_11.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11
						.createStatement();

				String dbquery_tPostgresqlInput_11 = "SELECT  id,code,name FROM res_country";

				globalMap.put("tPostgresqlInput_11_QUERY",
						dbquery_tPostgresqlInput_11);

				java.sql.ResultSet rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11
						.executeQuery(dbquery_tPostgresqlInput_11);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11
						.getColumnCount();

				String tmpContent_tPostgresqlInput_11 = null;
				int column_index_tPostgresqlInput_11 = 1;
				while (rs_tPostgresqlInput_11.next()) {
					nb_line_tPostgresqlInput_11++;

					column_index_tPostgresqlInput_11 = 1;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row11.id = 0;
					} else {

						if (rs_tPostgresqlInput_11
								.getObject(column_index_tPostgresqlInput_11) != null) {
							row11.id = rs_tPostgresqlInput_11
									.getInt(column_index_tPostgresqlInput_11);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_11 = 2;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row11.code = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row11.code = tmpContent_tPostgresqlInput_11;
						} else {
							row11.code = null;
						}

					}
					column_index_tPostgresqlInput_11 = 3;

					if (colQtyInRs_tPostgresqlInput_11 < column_index_tPostgresqlInput_11) {
						row11.name = null;
					} else {

						tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
								.getString(column_index_tPostgresqlInput_11);
						if (tmpContent_tPostgresqlInput_11 != null) {
							row11.name = tmpContent_tPostgresqlInput_11;
						} else {
							row11.name = null;
						}

					}

					/**
					 * [tPostgresqlInput_11 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_11 main ] start
					 */

					currentComponent = "tPostgresqlInput_11";

					tos_count_tPostgresqlInput_11++;

					/**
					 * [tPostgresqlInput_11 main ] stop
					 */

					/**
					 * [tAdvancedHash_row11 main ] start
					 */

					currentComponent = "tAdvancedHash_row11";

					row11Struct row11_HashRow = new row11Struct();

					row11_HashRow.id = row11.id;

					row11_HashRow.code = row11.code;

					row11_HashRow.name = row11.name;

					tHash_Lookup_row11.put(row11_HashRow);

					tos_count_tAdvancedHash_row11++;

					/**
					 * [tAdvancedHash_row11 main ] stop
					 */

					/**
					 * [tPostgresqlInput_11 end ] start
					 */

					currentComponent = "tPostgresqlInput_11";

				}
				stmt_tPostgresqlInput_11.close();

				conn_tPostgresqlInput_11.commit();
				conn_tPostgresqlInput_11.close();

				globalMap.put("tPostgresqlInput_11_NB_LINE",
						nb_line_tPostgresqlInput_11);

				ok_Hash.put("tPostgresqlInput_11", true);
				end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_11 end ] stop
				 */

				/**
				 * [tAdvancedHash_row11 end ] start
				 */

				currentComponent = "tAdvancedHash_row11";

				tHash_Lookup_row11.endPut();

				ok_Hash.put("tAdvancedHash_row11", true);
				end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String fax;

		public String getFax() {
			return this.fax;
		}

		public String street2;

		public String getStreet2() {
			return this.street2;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Boolean is_company;

		public Boolean getIs_company() {
			return this.is_company;
		}

		public Integer state_id;

		public Integer getState_id() {
			return this.state_id;
		}

		public Integer section_id;

		public Integer getSection_id() {
			return this.section_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.id = this.id;
			other.name = this.name;
			other.street = this.street;
			other.city = this.city;
			other.zip = this.zip;
			other.country_id = this.country_id;
			other.type = this.type;
			other.fax = this.fax;
			other.street2 = this.street2;
			other.date = this.date;
			other.is_company = this.is_company;
			other.state_id = this.state_id;
			other.section_id = this.section_id;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.street = readString(dis, ois);

				this.city = readString(dis, ois);

				this.zip = readString(dis, ois);

				this.country_id = readInteger(dis, ois);

				this.type = readString(dis, ois);

				this.fax = readString(dis, ois);

				this.street2 = readString(dis, ois);

				this.date = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.is_company = null;
				} else {
					this.is_company = dis.readBoolean();
				}

				this.state_id = readInteger(dis, ois);

				this.section_id = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.street, dos, oos);

				writeString(this.city, dos, oos);

				writeString(this.zip, dos, oos);

				writeInteger(this.country_id, dos, oos);

				writeString(this.type, dos, oos);

				writeString(this.fax, dos, oos);

				writeString(this.street2, dos, oos);

				writeDate(this.date, dos, oos);

				if (this.is_company == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_company);
				}

				writeInteger(this.state_id, dos, oos);

				writeInteger(this.section_id, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",street=" + street);
			sb.append(",city=" + city);
			sb.append(",zip=" + zip);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",type=" + type);
			sb.append(",fax=" + fax);
			sb.append(",street2=" + street2);
			sb.append(",date=" + String.valueOf(date));
			sb.append(",is_company=" + String.valueOf(is_company));
			sb.append(",state_id=" + String.valueOf(state_id));
			sb.append(",section_id=" + String.valueOf(section_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row12";

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tPostgresqlInput_12 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row12,row12) |
				// target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct> getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_12 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_12", false);
				start_Hash.put("tPostgresqlInput_12",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_12";

				int tos_count_tPostgresqlInput_12 = 0;

				int nb_line_tPostgresqlInput_12 = 0;
				java.sql.Connection conn_tPostgresqlInput_12 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_12) {
					conn_tPostgresqlInput_12 = dataSources_tPostgresqlInput_12
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_12 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_12 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_12 = context.davidts_dev_Password;
					conn_tPostgresqlInput_12 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_12,
									dbUser_tPostgresqlInput_12,
									dbPwd_tPostgresqlInput_12);

				}
				conn_tPostgresqlInput_12.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12
						.createStatement();

				String dbquery_tPostgresqlInput_12 = "SELECT  id,name,street,city,zip,country_id,type,fax,street2,date,is_company,state_id,section_id FROM res_partner";

				globalMap.put("tPostgresqlInput_12_QUERY",
						dbquery_tPostgresqlInput_12);

				java.sql.ResultSet rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12
						.executeQuery(dbquery_tPostgresqlInput_12);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12
						.getColumnCount();

				String tmpContent_tPostgresqlInput_12 = null;
				int column_index_tPostgresqlInput_12 = 1;
				while (rs_tPostgresqlInput_12.next()) {
					nb_line_tPostgresqlInput_12++;

					column_index_tPostgresqlInput_12 = 1;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.id = 0;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row12.id = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_12 = 2;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.name = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.name = tmpContent_tPostgresqlInput_12;
						} else {
							row12.name = null;
						}

					}
					column_index_tPostgresqlInput_12 = 3;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.street = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.street = tmpContent_tPostgresqlInput_12;
						} else {
							row12.street = null;
						}

					}
					column_index_tPostgresqlInput_12 = 4;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.city = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.city = tmpContent_tPostgresqlInput_12;
						} else {
							row12.city = null;
						}

					}
					column_index_tPostgresqlInput_12 = 5;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.zip = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.zip = tmpContent_tPostgresqlInput_12;
						} else {
							row12.zip = null;
						}

					}
					column_index_tPostgresqlInput_12 = 6;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.country_id = null;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row12.country_id = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							row12.country_id = null;
						}

					}
					column_index_tPostgresqlInput_12 = 7;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.type = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.type = tmpContent_tPostgresqlInput_12;
						} else {
							row12.type = null;
						}

					}
					column_index_tPostgresqlInput_12 = 8;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.fax = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.fax = tmpContent_tPostgresqlInput_12;
						} else {
							row12.fax = null;
						}

					}
					column_index_tPostgresqlInput_12 = 9;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.street2 = null;
					} else {

						tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
								.getString(column_index_tPostgresqlInput_12);
						if (tmpContent_tPostgresqlInput_12 != null) {
							row12.street2 = tmpContent_tPostgresqlInput_12;
						} else {
							row12.street2 = null;
						}

					}
					column_index_tPostgresqlInput_12 = 10;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.date = null;
					} else {

						if (rs_tPostgresqlInput_12
								.getTimestamp(column_index_tPostgresqlInput_12) != null) {
							row12.date = new java.util.Date(
									rs_tPostgresqlInput_12.getTimestamp(
											column_index_tPostgresqlInput_12)
											.getTime());
						} else {
							row12.date = null;
						}

					}
					column_index_tPostgresqlInput_12 = 11;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.is_company = null;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row12.is_company = rs_tPostgresqlInput_12
									.getBoolean(column_index_tPostgresqlInput_12);
						} else {
							row12.is_company = null;
						}

					}
					column_index_tPostgresqlInput_12 = 12;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.state_id = null;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row12.state_id = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							row12.state_id = null;
						}

					}
					column_index_tPostgresqlInput_12 = 13;

					if (colQtyInRs_tPostgresqlInput_12 < column_index_tPostgresqlInput_12) {
						row12.section_id = null;
					} else {

						if (rs_tPostgresqlInput_12
								.getObject(column_index_tPostgresqlInput_12) != null) {
							row12.section_id = rs_tPostgresqlInput_12
									.getInt(column_index_tPostgresqlInput_12);
						} else {
							row12.section_id = null;
						}

					}

					/**
					 * [tPostgresqlInput_12 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_12 main ] start
					 */

					currentComponent = "tPostgresqlInput_12";

					tos_count_tPostgresqlInput_12++;

					/**
					 * [tPostgresqlInput_12 main ] stop
					 */

					/**
					 * [tAdvancedHash_row12 main ] start
					 */

					currentComponent = "tAdvancedHash_row12";

					row12Struct row12_HashRow = new row12Struct();

					row12_HashRow.id = row12.id;

					row12_HashRow.name = row12.name;

					row12_HashRow.street = row12.street;

					row12_HashRow.city = row12.city;

					row12_HashRow.zip = row12.zip;

					row12_HashRow.country_id = row12.country_id;

					row12_HashRow.type = row12.type;

					row12_HashRow.fax = row12.fax;

					row12_HashRow.street2 = row12.street2;

					row12_HashRow.date = row12.date;

					row12_HashRow.is_company = row12.is_company;

					row12_HashRow.state_id = row12.state_id;

					row12_HashRow.section_id = row12.section_id;

					tHash_Lookup_row12.put(row12_HashRow);

					tos_count_tAdvancedHash_row12++;

					/**
					 * [tAdvancedHash_row12 main ] stop
					 */

					/**
					 * [tPostgresqlInput_12 end ] start
					 */

					currentComponent = "tPostgresqlInput_12";

				}
				stmt_tPostgresqlInput_12.close();

				conn_tPostgresqlInput_12.commit();
				conn_tPostgresqlInput_12.close();

				globalMap.put("tPostgresqlInput_12_NB_LINE",
						nb_line_tPostgresqlInput_12);

				ok_Hash.put("tPostgresqlInput_12", true);
				end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String prefix;

		public String getPrefix() {
			return this.prefix;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.prefix = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.prefix, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("prefix=" + prefix);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tPostgresqlInput_15 -
				// inputs:(after_tPostgresqlInput_1) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_2 -
				// inputs:(row3,row6,row4,row7,row10,row11,row12,row14)
				// outputs:(purchase)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_15 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_15", false);
				start_Hash.put("tPostgresqlInput_15",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_15";

				int tos_count_tPostgresqlInput_15 = 0;

				int nb_line_tPostgresqlInput_15 = 0;
				java.sql.Connection conn_tPostgresqlInput_15 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_15) {
					conn_tPostgresqlInput_15 = dataSources_tPostgresqlInput_15
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_15 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_15 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_15 = context.davidts_dev_Password;
					conn_tPostgresqlInput_15 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_15,
									dbUser_tPostgresqlInput_15,
									dbPwd_tPostgresqlInput_15);

				}
				conn_tPostgresqlInput_15.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_15 = conn_tPostgresqlInput_15
						.createStatement();

				String dbquery_tPostgresqlInput_15 = "select prefix from ir_sequence where code ='stock.picking.out'";

				globalMap.put("tPostgresqlInput_15_QUERY",
						dbquery_tPostgresqlInput_15);

				java.sql.ResultSet rs_tPostgresqlInput_15 = stmt_tPostgresqlInput_15
						.executeQuery(dbquery_tPostgresqlInput_15);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_15 = rs_tPostgresqlInput_15
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_15 = rsmd_tPostgresqlInput_15
						.getColumnCount();

				String tmpContent_tPostgresqlInput_15 = null;
				int column_index_tPostgresqlInput_15 = 1;
				while (rs_tPostgresqlInput_15.next()) {
					nb_line_tPostgresqlInput_15++;

					column_index_tPostgresqlInput_15 = 1;

					if (colQtyInRs_tPostgresqlInput_15 < column_index_tPostgresqlInput_15) {
						row14.prefix = null;
					} else {

						tmpContent_tPostgresqlInput_15 = rs_tPostgresqlInput_15
								.getString(column_index_tPostgresqlInput_15);
						if (tmpContent_tPostgresqlInput_15 != null) {
							row14.prefix = tmpContent_tPostgresqlInput_15;
						} else {
							row14.prefix = null;
						}

					}

					/**
					 * [tPostgresqlInput_15 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_15 main ] start
					 */

					currentComponent = "tPostgresqlInput_15";

					tos_count_tPostgresqlInput_15++;

					/**
					 * [tPostgresqlInput_15 main ] stop
					 */

					/**
					 * [tAdvancedHash_row14 main ] start
					 */

					currentComponent = "tAdvancedHash_row14";

					row14Struct row14_HashRow = new row14Struct();

					row14_HashRow.prefix = row14.prefix;

					tHash_Lookup_row14.put(row14_HashRow);

					tos_count_tAdvancedHash_row14++;

					/**
					 * [tAdvancedHash_row14 main ] stop
					 */

					/**
					 * [tPostgresqlInput_15 end ] start
					 */

					currentComponent = "tPostgresqlInput_15";

				}
				stmt_tPostgresqlInput_15.close();

				conn_tPostgresqlInput_15.commit();
				conn_tPostgresqlInput_15.close();

				globalMap.put("tPostgresqlInput_15_NB_LINE",
						nb_line_tPostgresqlInput_15);

				ok_Hash.put("tPostgresqlInput_15", true);
				end_Hash.put("tPostgresqlInput_15", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String ean13;

		public String getEan13() {
			return this.ean13;
		}

		public Integer color;

		public Integer getColor() {
			return this.color;
		}

		public Object image;

		public Object getImage() {
			return this.image;
		}

		public Double price_extra;

		public Double getPrice_extra() {
			return this.price_extra;
		}

		public String default_code;

		public String getDefault_code() {
			return this.default_code;
		}

		public String name_template;

		public String getName_template() {
			return this.name_template;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public Object image_medium;

		public Object getImage_medium() {
			return this.image_medium;
		}

		public Object image_small;

		public Object getImage_small() {
			return this.image_small;
		}

		public int product_tmpl_id;

		public int getProduct_tmpl_id() {
			return this.product_tmpl_id;
		}

		public Double price_margin;

		public Double getPrice_margin() {
			return this.price_margin;
		}

		public Double cost_price_extra;

		public Double getCost_price_extra() {
			return this.cost_price_extra;
		}

		public Double additional_weight_net;

		public Double getAdditional_weight_net() {
			return this.additional_weight_net;
		}

		public String variants;

		public String getVariants() {
			return this.variants;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Double additional_volume;

		public Double getAdditional_volume() {
			return this.additional_volume;
		}

		public Double additional_weight;

		public Double getAdditional_weight() {
			return this.additional_weight;
		}

		public String description_sale;

		public String getDescription_sale() {
			return this.description_sale;
		}

		public Boolean track_outgoing;

		public Boolean getTrack_outgoing() {
			return this.track_outgoing;
		}

		public Boolean track_incoming;

		public Boolean getTrack_incoming() {
			return this.track_incoming;
		}

		public String valuation;

		public String getValuation() {
			return this.valuation;
		}

		public Boolean track_production;

		public Boolean getTrack_production() {
			return this.track_production;
		}

		public String old_code;

		public String getOld_code() {
			return this.old_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.id = this.id;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_date = this.write_date;
			other.write_uid = this.write_uid;
			other.ean13 = this.ean13;
			other.color = this.color;
			other.image = this.image;
			other.price_extra = this.price_extra;
			other.default_code = this.default_code;
			other.name_template = this.name_template;
			other.active = this.active;
			other.image_medium = this.image_medium;
			other.image_small = this.image_small;
			other.product_tmpl_id = this.product_tmpl_id;
			other.price_margin = this.price_margin;
			other.cost_price_extra = this.cost_price_extra;
			other.additional_weight_net = this.additional_weight_net;
			other.variants = this.variants;
			other.name = this.name;
			other.additional_volume = this.additional_volume;
			other.additional_weight = this.additional_weight;
			other.description_sale = this.description_sale;
			other.track_outgoing = this.track_outgoing;
			other.track_incoming = this.track_incoming;
			other.valuation = this.valuation;
			other.track_production = this.track_production;
			other.old_code = this.old_code;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.create_uid = readInteger(dis, ois);

				this.create_date = readDate(dis, ois);

				this.write_date = readDate(dis, ois);

				this.write_uid = readInteger(dis, ois);

				this.ean13 = readString(dis, ois);

				this.color = readInteger(dis, ois);

				this.image = (Object) ois.readObject();

				length = dis.readByte();
				if (length == -1) {
					this.price_extra = null;
				} else {
					this.price_extra = dis.readDouble();
				}

				this.default_code = readString(dis, ois);

				this.name_template = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.active = null;
				} else {
					this.active = dis.readBoolean();
				}

				this.image_medium = (Object) ois.readObject();

				this.image_small = (Object) ois.readObject();

				this.product_tmpl_id = dis.readInt();

				length = dis.readByte();
				if (length == -1) {
					this.price_margin = null;
				} else {
					this.price_margin = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.cost_price_extra = null;
				} else {
					this.cost_price_extra = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.additional_weight_net = null;
				} else {
					this.additional_weight_net = dis.readDouble();
				}

				this.variants = readString(dis, ois);

				this.name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.additional_volume = null;
				} else {
					this.additional_volume = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.additional_weight = null;
				} else {
					this.additional_weight = dis.readDouble();
				}

				this.description_sale = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.track_outgoing = null;
				} else {
					this.track_outgoing = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.track_incoming = null;
				} else {
					this.track_incoming = dis.readBoolean();
				}

				this.valuation = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.track_production = null;
				} else {
					this.track_production = dis.readBoolean();
				}

				this.old_code = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.create_uid, dos, oos);

				writeDate(this.create_date, dos, oos);

				writeDate(this.write_date, dos, oos);

				writeInteger(this.write_uid, dos, oos);

				writeString(this.ean13, dos, oos);

				writeInteger(this.color, dos, oos);

				oos.writeObject(this.image);

				if (this.price_extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_extra);
				}

				writeString(this.default_code, dos, oos);

				writeString(this.name_template, dos, oos);

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				oos.writeObject(this.image_medium);

				oos.writeObject(this.image_small);

				dos.writeInt(this.product_tmpl_id);

				if (this.price_margin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_margin);
				}

				if (this.cost_price_extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cost_price_extra);
				}

				if (this.additional_weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.additional_weight_net);
				}

				writeString(this.variants, dos, oos);

				writeString(this.name, dos, oos);

				if (this.additional_volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.additional_volume);
				}

				if (this.additional_weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.additional_weight);
				}

				writeString(this.description_sale, dos, oos);

				if (this.track_outgoing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.track_outgoing);
				}

				if (this.track_incoming == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.track_incoming);
				}

				writeString(this.valuation, dos, oos);

				if (this.track_production == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.track_production);
				}

				writeString(this.old_code, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",ean13=" + ean13);
			sb.append(",color=" + String.valueOf(color));
			sb.append(",image=" + String.valueOf(image));
			sb.append(",price_extra=" + String.valueOf(price_extra));
			sb.append(",default_code=" + default_code);
			sb.append(",name_template=" + name_template);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",image_medium=" + String.valueOf(image_medium));
			sb.append(",image_small=" + String.valueOf(image_small));
			sb.append(",product_tmpl_id=" + String.valueOf(product_tmpl_id));
			sb.append(",price_margin=" + String.valueOf(price_margin));
			sb.append(",cost_price_extra=" + String.valueOf(cost_price_extra));
			sb.append(",additional_weight_net="
					+ String.valueOf(additional_weight_net));
			sb.append(",variants=" + variants);
			sb.append(",name=" + name);
			sb.append(",additional_volume=" + String.valueOf(additional_volume));
			sb.append(",additional_weight=" + String.valueOf(additional_weight));
			sb.append(",description_sale=" + description_sale);
			sb.append(",track_outgoing=" + String.valueOf(track_outgoing));
			sb.append(",track_incoming=" + String.valueOf(track_incoming));
			sb.append(",valuation=" + valuation);
			sb.append(",track_production=" + String.valueOf(track_production));
			sb.append(",old_code=" + old_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tPostgresqlInput_7 -
				// inputs:(after_tPostgresqlInput_6) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_3 - inputs:(row2,row8,row9)
				// outputs:(purchase_line)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_7 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_7", false);
				start_Hash
						.put("tPostgresqlInput_7", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_7";

				int tos_count_tPostgresqlInput_7 = 0;

				int nb_line_tPostgresqlInput_7 = 0;
				java.sql.Connection conn_tPostgresqlInput_7 = null;
				conn_tPostgresqlInput_7 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_7) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_7 = dataSources_tPostgresqlInput_7
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_7);
				}

				java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7
						.createStatement();

				String dbquery_tPostgresqlInput_7 = "SELECT  id,create_uid,create_date,write_date,write_uid,ean13,color,image,  price_extra,default_code,name_template,active,image_medium,image_small,product_tmpl_id,  price_margin,cost_price_extra,additional_weight_net,variants,name,additional_volume,  additional_weight,description_sale,track_outgoing,track_incoming,valuation,track_production ,old_code FROM product_product ";

				globalMap.put("tPostgresqlInput_7_QUERY",
						dbquery_tPostgresqlInput_7);

				java.sql.ResultSet rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7
						.executeQuery(dbquery_tPostgresqlInput_7);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7
						.getColumnCount();

				String tmpContent_tPostgresqlInput_7 = null;
				int column_index_tPostgresqlInput_7 = 1;
				while (rs_tPostgresqlInput_7.next()) {
					nb_line_tPostgresqlInput_7++;

					column_index_tPostgresqlInput_7 = 1;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.id = 0;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.id = rs_tPostgresqlInput_7
									.getInt(column_index_tPostgresqlInput_7);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_7 = 2;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.create_uid = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.create_uid = rs_tPostgresqlInput_7
									.getInt(column_index_tPostgresqlInput_7);
						} else {
							row8.create_uid = null;
						}

					}
					column_index_tPostgresqlInput_7 = 3;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.create_date = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getTimestamp(column_index_tPostgresqlInput_7) != null) {
							row8.create_date = new java.util.Date(
									rs_tPostgresqlInput_7.getTimestamp(
											column_index_tPostgresqlInput_7)
											.getTime());
						} else {
							row8.create_date = null;
						}

					}
					column_index_tPostgresqlInput_7 = 4;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.write_date = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getTimestamp(column_index_tPostgresqlInput_7) != null) {
							row8.write_date = new java.util.Date(
									rs_tPostgresqlInput_7.getTimestamp(
											column_index_tPostgresqlInput_7)
											.getTime());
						} else {
							row8.write_date = null;
						}

					}
					column_index_tPostgresqlInput_7 = 5;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.write_uid = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.write_uid = rs_tPostgresqlInput_7
									.getInt(column_index_tPostgresqlInput_7);
						} else {
							row8.write_uid = null;
						}

					}
					column_index_tPostgresqlInput_7 = 6;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.ean13 = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.ean13 = tmpContent_tPostgresqlInput_7;
						} else {
							row8.ean13 = null;
						}

					}
					column_index_tPostgresqlInput_7 = 7;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.color = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.color = rs_tPostgresqlInput_7
									.getInt(column_index_tPostgresqlInput_7);
						} else {
							row8.color = null;
						}

					}
					column_index_tPostgresqlInput_7 = 8;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.image = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.image = rs_tPostgresqlInput_7
									.getObject(column_index_tPostgresqlInput_7);
						} else {
							row8.image = null;
						}

					}
					column_index_tPostgresqlInput_7 = 9;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.price_extra = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.price_extra = rs_tPostgresqlInput_7
									.getDouble(column_index_tPostgresqlInput_7);
						} else {
							row8.price_extra = null;
						}

					}
					column_index_tPostgresqlInput_7 = 10;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.default_code = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.default_code = tmpContent_tPostgresqlInput_7;
						} else {
							row8.default_code = null;
						}

					}
					column_index_tPostgresqlInput_7 = 11;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.name_template = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.name_template = tmpContent_tPostgresqlInput_7;
						} else {
							row8.name_template = null;
						}

					}
					column_index_tPostgresqlInput_7 = 12;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.active = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.active = rs_tPostgresqlInput_7
									.getBoolean(column_index_tPostgresqlInput_7);
						} else {
							row8.active = null;
						}

					}
					column_index_tPostgresqlInput_7 = 13;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.image_medium = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.image_medium = rs_tPostgresqlInput_7
									.getObject(column_index_tPostgresqlInput_7);
						} else {
							row8.image_medium = null;
						}

					}
					column_index_tPostgresqlInput_7 = 14;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.image_small = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.image_small = rs_tPostgresqlInput_7
									.getObject(column_index_tPostgresqlInput_7);
						} else {
							row8.image_small = null;
						}

					}
					column_index_tPostgresqlInput_7 = 15;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.product_tmpl_id = 0;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.product_tmpl_id = rs_tPostgresqlInput_7
									.getInt(column_index_tPostgresqlInput_7);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_7 = 16;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.price_margin = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.price_margin = rs_tPostgresqlInput_7
									.getDouble(column_index_tPostgresqlInput_7);
						} else {
							row8.price_margin = null;
						}

					}
					column_index_tPostgresqlInput_7 = 17;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.cost_price_extra = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.cost_price_extra = rs_tPostgresqlInput_7
									.getDouble(column_index_tPostgresqlInput_7);
						} else {
							row8.cost_price_extra = null;
						}

					}
					column_index_tPostgresqlInput_7 = 18;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.additional_weight_net = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.additional_weight_net = rs_tPostgresqlInput_7
									.getDouble(column_index_tPostgresqlInput_7);
						} else {
							row8.additional_weight_net = null;
						}

					}
					column_index_tPostgresqlInput_7 = 19;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.variants = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.variants = tmpContent_tPostgresqlInput_7;
						} else {
							row8.variants = null;
						}

					}
					column_index_tPostgresqlInput_7 = 20;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.name = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.name = tmpContent_tPostgresqlInput_7;
						} else {
							row8.name = null;
						}

					}
					column_index_tPostgresqlInput_7 = 21;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.additional_volume = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.additional_volume = rs_tPostgresqlInput_7
									.getDouble(column_index_tPostgresqlInput_7);
						} else {
							row8.additional_volume = null;
						}

					}
					column_index_tPostgresqlInput_7 = 22;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.additional_weight = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.additional_weight = rs_tPostgresqlInput_7
									.getDouble(column_index_tPostgresqlInput_7);
						} else {
							row8.additional_weight = null;
						}

					}
					column_index_tPostgresqlInput_7 = 23;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.description_sale = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.description_sale = tmpContent_tPostgresqlInput_7;
						} else {
							row8.description_sale = null;
						}

					}
					column_index_tPostgresqlInput_7 = 24;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.track_outgoing = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.track_outgoing = rs_tPostgresqlInput_7
									.getBoolean(column_index_tPostgresqlInput_7);
						} else {
							row8.track_outgoing = null;
						}

					}
					column_index_tPostgresqlInput_7 = 25;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.track_incoming = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.track_incoming = rs_tPostgresqlInput_7
									.getBoolean(column_index_tPostgresqlInput_7);
						} else {
							row8.track_incoming = null;
						}

					}
					column_index_tPostgresqlInput_7 = 26;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.valuation = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.valuation = tmpContent_tPostgresqlInput_7;
						} else {
							row8.valuation = null;
						}

					}
					column_index_tPostgresqlInput_7 = 27;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.track_production = null;
					} else {

						if (rs_tPostgresqlInput_7
								.getObject(column_index_tPostgresqlInput_7) != null) {
							row8.track_production = rs_tPostgresqlInput_7
									.getBoolean(column_index_tPostgresqlInput_7);
						} else {
							row8.track_production = null;
						}

					}
					column_index_tPostgresqlInput_7 = 28;

					if (colQtyInRs_tPostgresqlInput_7 < column_index_tPostgresqlInput_7) {
						row8.old_code = null;
					} else {

						tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
								.getString(column_index_tPostgresqlInput_7);
						if (tmpContent_tPostgresqlInput_7 != null) {
							row8.old_code = tmpContent_tPostgresqlInput_7;
						} else {
							row8.old_code = null;
						}

					}

					/**
					 * [tPostgresqlInput_7 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_7 main ] start
					 */

					currentComponent = "tPostgresqlInput_7";

					tos_count_tPostgresqlInput_7++;

					/**
					 * [tPostgresqlInput_7 main ] stop
					 */

					/**
					 * [tAdvancedHash_row8 main ] start
					 */

					currentComponent = "tAdvancedHash_row8";

					row8Struct row8_HashRow = new row8Struct();

					row8_HashRow.id = row8.id;

					row8_HashRow.create_uid = row8.create_uid;

					row8_HashRow.create_date = row8.create_date;

					row8_HashRow.write_date = row8.write_date;

					row8_HashRow.write_uid = row8.write_uid;

					row8_HashRow.ean13 = row8.ean13;

					row8_HashRow.color = row8.color;

					row8_HashRow.image = row8.image;

					row8_HashRow.price_extra = row8.price_extra;

					row8_HashRow.default_code = row8.default_code;

					row8_HashRow.name_template = row8.name_template;

					row8_HashRow.active = row8.active;

					row8_HashRow.image_medium = row8.image_medium;

					row8_HashRow.image_small = row8.image_small;

					row8_HashRow.product_tmpl_id = row8.product_tmpl_id;

					row8_HashRow.price_margin = row8.price_margin;

					row8_HashRow.cost_price_extra = row8.cost_price_extra;

					row8_HashRow.additional_weight_net = row8.additional_weight_net;

					row8_HashRow.variants = row8.variants;

					row8_HashRow.name = row8.name;

					row8_HashRow.additional_volume = row8.additional_volume;

					row8_HashRow.additional_weight = row8.additional_weight;

					row8_HashRow.description_sale = row8.description_sale;

					row8_HashRow.track_outgoing = row8.track_outgoing;

					row8_HashRow.track_incoming = row8.track_incoming;

					row8_HashRow.valuation = row8.valuation;

					row8_HashRow.track_production = row8.track_production;

					row8_HashRow.old_code = row8.old_code;

					tHash_Lookup_row8.put(row8_HashRow);

					tos_count_tAdvancedHash_row8++;

					/**
					 * [tAdvancedHash_row8 main ] stop
					 */

					/**
					 * [tPostgresqlInput_7 end ] start
					 */

					currentComponent = "tPostgresqlInput_7";

				}
				stmt_tPostgresqlInput_7.close();

				globalMap.put("tPostgresqlInput_7_NB_LINE",
						nb_line_tPostgresqlInput_7);

				ok_Hash.put("tPostgresqlInput_7", true);
				end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.id = this.id;
			other.type = this.type;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.type = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.type, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash
						.put("tAdvancedHash_row9", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row9";

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tPostgresqlInput_8 -
				// inputs:(after_tPostgresqlInput_6) outputs:(row9,row9) |
				// target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_3 - inputs:(row2,row8,row9)
				// outputs:(purchase_line)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct> getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_8", false);
				start_Hash
						.put("tPostgresqlInput_8", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_8";

				int tos_count_tPostgresqlInput_8 = 0;

				int nb_line_tPostgresqlInput_8 = 0;
				java.sql.Connection conn_tPostgresqlInput_8 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_8) {
					conn_tPostgresqlInput_8 = dataSources_tPostgresqlInput_8
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_8 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_8 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_8 = context.davidts_dev_Password;
					conn_tPostgresqlInput_8 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_8,
									dbUser_tPostgresqlInput_8,
									dbPwd_tPostgresqlInput_8);

				}
				conn_tPostgresqlInput_8.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8
						.createStatement();

				String dbquery_tPostgresqlInput_8 = "SELECT  id,type FROM product_template  where type='product'";

				globalMap.put("tPostgresqlInput_8_QUERY",
						dbquery_tPostgresqlInput_8);

				java.sql.ResultSet rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8
						.executeQuery(dbquery_tPostgresqlInput_8);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8
						.getColumnCount();

				String tmpContent_tPostgresqlInput_8 = null;
				int column_index_tPostgresqlInput_8 = 1;
				while (rs_tPostgresqlInput_8.next()) {
					nb_line_tPostgresqlInput_8++;

					column_index_tPostgresqlInput_8 = 1;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row9.id = 0;
					} else {

						if (rs_tPostgresqlInput_8
								.getObject(column_index_tPostgresqlInput_8) != null) {
							row9.id = rs_tPostgresqlInput_8
									.getInt(column_index_tPostgresqlInput_8);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_8 = 2;

					if (colQtyInRs_tPostgresqlInput_8 < column_index_tPostgresqlInput_8) {
						row9.type = null;
					} else {

						tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
								.getString(column_index_tPostgresqlInput_8);
						if (tmpContent_tPostgresqlInput_8 != null) {
							row9.type = tmpContent_tPostgresqlInput_8;
						} else {
							row9.type = null;
						}

					}

					/**
					 * [tPostgresqlInput_8 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_8 main ] start
					 */

					currentComponent = "tPostgresqlInput_8";

					tos_count_tPostgresqlInput_8++;

					/**
					 * [tPostgresqlInput_8 main ] stop
					 */

					/**
					 * [tAdvancedHash_row9 main ] start
					 */

					currentComponent = "tAdvancedHash_row9";

					row9Struct row9_HashRow = new row9Struct();

					row9_HashRow.id = row9.id;

					row9_HashRow.type = row9.type;

					tHash_Lookup_row9.put(row9_HashRow);

					tos_count_tAdvancedHash_row9++;

					/**
					 * [tAdvancedHash_row9 main ] stop
					 */

					/**
					 * [tPostgresqlInput_8 end ] start
					 */

					currentComponent = "tPostgresqlInput_8";

				}
				stmt_tPostgresqlInput_8.close();

				conn_tPostgresqlInput_8.commit();
				conn_tPostgresqlInput_8.close();

				globalMap.put("tPostgresqlInput_8_NB_LINE",
						nb_line_tPostgresqlInput_8);

				ok_Hash.put("tPostgresqlInput_8", true);
				end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}

	public static class purchaseStruct implements
			routines.system.IPersistableRow<purchaseStruct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public String E;

		public String getE() {
			return this.E;
		}

		public String expediteur;

		public String getExpediteur() {
			return this.expediteur;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String ref_client;

		public String getRef_client() {
			return this.ref_client;
		}

		public java.util.Date ex_work;

		public java.util.Date getEx_work() {
			return this.ex_work;
		}

		public java.util.Date ex_work2;

		public java.util.Date getEx_work2() {
			return this.ex_work2;
		}

		public java.util.Date requested_date;

		public java.util.Date getRequested_date() {
			return this.requested_date;
		}

		public String newColumn28;

		public String getNewColumn28() {
			return this.newColumn28;
		}

		public String partner;

		public String getPartner() {
			return this.partner;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String street2;

		public String getStreet2() {
			return this.street2;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String zip2;

		public String getZip2() {
			return this.zip2;
		}

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String newColumn1;

		public String getNewColumn1() {
			return this.newColumn1;
		}

		public String newColumn2;

		public String getNewColumn2() {
			return this.newColumn2;
		}

		public String newColumn3;

		public String getNewColumn3() {
			return this.newColumn3;
		}

		public String newColumn4;

		public String getNewColumn4() {
			return this.newColumn4;
		}

		public String name2;

		public String getName2() {
			return this.name2;
		}

		public String street_2;

		public String getStreet_2() {
			return this.street_2;
		}

		public String street2_2;

		public String getStreet2_2() {
			return this.street2_2;
		}

		public String zip_2;

		public String getZip_2() {
			return this.zip_2;
		}

		public String zip2_2;

		public String getZip2_2() {
			return this.zip2_2;
		}

		public String newColumn7;

		public String getNewColumn7() {
			return this.newColumn7;
		}

		public String city2;

		public String getCity2() {
			return this.city2;
		}

		public String country_code2;

		public String getCountry_code2() {
			return this.country_code2;
		}

		public String newColumn10;

		public String getNewColumn10() {
			return this.newColumn10;
		}

		public String newColumn11;

		public String getNewColumn11() {
			return this.newColumn11;
		}

		public String newColumn12;

		public String getNewColumn12() {
			return this.newColumn12;
		}

		public String newColumn13;

		public String getNewColumn13() {
			return this.newColumn13;
		}

		public String newColumn14;

		public String getNewColumn14() {
			return this.newColumn14;
		}

		public String newColumn15;

		public String getNewColumn15() {
			return this.newColumn15;
		}

		public String newColumn16;

		public String getNewColumn16() {
			return this.newColumn16;
		}

		public String newColumn17;

		public String getNewColumn17() {
			return this.newColumn17;
		}

		public String newColumn18;

		public String getNewColumn18() {
			return this.newColumn18;
		}

		public String newColumn19;

		public String getNewColumn19() {
			return this.newColumn19;
		}

		public Integer newColumn20;

		public Integer getNewColumn20() {
			return this.newColumn20;
		}

		public String newColumn21;

		public String getNewColumn21() {
			return this.newColumn21;
		}

		public String newColumn22;

		public String getNewColumn22() {
			return this.newColumn22;
		}

		public String newColumn23;

		public String getNewColumn23() {
			return this.newColumn23;
		}

		public String newColumn24;

		public String getNewColumn24() {
			return this.newColumn24;
		}

		public String newColumn27;

		public String getNewColumn27() {
			return this.newColumn27;
		}

		public String newColumn25;

		public String getNewColumn25() {
			return this.newColumn25;
		}

		public String newColumn26;

		public String getNewColumn26() {
			return this.newColumn26;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.E = readString(dis);

					this.expediteur = readString(dis);

					this.name = readString(dis);

					this.origin = readString(dis);

					this.ref_client = readString(dis);

					this.ex_work = readDate(dis);

					this.ex_work2 = readDate(dis);

					this.requested_date = readDate(dis);

					this.newColumn28 = readString(dis);

					this.partner = readString(dis);

					this.street = readString(dis);

					this.street2 = readString(dis);

					this.zip = readString(dis);

					this.zip2 = readString(dis);

					this.newColumn = readString(dis);

					this.city = readString(dis);

					this.country_code = readString(dis);

					this.newColumn1 = readString(dis);

					this.newColumn2 = readString(dis);

					this.newColumn3 = readString(dis);

					this.newColumn4 = readString(dis);

					this.name2 = readString(dis);

					this.street_2 = readString(dis);

					this.street2_2 = readString(dis);

					this.zip_2 = readString(dis);

					this.zip2_2 = readString(dis);

					this.newColumn7 = readString(dis);

					this.city2 = readString(dis);

					this.country_code2 = readString(dis);

					this.newColumn10 = readString(dis);

					this.newColumn11 = readString(dis);

					this.newColumn12 = readString(dis);

					this.newColumn13 = readString(dis);

					this.newColumn14 = readString(dis);

					this.newColumn15 = readString(dis);

					this.newColumn16 = readString(dis);

					this.newColumn17 = readString(dis);

					this.newColumn18 = readString(dis);

					this.newColumn19 = readString(dis);

					this.newColumn20 = readInteger(dis);

					this.newColumn21 = readString(dis);

					this.newColumn22 = readString(dis);

					this.newColumn23 = readString(dis);

					this.newColumn24 = readString(dis);

					this.newColumn27 = readString(dis);

					this.newColumn25 = readString(dis);

					this.newColumn26 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.E, dos);

				// String

				writeString(this.expediteur, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.ref_client, dos);

				// java.util.Date

				writeDate(this.ex_work, dos);

				// java.util.Date

				writeDate(this.ex_work2, dos);

				// java.util.Date

				writeDate(this.requested_date, dos);

				// String

				writeString(this.newColumn28, dos);

				// String

				writeString(this.partner, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.street2, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.zip2, dos);

				// String

				writeString(this.newColumn, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.newColumn1, dos);

				// String

				writeString(this.newColumn2, dos);

				// String

				writeString(this.newColumn3, dos);

				// String

				writeString(this.newColumn4, dos);

				// String

				writeString(this.name2, dos);

				// String

				writeString(this.street_2, dos);

				// String

				writeString(this.street2_2, dos);

				// String

				writeString(this.zip_2, dos);

				// String

				writeString(this.zip2_2, dos);

				// String

				writeString(this.newColumn7, dos);

				// String

				writeString(this.city2, dos);

				// String

				writeString(this.country_code2, dos);

				// String

				writeString(this.newColumn10, dos);

				// String

				writeString(this.newColumn11, dos);

				// String

				writeString(this.newColumn12, dos);

				// String

				writeString(this.newColumn13, dos);

				// String

				writeString(this.newColumn14, dos);

				// String

				writeString(this.newColumn15, dos);

				// String

				writeString(this.newColumn16, dos);

				// String

				writeString(this.newColumn17, dos);

				// String

				writeString(this.newColumn18, dos);

				// String

				writeString(this.newColumn19, dos);

				// Integer

				writeInteger(this.newColumn20, dos);

				// String

				writeString(this.newColumn21, dos);

				// String

				writeString(this.newColumn22, dos);

				// String

				writeString(this.newColumn23, dos);

				// String

				writeString(this.newColumn24, dos);

				// String

				writeString(this.newColumn27, dos);

				// String

				writeString(this.newColumn25, dos);

				// String

				writeString(this.newColumn26, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("E=" + E);
			sb.append(",expediteur=" + expediteur);
			sb.append(",name=" + name);
			sb.append(",origin=" + origin);
			sb.append(",ref_client=" + ref_client);
			sb.append(",ex_work=" + String.valueOf(ex_work));
			sb.append(",ex_work2=" + String.valueOf(ex_work2));
			sb.append(",requested_date=" + String.valueOf(requested_date));
			sb.append(",newColumn28=" + newColumn28);
			sb.append(",partner=" + partner);
			sb.append(",street=" + street);
			sb.append(",street2=" + street2);
			sb.append(",zip=" + zip);
			sb.append(",zip2=" + zip2);
			sb.append(",newColumn=" + newColumn);
			sb.append(",city=" + city);
			sb.append(",country_code=" + country_code);
			sb.append(",newColumn1=" + newColumn1);
			sb.append(",newColumn2=" + newColumn2);
			sb.append(",newColumn3=" + newColumn3);
			sb.append(",newColumn4=" + newColumn4);
			sb.append(",name2=" + name2);
			sb.append(",street_2=" + street_2);
			sb.append(",street2_2=" + street2_2);
			sb.append(",zip_2=" + zip_2);
			sb.append(",zip2_2=" + zip2_2);
			sb.append(",newColumn7=" + newColumn7);
			sb.append(",city2=" + city2);
			sb.append(",country_code2=" + country_code2);
			sb.append(",newColumn10=" + newColumn10);
			sb.append(",newColumn11=" + newColumn11);
			sb.append(",newColumn12=" + newColumn12);
			sb.append(",newColumn13=" + newColumn13);
			sb.append(",newColumn14=" + newColumn14);
			sb.append(",newColumn15=" + newColumn15);
			sb.append(",newColumn16=" + newColumn16);
			sb.append(",newColumn17=" + newColumn17);
			sb.append(",newColumn18=" + newColumn18);
			sb.append(",newColumn19=" + newColumn19);
			sb.append(",newColumn20=" + String.valueOf(newColumn20));
			sb.append(",newColumn21=" + newColumn21);
			sb.append(",newColumn22=" + newColumn22);
			sb.append(",newColumn23=" + newColumn23);
			sb.append(",newColumn24=" + newColumn24);
			sb.append(",newColumn27=" + newColumn27);
			sb.append(",newColumn25=" + newColumn25);
			sb.append(",newColumn26=" + newColumn26);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(purchaseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_sale_openerpwms = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public java.util.Date date_done;

		public java.util.Date getDate_done() {
			return this.date_done;
		}

		public java.util.Date min_date;

		public java.util.Date getMin_date() {
			return this.min_date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public Integer stock_journal_id;

		public Integer getStock_journal_id() {
			return this.stock_journal_id;
		}

		public Integer backorder_id;

		public Integer getBackorder_id() {
			return this.backorder_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer location_id;

		public Integer getLocation_id() {
			return this.location_id;
		}

		public String move_type;

		public String getMove_type() {
			return this.move_type;
		}

		public Integer company_id;

		public Integer getCompany_id() {
			return this.company_id;
		}

		public String invoice_state;

		public String getInvoice_state() {
			return this.invoice_state;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer location_dest_id;

		public Integer getLocation_dest_id() {
			return this.location_dest_id;
		}

		public java.util.Date max_date;

		public java.util.Date getMax_date() {
			return this.max_date;
		}

		public Boolean auto_picking;

		public Boolean getAuto_picking() {
			return this.auto_picking;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer purchase_id;

		public Integer getPurchase_id() {
			return this.purchase_id;
		}

		public Integer sale_id;

		public Integer getSale_id() {
			return this.sale_id;
		}

		public String carrier_tracking_ref;

		public String getCarrier_tracking_ref() {
			return this.carrier_tracking_ref;
		}

		public Integer number_of_packages;

		public Integer getNumber_of_packages() {
			return this.number_of_packages;
		}

		public Integer carrier_id;

		public Integer getCarrier_id() {
			return this.carrier_id;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public Integer weight_uom_id;

		public Integer getWeight_uom_id() {
			return this.weight_uom_id;
		}

		public Double weight_net;

		public Double getWeight_net() {
			return this.weight_net;
		}

		public Double volume;

		public Double getVolume() {
			return this.volume;
		}

		public String warning;

		public String getWarning() {
			return this.warning;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_sale_openerpwms.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_sale_openerpwms.length == 0) {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_sale_openerpwms = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_sale_openerpwms, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_sale_openerpwms) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.origin = readString(dis);

					this.date_done = readDate(dis);

					this.min_date = readDate(dis);

					this.date = readDate(dis);

					this.partner_id = readInteger(dis);

					this.stock_journal_id = readInteger(dis);

					this.backorder_id = readInteger(dis);

					this.name = readString(dis);

					this.location_id = readInteger(dis);

					this.move_type = readString(dis);

					this.company_id = readInteger(dis);

					this.invoice_state = readString(dis);

					this.note = readString(dis);

					this.state = readString(dis);

					this.location_dest_id = readInteger(dis);

					this.max_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auto_picking = null;
					} else {
						this.auto_picking = dis.readBoolean();
					}

					this.type = readString(dis);

					this.purchase_id = readInteger(dis);

					this.sale_id = readInteger(dis);

					this.carrier_tracking_ref = readString(dis);

					this.number_of_packages = readInteger(dis);

					this.carrier_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.weight_uom_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight_net = null;
					} else {
						this.weight_net = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.volume = null;
					} else {
						this.volume = dis.readDouble();
					}

					this.warning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// String

				writeString(this.origin, dos);

				// java.util.Date

				writeDate(this.date_done, dos);

				// java.util.Date

				writeDate(this.min_date, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.partner_id, dos);

				// Integer

				writeInteger(this.stock_journal_id, dos);

				// Integer

				writeInteger(this.backorder_id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.location_id, dos);

				// String

				writeString(this.move_type, dos);

				// Integer

				writeInteger(this.company_id, dos);

				// String

				writeString(this.invoice_state, dos);

				// String

				writeString(this.note, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.location_dest_id, dos);

				// java.util.Date

				writeDate(this.max_date, dos);

				// Boolean

				if (this.auto_picking == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auto_picking);
				}

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.purchase_id, dos);

				// Integer

				writeInteger(this.sale_id, dos);

				// String

				writeString(this.carrier_tracking_ref, dos);

				// Integer

				writeInteger(this.number_of_packages, dos);

				// Integer

				writeInteger(this.carrier_id, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// Integer

				writeInteger(this.weight_uom_id, dos);

				// Double

				if (this.weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight_net);
				}

				// Double

				if (this.volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.volume);
				}

				// String

				writeString(this.warning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",date_done=" + String.valueOf(date_done));
			sb.append(",min_date=" + String.valueOf(min_date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",stock_journal_id=" + String.valueOf(stock_journal_id));
			sb.append(",backorder_id=" + String.valueOf(backorder_id));
			sb.append(",name=" + name);
			sb.append(",location_id=" + String.valueOf(location_id));
			sb.append(",move_type=" + move_type);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",invoice_state=" + invoice_state);
			sb.append(",note=" + note);
			sb.append(",state=" + state);
			sb.append(",location_dest_id=" + String.valueOf(location_dest_id));
			sb.append(",max_date=" + String.valueOf(max_date));
			sb.append(",auto_picking=" + String.valueOf(auto_picking));
			sb.append(",type=" + type);
			sb.append(",purchase_id=" + String.valueOf(purchase_id));
			sb.append(",sale_id=" + String.valueOf(sale_id));
			sb.append(",carrier_tracking_ref=" + carrier_tracking_ref);
			sb.append(",number_of_packages="
					+ String.valueOf(number_of_packages));
			sb.append(",carrier_id=" + String.valueOf(carrier_id));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",weight_uom_id=" + String.valueOf(weight_uom_id));
			sb.append(",weight_net=" + String.valueOf(weight_net));
			sb.append(",volume=" + String.valueOf(volume));
			sb.append(",warning=" + warning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tIterateToFlow_2_AIProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tIterateToFlow_2_AI_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				purchaseStruct purchase = new purchaseStruct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.Path_files + ("/") + "tmp.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;
				try {
					outtFileOutputDelimited_2 = new java.io.BufferedWriter(
							new java.io.OutputStreamWriter(
									new java.io.FileOutputStream(
											fileName_tFileOutputDelimited_2,
											true), "ISO-8859-15"));

					/**
					 * [tFileOutputDelimited_2 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
							.get("tHash_Lookup_row6"));

					row6Struct row6HashKey = new row6Struct();
					row6Struct row6Default = new row6Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
							.get("tHash_Lookup_row4"));

					row4Struct row4HashKey = new row4Struct();
					row4Struct row4Default = new row4Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
							.get("tHash_Lookup_row7"));

					row7Struct row7HashKey = new row7Struct();
					row7Struct row7Default = new row7Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
							.get("tHash_Lookup_row10"));

					row10Struct row10HashKey = new row10Struct();
					row10Struct row10Default = new row10Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) globalMap
							.get("tHash_Lookup_row11"));

					row11Struct row11HashKey = new row11Struct();
					row11Struct row11Default = new row11Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
							.get("tHash_Lookup_row12"));

					row12Struct row12HashKey = new row12Struct();
					row12Struct row12Default = new row12Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
							.get("tHash_Lookup_row14"));

					tHash_Lookup_row14.initGet();

					row14Struct row14HashKey = new row14Struct();
					row14Struct row14Default = new row14Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					purchaseStruct purchase_tmp = new purchaseStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tIterateToFlow_2_AI begin ] start
					 */

					ok_Hash.put("tIterateToFlow_2_AI", false);
					start_Hash.put("tIterateToFlow_2_AI",
							System.currentTimeMillis());
					currentComponent = "tIterateToFlow_2_AI";

					int tos_count_tIterateToFlow_2_AI = 0;

					int nb_line_tIterateToFlow_2_AI = 0;
					java.util.List<OnSubjobOkStructtIterateToFlow_2> list_tIterateToFlow_2_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_2>) globalMap
							.get("tIterateToFlow_2");
					if (list_tIterateToFlow_2_AI == null) {
						list_tIterateToFlow_2_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_2>();
					}
					for (OnSubjobOkStructtIterateToFlow_2 row_tIterateToFlow_2_AI : list_tIterateToFlow_2_AI) {

						row3.id = row_tIterateToFlow_2_AI.id;

						row3.create_uid = row_tIterateToFlow_2_AI.create_uid;

						row3.create_date = row_tIterateToFlow_2_AI.create_date;

						row3.write_date = row_tIterateToFlow_2_AI.write_date;

						row3.write_uid = row_tIterateToFlow_2_AI.write_uid;

						row3.origin = row_tIterateToFlow_2_AI.origin;

						row3.date_done = row_tIterateToFlow_2_AI.date_done;

						row3.min_date = row_tIterateToFlow_2_AI.min_date;

						row3.date = row_tIterateToFlow_2_AI.date;

						row3.partner_id = row_tIterateToFlow_2_AI.partner_id;

						row3.stock_journal_id = row_tIterateToFlow_2_AI.stock_journal_id;

						row3.backorder_id = row_tIterateToFlow_2_AI.backorder_id;

						row3.name = row_tIterateToFlow_2_AI.name;

						row3.location_id = row_tIterateToFlow_2_AI.location_id;

						row3.move_type = row_tIterateToFlow_2_AI.move_type;

						row3.company_id = row_tIterateToFlow_2_AI.company_id;

						row3.invoice_state = row_tIterateToFlow_2_AI.invoice_state;

						row3.note = row_tIterateToFlow_2_AI.note;

						row3.state = row_tIterateToFlow_2_AI.state;

						row3.location_dest_id = row_tIterateToFlow_2_AI.location_dest_id;

						row3.max_date = row_tIterateToFlow_2_AI.max_date;

						row3.auto_picking = row_tIterateToFlow_2_AI.auto_picking;

						row3.type = row_tIterateToFlow_2_AI.type;

						row3.purchase_id = row_tIterateToFlow_2_AI.purchase_id;

						row3.sale_id = row_tIterateToFlow_2_AI.sale_id;

						row3.carrier_tracking_ref = row_tIterateToFlow_2_AI.carrier_tracking_ref;

						row3.number_of_packages = row_tIterateToFlow_2_AI.number_of_packages;

						row3.carrier_id = row_tIterateToFlow_2_AI.carrier_id;

						row3.weight = row_tIterateToFlow_2_AI.weight;

						row3.weight_uom_id = row_tIterateToFlow_2_AI.weight_uom_id;

						row3.weight_net = row_tIterateToFlow_2_AI.weight_net;

						row3.volume = row_tIterateToFlow_2_AI.volume;

						row3.warning = row_tIterateToFlow_2_AI.warning;

						/**
						 * [tIterateToFlow_2_AI begin ] stop
						 */
						/**
						 * [tIterateToFlow_2_AI main ] start
						 */

						currentComponent = "tIterateToFlow_2_AI";

						tos_count_tIterateToFlow_2_AI++;

						/**
						 * [tIterateToFlow_2_AI main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row6HashKey.name = row3.origin;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.name = '"
							// + row6HashKey.name + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row4"
						// /////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row4__id = row6.partner_shipping_id;
							if (exprKeyValue_row4__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row4HashKey.id = (int) (Integer) exprKeyValue_row4__id;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.id = '"
							// + row4HashKey.id + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null
								&& tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row7"
						// /////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row7__id = row6.partner_invoice_id;
							if (exprKeyValue_row7__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row7HashKey.id = (int) (Integer) exprKeyValue_row7__id;
							}

							row7HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row7.lookup(row7HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.id = '"
							// + row7HashKey.id + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row10"
						// /////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row10__id = row4.country_id;
							if (exprKeyValue_row10__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row10HashKey.id = (int) (Integer) exprKeyValue_row10__id;
							}

							row10HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row10.lookup(row10HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.id = '"
							// + row10HashKey.id + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row11"
						// /////////////////////////////////////////////

						boolean forceLooprow11 = false;

						row11Struct row11ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row11__id = row7.country_id;
							if (exprKeyValue_row11__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row11HashKey.id = (int) (Integer) exprKeyValue_row11__id;
							}

							row11HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row11.lookup(row11HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.id = '"
							// + row11HashKey.id + "'");
						} // G 071

						row11Struct row11 = null;

						row11Struct fromLookup_row11 = null;
						row11 = row11Default;

						if (tHash_Lookup_row11 != null
								&& tHash_Lookup_row11.hasNext()) { // G 099

							fromLookup_row11 = tHash_Lookup_row11.next();

						} // G 099

						if (fromLookup_row11 != null) {
							row11 = fromLookup_row11;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row12"
						// /////////////////////////////////////////////

						boolean forceLooprow12 = false;

						row12Struct row12ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row12__id = row3.partner_id;
							if (exprKeyValue_row12__id == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row12HashKey.id = (int) (Integer) exprKeyValue_row12__id;
							}

							row12HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row12.lookup(row12HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row12 != null
								&& tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.id = '"
							// + row12HashKey.id + "'");
						} // G 071

						row12Struct row12 = null;

						row12Struct fromLookup_row12 = null;
						row12 = row12Default;

						if (tHash_Lookup_row12 != null
								&& tHash_Lookup_row12.hasNext()) { // G 099

							fromLookup_row12 = tHash_Lookup_row12.next();

						} // G 099

						if (fromLookup_row12 != null) {
							row12 = fromLookup_row12;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row14"
						// /////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							tHash_Lookup_row14.lookup(row14HashKey);

							if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

								forceLooprow14 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow14 = true;
						} // G 21

						row14Struct row14 = null;

						while ((tHash_Lookup_row14 != null && tHash_Lookup_row14
								.hasNext()) || forceLooprow14) { // G_TM_M_043

							// CALL close loop of lookup 'row14'

							row14Struct fromLookup_row14 = null;
							row14 = row14Default;

							if (!forceLooprow14) { // G 46

								fromLookup_row14 = tHash_Lookup_row14.next();

								if (fromLookup_row14 != null) {
									row14 = fromLookup_row14;
								}

							} // G 46

							forceLooprow14 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								purchase = null;

								// # Output table : 'purchase'
								purchase_tmp.E = "E";
								purchase_tmp.expediteur = "DAVIDTS";
								purchase_tmp.name = (row3.name != null ? row3.name
										.replace(row14.prefix, "") : "").trim();
								purchase_tmp.origin = (row3.origin != null ? row3.origin
										: "");
								purchase_tmp.ref_client = row6.client_order_ref;
								purchase_tmp.ex_work = row6.ex_work;
								purchase_tmp.ex_work2 = row6.ex_work;
								purchase_tmp.requested_date = row6.requested_date;
								purchase_tmp.newColumn28 = null;
								purchase_tmp.partner = row4.name;
								purchase_tmp.street = (row4.street != null ? row4.street
										: "").trim();
								purchase_tmp.street2 = (row4.street2 != null ? row4.street2
										: "").trim();
								purchase_tmp.zip = (row4.zip != null ? row4.zip
										: "").trim();
								purchase_tmp.zip2 = (row4.zip != null ? (row4.zip
										.substring(0, 2)) : "").trim();
								purchase_tmp.newColumn = null;
								purchase_tmp.city = (row4.city != null ? row4.city
										: "").trim();
								purchase_tmp.country_code = (row10.code != null ? row10.code
										: "").trim();
								purchase_tmp.newColumn1 = null;
								purchase_tmp.newColumn2 = null;
								purchase_tmp.newColumn3 = null;
								purchase_tmp.newColumn4 = null;
								purchase_tmp.name2 = row7.name;
								purchase_tmp.street_2 = (row7.street != null ? row7.street
										: "").trim();
								purchase_tmp.street2_2 = (row7.street2 != null ? row7.street2
										: "").trim();
								purchase_tmp.zip_2 = (row7.zip != null ? row7.zip
										: "").trim();
								purchase_tmp.zip2_2 = (row7.zip != null ? (row7.zip
										.substring(0, 2)) : "").trim();
								purchase_tmp.newColumn7 = null;
								purchase_tmp.city2 = (row7.city != null ? row7.city
										: "").trim();
								purchase_tmp.country_code2 = (row11.code != null ? row11.code
										: "").trim();
								purchase_tmp.newColumn10 = null;
								purchase_tmp.newColumn11 = null;
								purchase_tmp.newColumn12 = null;
								purchase_tmp.newColumn13 = null;
								purchase_tmp.newColumn14 = null;
								purchase_tmp.newColumn15 = null;
								purchase_tmp.newColumn16 = null;
								purchase_tmp.newColumn17 = null;
								purchase_tmp.newColumn18 = null;
								purchase_tmp.newColumn19 = null;
								purchase_tmp.newColumn20 = 0;
								purchase_tmp.newColumn21 = null;
								purchase_tmp.newColumn22 = null;
								purchase_tmp.newColumn23 = null;
								purchase_tmp.newColumn24 = null;
								purchase_tmp.newColumn27 = null;
								purchase_tmp.newColumn25 = " ";
								purchase_tmp.newColumn26 = null;
								purchase = purchase_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "purchase"
							if (purchase != null) {

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();

								if (purchase.E != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.E

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.expediteur != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.expediteur

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.name != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.name

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.origin != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.origin

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.ref_client != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.ref_client

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.ex_work != null) {

									sb_tFileOutputDelimited_2.append(

									FormatterUtils.format_Date(
											purchase.ex_work, "yyyyMMdd")

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.ex_work2 != null) {

									sb_tFileOutputDelimited_2.append(

									FormatterUtils.format_Date(
											purchase.ex_work2, "yyyyMMdd")

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.requested_date != null) {

									sb_tFileOutputDelimited_2.append(

									FormatterUtils
											.format_Date(
													purchase.requested_date,
													"yyyyMMdd")

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn28 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn28

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.partner != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.partner

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.street != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.street

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.street2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.street2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.zip != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.zip

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.zip2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.zip2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.city != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.city

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.country_code != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.country_code

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn1 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn1

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn3 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn3

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn4 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn4

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.name2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.name2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.street_2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.street_2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.street2_2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.street2_2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.zip_2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.zip_2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.zip2_2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.zip2_2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn7 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn7

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.city2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.city2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.country_code2 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.country_code2

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn10 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn10

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn11 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn11

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn12 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn12

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn13 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn13

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn14 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn14

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn15 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn15

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn16 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn16

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn17 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn17

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn18 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn18

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn19 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn19

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn20 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn20

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn21 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn21

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn22 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn22

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn23 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn23

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn24 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn24

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn27 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn27

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn25 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn25

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_tFileOutputDelimited_2);

								if (purchase.newColumn26 != null) {

									sb_tFileOutputDelimited_2.append(

									purchase.newColumn26

									);

								}

								sb_tFileOutputDelimited_2
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

								nb_line_tFileOutputDelimited_2++;

								outtFileOutputDelimited_2
										.write(sb_tFileOutputDelimited_2
												.toString());

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

							} // End of branch "purchase"

						} // close loop of lookup 'row14' // G_TM_M_043

						/**
						 * [tIterateToFlow_2_AI end ] start
						 */

						currentComponent = "tIterateToFlow_2_AI";

						nb_line_tIterateToFlow_2_AI++;
					}
					globalMap.put("tIterateToFlow_2_AI_NB_LINE",
							nb_line_tIterateToFlow_2_AI);

					ok_Hash.put("tIterateToFlow_2_AI", true);
					end_Hash.put("tIterateToFlow_2_AI",
							System.currentTimeMillis());

					/**
					 * [tIterateToFlow_2_AI end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					if (tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove("tHash_Lookup_row6");

					if (tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove("tHash_Lookup_row4");

					if (tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove("tHash_Lookup_row7");

					if (tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove("tHash_Lookup_row10");

					if (tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove("tHash_Lookup_row11");

					if (tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove("tHash_Lookup_row12");

					if (tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove("tHash_Lookup_row14");

					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

				} finally {
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);
				} // finally

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				tPostgresqlInput_6Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row10");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row11");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row12");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tIterateToFlow_2_AI"
			globalMap.remove("tIterateToFlow_2");

		}

		globalMap.put("tIterateToFlow_2_AI_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final sale_openerpwms sale_openerpwmsClass = new sale_openerpwms();

		int exitCode = sale_openerpwmsClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = sale_openerpwms.class
					.getClassLoader().getResourceAsStream(
							"talendopenerp/sale_openerpwms_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.davidts_dev_Database = (String) context
					.getProperty("davidts_dev_Database");
			context.davidts_dev_Login = (String) context
					.getProperty("davidts_dev_Login");
			context.davidts_dev_Password = (java.lang.String) context
					.getProperty("davidts_dev_Password");
			context.davidts_dev_Port = (String) context
					.getProperty("davidts_dev_Port");
			context.davidts_dev_Schema = (String) context
					.getProperty("davidts_dev_Schema");
			context.davidts_dev_Server = (String) context
					.getProperty("davidts_dev_Server");
			context.Path_files = (String) context.getProperty("Path_files");
			context.Path_Header = (String) context.getProperty("Path_Header");
			try {
				context.picking_id = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("picking_id"));
			} catch (NumberFormatException e) {
				context.picking_id = null;
			}
			context.Path_Header_sale = (String) context
					.getProperty("Path_Header_sale");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("davidts_dev_Database")) {
				context.davidts_dev_Database = (String) parentContextMap
						.get("davidts_dev_Database");
			}
			if (parentContextMap.containsKey("davidts_dev_Login")) {
				context.davidts_dev_Login = (String) parentContextMap
						.get("davidts_dev_Login");
			}
			if (parentContextMap.containsKey("davidts_dev_Password")) {
				context.davidts_dev_Password = (java.lang.String) parentContextMap
						.get("davidts_dev_Password");
			}
			if (parentContextMap.containsKey("davidts_dev_Port")) {
				context.davidts_dev_Port = (String) parentContextMap
						.get("davidts_dev_Port");
			}
			if (parentContextMap.containsKey("davidts_dev_Schema")) {
				context.davidts_dev_Schema = (String) parentContextMap
						.get("davidts_dev_Schema");
			}
			if (parentContextMap.containsKey("davidts_dev_Server")) {
				context.davidts_dev_Server = (String) parentContextMap
						.get("davidts_dev_Server");
			}
			if (parentContextMap.containsKey("Path_files")) {
				context.Path_files = (String) parentContextMap
						.get("Path_files");
			}
			if (parentContextMap.containsKey("Path_Header")) {
				context.Path_Header = (String) parentContextMap
						.get("Path_Header");
			}
			if (parentContextMap.containsKey("picking_id")) {
				context.picking_id = (Integer) parentContextMap
						.get("picking_id");
			}
			if (parentContextMap.containsKey("Path_Header_sale")) {
				context.Path_Header_sale = (String) parentContextMap
						.get("Path_Header_sale");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {

			e_tPostgresqlConnection_1.printStackTrace();
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : sale_openerpwms");
		}

		closeScpConnections();

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

		closeScpConnections();
	}

	private void closeScpConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tSCPConnection_1");
			if (null != obj_conn) {
				((ch.ethz.ssh2.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tSCPConnection_1",
				globalMap.get("conn_tSCPConnection_1"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 503068 characters generated by Talend Open Studio for Data Integration on the
 * 31 janvier 2014 14:30:07 CET
 ************************************************************************************************/
