// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package talendopenerp_213.wms_openerp_purchase_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: wms_openerp_purchase Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.1.r104014
 * @status 
 */
public class wms_openerp_purchase implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (davidts_dev_Database != null) {

				this.setProperty("davidts_dev_Database",
						davidts_dev_Database.toString());

			}

			if (davidts_dev_Login != null) {

				this.setProperty("davidts_dev_Login",
						davidts_dev_Login.toString());

			}

			if (davidts_dev_Password != null) {

				this.setProperty("davidts_dev_Password",
						davidts_dev_Password.toString());

			}

			if (davidts_dev_Port != null) {

				this.setProperty("davidts_dev_Port",
						davidts_dev_Port.toString());

			}

			if (davidts_dev_Schema != null) {

				this.setProperty("davidts_dev_Schema",
						davidts_dev_Schema.toString());

			}

			if (davidts_dev_Server != null) {

				this.setProperty("davidts_dev_Server",
						davidts_dev_Server.toString());

			}

			if (path_files_sale != null) {

				this.setProperty("path_files_sale", path_files_sale.toString());

			}

			if (path_wms_archive != null) {

				this.setProperty("path_wms_archive",
						path_wms_archive.toString());

			}

			if (Path_wms_files_sale != null) {

				this.setProperty("Path_wms_files_sale",
						Path_wms_files_sale.toString());

			}

			if (Path_wms_files_purchase != null) {

				this.setProperty("Path_wms_files_purchase",
						Path_wms_files_purchase.toString());

			}

		}

		public String davidts_dev_Database;

		public String getDavidts_dev_Database() {
			return this.davidts_dev_Database;
		}

		public String davidts_dev_Login;

		public String getDavidts_dev_Login() {
			return this.davidts_dev_Login;
		}

		public java.lang.String davidts_dev_Password;

		public java.lang.String getDavidts_dev_Password() {
			return this.davidts_dev_Password;
		}

		public String davidts_dev_Port;

		public String getDavidts_dev_Port() {
			return this.davidts_dev_Port;
		}

		public String davidts_dev_Schema;

		public String getDavidts_dev_Schema() {
			return this.davidts_dev_Schema;
		}

		public String davidts_dev_Server;

		public String getDavidts_dev_Server() {
			return this.davidts_dev_Server;
		}

		public String path_files_sale;

		public String getPath_files_sale() {
			return this.path_files_sale;
		}

		public String path_wms_archive;

		public String getPath_wms_archive() {
			return this.path_wms_archive;
		}

		public String Path_wms_files_sale;

		public String getPath_wms_files_sale() {
			return this.Path_wms_files_sale;
		}

		public String Path_wms_files_purchase;

		public String getPath_wms_files_purchase() {
			return this.Path_wms_files_purchase;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "wms_openerp_purchase";
	private final String projectName = "TALENDOPENERP_213";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					wms_openerp_purchase.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(wms_openerp_purchase.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPConnection_1", System.currentTimeMillis());

		status = "failure";

		tSCPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPFileList_1", System.currentTimeMillis());

		status = "failure";

		tSCPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPGet_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPGet_1", System.currentTimeMillis());

		status = "failure";

		tSCPFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_2", System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileCopy_1", System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileList_3", System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPPut_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPPut_1", System.currentTimeMillis());

		status = "failure";

		tFileList_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileDelete_1", System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPFileList_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPFileList_2", System.currentTimeMillis());

		status = "failure";

		tSCPFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPDelete_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPDelete_1", System.currentTimeMillis());

		status = "failure";

		tSCPFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSCPClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tSCPClose_1", System.currentTimeMillis());

		status = "failure";

		tSCPClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputMSDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputMSDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMemorizeRows_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMemorizeRows_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tReplicate_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_4", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_3", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSCPConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSCPFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSCPFileList_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSCPClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());
				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.davidts_dev_Server + ":"
						+ context.davidts_dev_Port + "/"
						+ context.davidts_dev_Database;

				String userName_tPostgresqlConnection_1 = context.davidts_dev_Login;
				String password_tPostgresqlConnection_1 = context.davidts_dev_Password;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				if ((null == globalMap.get(KEY_DB_DATASOURCES))
						|| "".equals("")) {
					java.lang.Class.forName("org.postgresql.Driver");

					conn_tPostgresqlConnection_1 = java.sql.DriverManager
							.getConnection(url_tPostgresqlConnection_1,
									userName_tPostgresqlConnection_1,
									password_tPostgresqlConnection_1);
					globalMap.put("conn_tPostgresqlConnection_1",
							conn_tPostgresqlConnection_1);
				}
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(true);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.davidts_dev_Schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlInput_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String davits_host;

		public String getDavits_host() {
			return this.davits_host;
		}

		public String davits_user;

		public String getDavits_user() {
			return this.davits_user;
		}

		public String davits_password;

		public String getDavits_password() {
			return this.davits_password;
		}

		public String davits_port;

		public String getDavits_port() {
			return this.davits_port;
		}

		public String davits_path_openerp_wms;

		public String getDavits_path_openerp_wms() {
			return this.davits_path_openerp_wms;
		}

		public String davits_wmsfiles_after_treated;

		public String getDavits_wmsfiles_after_treated() {
			return this.davits_wmsfiles_after_treated;
		}

		public String davits_path_wms_openerp_purchase;

		public String getDavits_path_wms_openerp_purchase() {
			return this.davits_path_wms_openerp_purchase;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.davits_host = readString(dis);

					this.davits_user = readString(dis);

					this.davits_password = readString(dis);

					this.davits_port = readString(dis);

					this.davits_path_openerp_wms = readString(dis);

					this.davits_wmsfiles_after_treated = readString(dis);

					this.davits_path_wms_openerp_purchase = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.davits_host, dos);

				// String

				writeString(this.davits_user, dos);

				// String

				writeString(this.davits_password, dos);

				// String

				writeString(this.davits_port, dos);

				// String

				writeString(this.davits_path_openerp_wms, dos);

				// String

				writeString(this.davits_wmsfiles_after_treated, dos);

				// String

				writeString(this.davits_path_wms_openerp_purchase, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("davits_host=" + davits_host);
			sb.append(",davits_user=" + davits_user);
			sb.append(",davits_password=" + davits_password);
			sb.append(",davits_port=" + davits_port);
			sb.append(",davits_path_openerp_wms=" + davits_path_openerp_wms);
			sb.append(",davits_wmsfiles_after_treated="
					+ davits_wmsfiles_after_treated);
			sb.append(",davits_path_wms_openerp_purchase="
					+ davits_path_wms_openerp_purchase);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_5) {
					conn_tPostgresqlInput_5 = dataSources_tPostgresqlInput_5
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_5 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_5 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_5 = context.davidts_dev_Password;
					conn_tPostgresqlInput_5 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_5,
									dbUser_tPostgresqlInput_5,
									dbPwd_tPostgresqlInput_5);

				}
				conn_tPostgresqlInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "select davits_host, davits_user, davits_password, davits_port, davits_path_openerp_wms, davits_wmsfiles_after_treated, davits_path_wms_openerp_purchase  from   (select 1 as val,value as davits_host from ir_config_parameter where key='davits.host') AS req1   inner join  (select 1 as val,value as davits_user from ir_config_parameter where key='davits.user') AS req2 ON req1.val=req2.val  inner join   (select 1 as val,value as davits_password from ir_config_parameter where key='davits.password') AS req3 ON req2.val=req3.val  inner join  (select 1 as val,value as davits_port from ir_config_parameter where key='davits.port') AS req4 ON req3.val=req4.val  inner join  (select 1 as val,value as davits_path_openerp_wms from ir_config_parameter where key='davits.path_openerp_wms') AS req5   ON req4.val=req5.val  inner join   (select 1 as val,value as davits_wmsfiles_after_treated from ir_config_parameter where key='davits.wmsfiles_after_treated') AS req6 ON req5.val=req6.val   inner join   (select 1 as val,value as davits_path_wms_openerp_purchase from ir_config_parameter where key='davits.path_wms_openerp_purchase') AS req7 ON req6.val=req7.val ";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);

				java.sql.ResultSet rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
						.executeQuery(dbquery_tPostgresqlInput_5);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
						.getColumnCount();

				String tmpContent_tPostgresqlInput_5 = null;
				int column_index_tPostgresqlInput_5 = 1;
				while (rs_tPostgresqlInput_5.next()) {
					nb_line_tPostgresqlInput_5++;

					column_index_tPostgresqlInput_5 = 1;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_host = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_host = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_host = null;
						}

					}
					column_index_tPostgresqlInput_5 = 2;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_user = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_user = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_user = null;
						}

					}
					column_index_tPostgresqlInput_5 = 3;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_password = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_password = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_password = null;
						}

					}
					column_index_tPostgresqlInput_5 = 4;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_port = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_port = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_port = null;
						}

					}
					column_index_tPostgresqlInput_5 = 5;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_path_openerp_wms = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_path_openerp_wms = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_path_openerp_wms = null;
						}

					}
					column_index_tPostgresqlInput_5 = 6;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_wmsfiles_after_treated = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_wmsfiles_after_treated = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_wmsfiles_after_treated = null;
						}

					}
					column_index_tPostgresqlInput_5 = 7;

					if (colQtyInRs_tPostgresqlInput_5 < column_index_tPostgresqlInput_5) {
						row6.davits_path_wms_openerp_purchase = null;
					} else {

						tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
								.getString(column_index_tPostgresqlInput_5);
						if (tmpContent_tPostgresqlInput_5 != null) {
							row6.davits_path_wms_openerp_purchase = tmpContent_tPostgresqlInput_5;
						} else {
							row6.davits_path_wms_openerp_purchase = null;
						}

					}

					/**
					 * [tPostgresqlInput_5 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_5 main ] start
					 */

					currentComponent = "tPostgresqlInput_5";

					tos_count_tPostgresqlInput_5++;

					/**
					 * [tPostgresqlInput_5 main ] stop
					 */

					/**
					 * [tFlowToIterate_1 main ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("davits_host", row6.davits_host);
					nb_line_tFlowToIterate_1++;
					globalMap.put("davits_user", row6.davits_user);
					nb_line_tFlowToIterate_1++;
					globalMap.put("davits_password", row6.davits_password);
					nb_line_tFlowToIterate_1++;
					globalMap.put("davits_port", row6.davits_port);
					nb_line_tFlowToIterate_1++;
					globalMap.put("davits_path_openerp_wms",
							row6.davits_path_openerp_wms);
					nb_line_tFlowToIterate_1++;
					globalMap.put("davits_wmsfiles_after_treated",
							row6.davits_wmsfiles_after_treated);
					nb_line_tFlowToIterate_1++;
					globalMap.put("davits_path_wms_openerp_purchase",
							row6.davits_path_wms_openerp_purchase);
					nb_line_tFlowToIterate_1++;
					counter_tFlowToIterate_1++;
					globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
							counter_tFlowToIterate_1);

					tos_count_tFlowToIterate_1++;

					/**
					 * [tFlowToIterate_1 main ] stop
					 */

					/**
					 * [tPostgresqlInput_5 end ] start
					 */

					currentComponent = "tPostgresqlInput_5";

				}
				stmt_tPostgresqlInput_5.close();

				conn_tPostgresqlInput_5.commit();
				conn_tPostgresqlInput_5.close();

				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_5:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tSCPConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public void tSCPConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSCPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSCPConnection_1 begin ] start
				 */

				ok_Hash.put("tSCPConnection_1", false);
				start_Hash.put("tSCPConnection_1", System.currentTimeMillis());
				currentComponent = "tSCPConnection_1";

				int tos_count_tSCPConnection_1 = 0;

				String hostname_tSCPConnection_1 = ((String) globalMap
						.get("davits_host"));
				String username_tSCPConnection_1 = ((String) globalMap
						.get("davits_user"));

				/* Create a connection instance */
				ch.ethz.ssh2.Connection conn_tSCPConnection_1 = new ch.ethz.ssh2.Connection(
						hostname_tSCPConnection_1,
						Integer.parseInt((String) globalMap.get("davits_port")));
				/* Now connect */
				conn_tSCPConnection_1.connect();
				boolean isAuthenticated_tSCPConnection_1 = conn_tSCPConnection_1
						.authenticateWithPassword(username_tSCPConnection_1,
								((String) globalMap.get("davits_password")));
				if (isAuthenticated_tSCPConnection_1 == false)
					throw new RuntimeException("Authentication failed.");

				globalMap.put("conn_tSCPConnection_1", conn_tSCPConnection_1);

				/**
				 * [tSCPConnection_1 begin ] stop
				 */
				/**
				 * [tSCPConnection_1 main ] start
				 */

				currentComponent = "tSCPConnection_1";

				tos_count_tSCPConnection_1++;

				/**
				 * [tSCPConnection_1 main ] stop
				 */
				/**
				 * [tSCPConnection_1 end ] start
				 */

				currentComponent = "tSCPConnection_1";

				ok_Hash.put("tSCPConnection_1", true);
				end_Hash.put("tSCPConnection_1", System.currentTimeMillis());

				/**
				 * [tSCPConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSCPConnection_1:OnSubjobOk1",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tSCPFileList_1Process(globalMap);
			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tSCPConnection_1:OnSubjobOk2",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tSCPConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tSCPFileList_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSCPFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSCPFileList_1 begin ] start
				 */

				int NB_ITERATE_tSCPGet_1 = 0; // for statistics

				ok_Hash.put("tSCPFileList_1", false);
				start_Hash.put("tSCPFileList_1", System.currentTimeMillis());
				currentComponent = "tSCPFileList_1";

				int tos_count_tSCPFileList_1 = 0;

				/* Create a connection instance */

				ch.ethz.ssh2.Connection conn_tSCPFileList_1 = (ch.ethz.ssh2.Connection) globalMap
						.get("conn_tSCPConnection_1");

				// initial the command
				StringBuilder command_tSCPFileList_1 = new StringBuilder();
				if (command_tSCPFileList_1.length() > 0) {
					command_tSCPFileList_1.append(":");
				}
				command_tSCPFileList_1.append("ls -1 ".concat(
						(String) globalMap
								.get("davits_path_wms_openerp_purchase"))
						.concat("/*"));

				/* Create a session */
				ch.ethz.ssh2.Session sess_tSCPFileList_1 = conn_tSCPFileList_1
						.openSession();

				// execute the command
				sess_tSCPFileList_1.execCommand((command_tSCPFileList_1)
						.toString());

				int nb_line_tSCPFileList_1 = 0;

				// get the return info
				java.io.InputStream stdout_tSCPFileList_1 = sess_tSCPFileList_1
						.getStdout();
				java.io.BufferedReader brout_tSCPFileList_1 = new java.io.BufferedReader(
						new java.io.InputStreamReader(stdout_tSCPFileList_1));
				String line_out_tSCPFileList_1 = "";
				StringBuilder stringStdout_tSCPFileList_1 = new StringBuilder();
				while ((line_out_tSCPFileList_1 = brout_tSCPFileList_1
						.readLine()) != null) {

					/**
					 * [tSCPFileList_1 begin ] stop
					 */
					/**
					 * [tSCPFileList_1 main ] start
					 */

					currentComponent = "tSCPFileList_1";

					nb_line_tSCPFileList_1++;

					stringStdout_tSCPFileList_1.append(line_out_tSCPFileList_1
							+ "\n");
					globalMap.put("tSCPFileList_1_NB_LINE",
							nb_line_tSCPFileList_1);
					globalMap.put("tSCPFileList_1_CURRENT_LINE",
							line_out_tSCPFileList_1);

					tos_count_tSCPFileList_1++;

					/**
					 * [tSCPFileList_1 main ] stop
					 */
					NB_ITERATE_tSCPGet_1++;
					iterateLoop++;

					/**
					 * [tSCPGet_1 begin ] start
					 */

					ok_Hash.put("tSCPGet_1", false);
					start_Hash.put("tSCPGet_1", System.currentTimeMillis());
					currentComponent = "tSCPGet_1";

					int tos_count_tSCPGet_1 = 0;

					int nb_file_tSCPGet_1 = 0;

					/* Create a connection instance */

					ch.ethz.ssh2.Connection conn_tSCPGet_1 = (ch.ethz.ssh2.Connection) globalMap
							.get("conn_tSCPConnection_1");

					ch.ethz.ssh2.SCPClient scp_tSCPGet_1 = new ch.ethz.ssh2.SCPClient(
							conn_tSCPGet_1);

					/**
					 * [tSCPGet_1 begin ] stop
					 */
					/**
					 * [tSCPGet_1 main ] start
					 */

					currentComponent = "tSCPGet_1";

					String[] sourceFileNames_tSCPGet_1 = new String[] { ((String) globalMap
							.get("tSCPFileList_1_CURRENT_LINE")), };

					java.io.File dir_tSCPGet_1 = null;
					java.io.File file_tSCPGet_1 = null;
					java.io.FileOutputStream out_tSCPGet_1 = null;
					try {
						String parentPath_tSCPGet_1 = new java.io.File(
								context.Path_wms_files_purchase).getPath();
						java.util.List<String> list_tSCPGet_1 = new java.util.ArrayList<String>();
						for (int i_tSCPGet_1 = 0; i_tSCPGet_1 < sourceFileNames_tSCPGet_1.length; i_tSCPGet_1++) {
							String fileName_tSCPGet_1 = sourceFileNames_tSCPGet_1[i_tSCPGet_1];
							if (!new java.io.File((parentPath_tSCPGet_1),
									(fileName_tSCPGet_1)).exists()) {
								list_tSCPGet_1.add(fileName_tSCPGet_1);
							}
						}
						sourceFileNames_tSCPGet_1 = (String[]) list_tSCPGet_1
								.toArray(new String[0]);
						if (sourceFileNames_tSCPGet_1 != null
								&& sourceFileNames_tSCPGet_1.length != 0) {
							for (String sourceFile_tSCPGet_1 : sourceFileNames_tSCPGet_1) {
								if (sourceFile_tSCPGet_1 != null
										&& sourceFile_tSCPGet_1.length() != 0) {
									sourceFile_tSCPGet_1 = "\""
											+ sourceFile_tSCPGet_1 + "\"";
									sourceFile_tSCPGet_1 = sourceFile_tSCPGet_1
											.replaceAll("\\\\", "/");
									int index_tSCPGet_1 = sourceFile_tSCPGet_1
											.lastIndexOf("/");
									if (index_tSCPGet_1 > 0) {
										dir_tSCPGet_1 = new java.io.File(
												context.Path_wms_files_purchase);
										String extension_tSCPGet_1 = sourceFile_tSCPGet_1
												.substring(index_tSCPGet_1,
														sourceFile_tSCPGet_1
																.length() - 1);
										file_tSCPGet_1 = new java.io.File(
												dir_tSCPGet_1,
												extension_tSCPGet_1);
										if (!file_tSCPGet_1.exists()) {
											file_tSCPGet_1.getParentFile()
													.mkdirs();
										}
										out_tSCPGet_1 = new java.io.FileOutputStream(
												file_tSCPGet_1, false);
										scp_tSCPGet_1.get(sourceFile_tSCPGet_1,
												out_tSCPGet_1);
										nb_file_tSCPGet_1++;
									}
								}
							}
							if (nb_file_tSCPGet_1 > 0) {
								globalMap.put("tSCPGet_1_STATUS",
										"File get OK.");
							} else {
								globalMap.put("tSCPGet_1_STATUS",
										"No file transfered.");
							}
						}

					} catch (java.lang.Exception e) {
						if (out_tSCPGet_1 != null) {
							out_tSCPGet_1.close();
						}
						if (file_tSCPGet_1.length() == 0) {
							file_tSCPGet_1.delete();
						}
						globalMap.put("tSCPGet_1_STATUS", "File get fail.");
						throw e;
					} finally {
						if (out_tSCPGet_1 != null) {
							out_tSCPGet_1.close();
						}
					}

					tos_count_tSCPGet_1++;

					/**
					 * [tSCPGet_1 main ] stop
					 */
					/**
					 * [tSCPGet_1 end ] start
					 */

					currentComponent = "tSCPGet_1";

					globalMap.put("tSCPGet_1_NB_FILE", nb_file_tSCPGet_1);

					ok_Hash.put("tSCPGet_1", true);
					end_Hash.put("tSCPGet_1", System.currentTimeMillis());

					/**
					 * [tSCPGet_1 end ] stop
					 */

					/**
					 * [tSCPFileList_1 end ] start
					 */

					currentComponent = "tSCPFileList_1";

				}

				brout_tSCPFileList_1.close();
				stdout_tSCPFileList_1.close();

				java.io.InputStream stderr_tSCPFileList_1 = sess_tSCPFileList_1
						.getStderr();
				java.io.BufferedReader breer_tSCPFileList_1 = new java.io.BufferedReader(
						new java.io.InputStreamReader(stderr_tSCPFileList_1));
				String line_err_tSCPFileList_1 = "";
				StringBuilder stringStderr_tSCPFileList_1 = new StringBuilder();
				while ((line_err_tSCPFileList_1 = breer_tSCPFileList_1
						.readLine()) != null) {
					stringStderr_tSCPFileList_1.append(line_err_tSCPFileList_1
							+ "\n");
				}
				breer_tSCPFileList_1.close();
				stderr_tSCPFileList_1.close();

				/* Close this session */
				sess_tSCPFileList_1.close();

				if (("").equals(stringStderr_tSCPFileList_1)
						|| stringStderr_tSCPFileList_1 == null) {
					globalMap.put("tSCPFileList_1_STATUS",
							stringStdout_tSCPFileList_1.toString());
				} else {
					globalMap.put("tSCPFileList_1_STATUS",
							stringStderr_tSCPFileList_1.toString());
				}
				globalMap.put("tSCPFileList_1_NB_LINE", nb_line_tSCPFileList_1);

				ok_Hash.put("tSCPFileList_1", true);
				end_Hash.put("tSCPFileList_1", System.currentTimeMillis());

				/**
				 * [tSCPFileList_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tSCPFileList_1_SUBPROCESS_STATE", 1);
	}

	public static class out_2Struct implements
			routines.system.IPersistableRow<out_2Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public java.util.Date date_done;

		public java.util.Date getDate_done() {
			return this.date_done;
		}

		public java.util.Date min_date;

		public java.util.Date getMin_date() {
			return this.min_date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public Integer stock_journal_id;

		public Integer getStock_journal_id() {
			return this.stock_journal_id;
		}

		public Integer backorder_id;

		public Integer getBackorder_id() {
			return this.backorder_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer location_id;

		public Integer getLocation_id() {
			return this.location_id;
		}

		public String move_type;

		public String getMove_type() {
			return this.move_type;
		}

		public int company_id;

		public int getCompany_id() {
			return this.company_id;
		}

		public String invoice_state;

		public String getInvoice_state() {
			return this.invoice_state;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public Integer location_dest_id;

		public Integer getLocation_dest_id() {
			return this.location_dest_id;
		}

		public java.util.Date max_date;

		public java.util.Date getMax_date() {
			return this.max_date;
		}

		public Boolean auto_picking;

		public Boolean getAuto_picking() {
			return this.auto_picking;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public Integer purchase_id;

		public Integer getPurchase_id() {
			return this.purchase_id;
		}

		public Integer sale_id;

		public Integer getSale_id() {
			return this.sale_id;
		}

		public String carrier_tracking_ref;

		public String getCarrier_tracking_ref() {
			return this.carrier_tracking_ref;
		}

		public Integer number_of_packages;

		public Integer getNumber_of_packages() {
			return this.number_of_packages;
		}

		public Integer carrier_id;

		public Integer getCarrier_id() {
			return this.carrier_id;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public int weight_uom_id;

		public int getWeight_uom_id() {
			return this.weight_uom_id;
		}

		public Double weight_net;

		public Double getWeight_net() {
			return this.weight_net;
		}

		public Double volume;

		public Double getVolume() {
			return this.volume;
		}

		public String warning;

		public String getWarning() {
			return this.warning;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out_2Struct other = (out_2Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(out_2Struct other) {

			other.id = this.id;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_date = this.write_date;
			other.write_uid = this.write_uid;
			other.origin = this.origin;
			other.date_done = this.date_done;
			other.min_date = this.min_date;
			other.date = this.date;
			other.partner_id = this.partner_id;
			other.stock_journal_id = this.stock_journal_id;
			other.backorder_id = this.backorder_id;
			other.name = this.name;
			other.location_id = this.location_id;
			other.move_type = this.move_type;
			other.company_id = this.company_id;
			other.invoice_state = this.invoice_state;
			other.note = this.note;
			other.state = this.state;
			other.location_dest_id = this.location_dest_id;
			other.max_date = this.max_date;
			other.auto_picking = this.auto_picking;
			other.type = this.type;
			other.purchase_id = this.purchase_id;
			other.sale_id = this.sale_id;
			other.carrier_tracking_ref = this.carrier_tracking_ref;
			other.number_of_packages = this.number_of_packages;
			other.carrier_id = this.carrier_id;
			other.weight = this.weight;
			other.weight_uom_id = this.weight_uom_id;
			other.weight_net = this.weight_net;
			other.volume = this.volume;
			other.warning = this.warning;

		}

		public void copyKeysDataTo(out_2Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.origin = readString(dis);

					this.date_done = readDate(dis);

					this.min_date = readDate(dis);

					this.date = readDate(dis);

					this.partner_id = readInteger(dis);

					this.stock_journal_id = readInteger(dis);

					this.backorder_id = readInteger(dis);

					this.name = readString(dis);

					this.location_id = readInteger(dis);

					this.move_type = readString(dis);

					this.company_id = dis.readInt();

					this.invoice_state = readString(dis);

					this.note = readString(dis);

					this.state = readString(dis);

					this.location_dest_id = readInteger(dis);

					this.max_date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.auto_picking = null;
					} else {
						this.auto_picking = dis.readBoolean();
					}

					this.type = readString(dis);

					this.purchase_id = readInteger(dis);

					this.sale_id = readInteger(dis);

					this.carrier_tracking_ref = readString(dis);

					this.number_of_packages = readInteger(dis);

					this.carrier_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					this.weight_uom_id = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.weight_net = null;
					} else {
						this.weight_net = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.volume = null;
					} else {
						this.volume = dis.readDouble();
					}

					this.warning = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// String

				writeString(this.origin, dos);

				// java.util.Date

				writeDate(this.date_done, dos);

				// java.util.Date

				writeDate(this.min_date, dos);

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.partner_id, dos);

				// Integer

				writeInteger(this.stock_journal_id, dos);

				// Integer

				writeInteger(this.backorder_id, dos);

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.location_id, dos);

				// String

				writeString(this.move_type, dos);

				// int

				dos.writeInt(this.company_id);

				// String

				writeString(this.invoice_state, dos);

				// String

				writeString(this.note, dos);

				// String

				writeString(this.state, dos);

				// Integer

				writeInteger(this.location_dest_id, dos);

				// java.util.Date

				writeDate(this.max_date, dos);

				// Boolean

				if (this.auto_picking == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auto_picking);
				}

				// String

				writeString(this.type, dos);

				// Integer

				writeInteger(this.purchase_id, dos);

				// Integer

				writeInteger(this.sale_id, dos);

				// String

				writeString(this.carrier_tracking_ref, dos);

				// Integer

				writeInteger(this.number_of_packages, dos);

				// Integer

				writeInteger(this.carrier_id, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// int

				dos.writeInt(this.weight_uom_id);

				// Double

				if (this.weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight_net);
				}

				// Double

				if (this.volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.volume);
				}

				// String

				writeString(this.warning, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",date_done=" + String.valueOf(date_done));
			sb.append(",min_date=" + String.valueOf(min_date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",stock_journal_id=" + String.valueOf(stock_journal_id));
			sb.append(",backorder_id=" + String.valueOf(backorder_id));
			sb.append(",name=" + name);
			sb.append(",location_id=" + String.valueOf(location_id));
			sb.append(",move_type=" + move_type);
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",invoice_state=" + invoice_state);
			sb.append(",note=" + note);
			sb.append(",state=" + state);
			sb.append(",location_dest_id=" + String.valueOf(location_dest_id));
			sb.append(",max_date=" + String.valueOf(max_date));
			sb.append(",auto_picking=" + String.valueOf(auto_picking));
			sb.append(",type=" + type);
			sb.append(",purchase_id=" + String.valueOf(purchase_id));
			sb.append(",sale_id=" + String.valueOf(sale_id));
			sb.append(",carrier_tracking_ref=" + carrier_tracking_ref);
			sb.append(",number_of_packages="
					+ String.valueOf(number_of_packages));
			sb.append(",carrier_id=" + String.valueOf(carrier_id));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",weight_uom_id=" + String.valueOf(weight_uom_id));
			sb.append(",weight_net=" + String.valueOf(weight_net));
			sb.append(",volume=" + String.valueOf(volume));
			sb.append(",warning=" + warning);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out_2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out_1Struct implements
			routines.system.IPersistableRow<out_1Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public Double product_uos_qty;

		public Double getProduct_uos_qty() {
			return this.product_uos_qty;
		}

		public java.util.Date date_expected;

		public java.util.Date getDate_expected() {
			return this.date_expected;
		}

		public int product_uom;

		public int getProduct_uom() {
			return this.product_uom;
		}

		public Double price_unit;

		public Double getPrice_unit() {
			return this.price_unit;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public Integer prodlot_id;

		public Integer getProdlot_id() {
			return this.prodlot_id;
		}

		public Integer move_dest_id;

		public Integer getMove_dest_id() {
			return this.move_dest_id;
		}

		public double product_qty;

		public double getProduct_qty() {
			return this.product_qty;
		}

		public Integer product_uos;

		public Integer getProduct_uos() {
			return this.product_uos;
		}

		public Integer partner_id;

		public Integer getPartner_id() {
			return this.partner_id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public int product_id;

		public int getProduct_id() {
			return this.product_id;
		}

		public Boolean auto_validate;

		public Boolean getAuto_validate() {
			return this.auto_validate;
		}

		public Integer price_currency_id;

		public Integer getPrice_currency_id() {
			return this.price_currency_id;
		}

		public int location_id;

		public int getLocation_id() {
			return this.location_id;
		}

		public int company_id;

		public int getCompany_id() {
			return this.company_id;
		}

		public Integer picking_id;

		public Integer getPicking_id() {
			return this.picking_id;
		}

		public String priority;

		public String getPriority() {
			return this.priority;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public int location_dest_id;

		public int getLocation_dest_id() {
			return this.location_dest_id;
		}

		public Integer tracking_id;

		public Integer getTracking_id() {
			return this.tracking_id;
		}

		public Integer product_packaging;

		public Integer getProduct_packaging() {
			return this.product_packaging;
		}

		public Integer purchase_line_id;

		public Integer getPurchase_line_id() {
			return this.purchase_line_id;
		}

		public Integer sale_line_id;

		public Integer getSale_line_id() {
			return this.sale_line_id;
		}

		public Double weight;

		public Double getWeight() {
			return this.weight;
		}

		public Double weight_net;

		public Double getWeight_net() {
			return this.weight_net;
		}

		public int weight_uom_id;

		public int getWeight_uom_id() {
			return this.weight_uom_id;
		}

		public Integer tracking_to;

		public Integer getTracking_to() {
			return this.tracking_to;
		}

		public Integer tracking_from;

		public Integer getTracking_from() {
			return this.tracking_from;
		}

		public String reference;

		public String getReference() {
			return this.reference;
		}

		public Integer wms_qty;

		public Integer getWms_qty() {
			return this.wms_qty;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out_1Struct other = (out_1Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(out_1Struct other) {

			other.id = this.id;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_date = this.write_date;
			other.write_uid = this.write_uid;
			other.origin = this.origin;
			other.product_uos_qty = this.product_uos_qty;
			other.date_expected = this.date_expected;
			other.product_uom = this.product_uom;
			other.price_unit = this.price_unit;
			other.date = this.date;
			other.prodlot_id = this.prodlot_id;
			other.move_dest_id = this.move_dest_id;
			other.product_qty = this.product_qty;
			other.product_uos = this.product_uos;
			other.partner_id = this.partner_id;
			other.name = this.name;
			other.note = this.note;
			other.product_id = this.product_id;
			other.auto_validate = this.auto_validate;
			other.price_currency_id = this.price_currency_id;
			other.location_id = this.location_id;
			other.company_id = this.company_id;
			other.picking_id = this.picking_id;
			other.priority = this.priority;
			other.state = this.state;
			other.location_dest_id = this.location_dest_id;
			other.tracking_id = this.tracking_id;
			other.product_packaging = this.product_packaging;
			other.purchase_line_id = this.purchase_line_id;
			other.sale_line_id = this.sale_line_id;
			other.weight = this.weight;
			other.weight_net = this.weight_net;
			other.weight_uom_id = this.weight_uom_id;
			other.tracking_to = this.tracking_to;
			other.tracking_from = this.tracking_from;
			other.reference = this.reference;
			other.wms_qty = this.wms_qty;

		}

		public void copyKeysDataTo(out_1Struct other) {

			other.id = this.id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.id = dis.readInt();

					this.create_uid = readInteger(dis);

					this.create_date = readDate(dis);

					this.write_date = readDate(dis);

					this.write_uid = readInteger(dis);

					this.origin = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_uos_qty = null;
					} else {
						this.product_uos_qty = dis.readDouble();
					}

					this.date_expected = readDate(dis);

					this.product_uom = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.price_unit = null;
					} else {
						this.price_unit = dis.readDouble();
					}

					this.date = readDate(dis);

					this.prodlot_id = readInteger(dis);

					this.move_dest_id = readInteger(dis);

					this.product_qty = dis.readDouble();

					this.product_uos = readInteger(dis);

					this.partner_id = readInteger(dis);

					this.name = readString(dis);

					this.note = readString(dis);

					this.product_id = dis.readInt();

					length = dis.readByte();
					if (length == -1) {
						this.auto_validate = null;
					} else {
						this.auto_validate = dis.readBoolean();
					}

					this.price_currency_id = readInteger(dis);

					this.location_id = dis.readInt();

					this.company_id = dis.readInt();

					this.picking_id = readInteger(dis);

					this.priority = readString(dis);

					this.state = readString(dis);

					this.location_dest_id = dis.readInt();

					this.tracking_id = readInteger(dis);

					this.product_packaging = readInteger(dis);

					this.purchase_line_id = readInteger(dis);

					this.sale_line_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.weight = null;
					} else {
						this.weight = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.weight_net = null;
					} else {
						this.weight_net = dis.readDouble();
					}

					this.weight_uom_id = dis.readInt();

					this.tracking_to = readInteger(dis);

					this.tracking_from = readInteger(dis);

					this.reference = readString(dis);

					this.wms_qty = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

				// Integer

				writeInteger(this.create_uid, dos);

				// java.util.Date

				writeDate(this.create_date, dos);

				// java.util.Date

				writeDate(this.write_date, dos);

				// Integer

				writeInteger(this.write_uid, dos);

				// String

				writeString(this.origin, dos);

				// Double

				if (this.product_uos_qty == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_uos_qty);
				}

				// java.util.Date

				writeDate(this.date_expected, dos);

				// int

				dos.writeInt(this.product_uom);

				// Double

				if (this.price_unit == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_unit);
				}

				// java.util.Date

				writeDate(this.date, dos);

				// Integer

				writeInteger(this.prodlot_id, dos);

				// Integer

				writeInteger(this.move_dest_id, dos);

				// double

				dos.writeDouble(this.product_qty);

				// Integer

				writeInteger(this.product_uos, dos);

				// Integer

				writeInteger(this.partner_id, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.note, dos);

				// int

				dos.writeInt(this.product_id);

				// Boolean

				if (this.auto_validate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.auto_validate);
				}

				// Integer

				writeInteger(this.price_currency_id, dos);

				// int

				dos.writeInt(this.location_id);

				// int

				dos.writeInt(this.company_id);

				// Integer

				writeInteger(this.picking_id, dos);

				// String

				writeString(this.priority, dos);

				// String

				writeString(this.state, dos);

				// int

				dos.writeInt(this.location_dest_id);

				// Integer

				writeInteger(this.tracking_id, dos);

				// Integer

				writeInteger(this.product_packaging, dos);

				// Integer

				writeInteger(this.purchase_line_id, dos);

				// Integer

				writeInteger(this.sale_line_id, dos);

				// Double

				if (this.weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight);
				}

				// Double

				if (this.weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.weight_net);
				}

				// int

				dos.writeInt(this.weight_uom_id);

				// Integer

				writeInteger(this.tracking_to, dos);

				// Integer

				writeInteger(this.tracking_from, dos);

				// String

				writeString(this.reference, dos);

				// Integer

				writeInteger(this.wms_qty, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",origin=" + origin);
			sb.append(",product_uos_qty=" + String.valueOf(product_uos_qty));
			sb.append(",date_expected=" + String.valueOf(date_expected));
			sb.append(",product_uom=" + String.valueOf(product_uom));
			sb.append(",price_unit=" + String.valueOf(price_unit));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",prodlot_id=" + String.valueOf(prodlot_id));
			sb.append(",move_dest_id=" + String.valueOf(move_dest_id));
			sb.append(",product_qty=" + String.valueOf(product_qty));
			sb.append(",product_uos=" + String.valueOf(product_uos));
			sb.append(",partner_id=" + String.valueOf(partner_id));
			sb.append(",name=" + name);
			sb.append(",note=" + note);
			sb.append(",product_id=" + String.valueOf(product_id));
			sb.append(",auto_validate=" + String.valueOf(auto_validate));
			sb.append(",price_currency_id=" + String.valueOf(price_currency_id));
			sb.append(",location_id=" + String.valueOf(location_id));
			sb.append(",company_id=" + String.valueOf(company_id));
			sb.append(",picking_id=" + String.valueOf(picking_id));
			sb.append(",priority=" + priority);
			sb.append(",state=" + state);
			sb.append(",location_dest_id=" + String.valueOf(location_dest_id));
			sb.append(",tracking_id=" + String.valueOf(tracking_id));
			sb.append(",product_packaging=" + String.valueOf(product_packaging));
			sb.append(",purchase_line_id=" + String.valueOf(purchase_line_id));
			sb.append(",sale_line_id=" + String.valueOf(sale_line_id));
			sb.append(",weight=" + String.valueOf(weight));
			sb.append(",weight_net=" + String.valueOf(weight_net));
			sb.append(",weight_uom_id=" + String.valueOf(weight_uom_id));
			sb.append(",tracking_to=" + String.valueOf(tracking_to));
			sb.append(",tracking_from=" + String.valueOf(tracking_from));
			sb.append(",reference=" + reference);
			sb.append(",wms_qty=" + String.valueOf(wms_qty));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public Double product_qty_purchase;

		public Double getProduct_qty_purchase() {
			return this.product_qty_purchase;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer picking_id;

		public Integer getPicking_id() {
			return this.picking_id;
		}

		public String ref_product;

		public String getRef_product() {
			return this.ref_product;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.origin = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_qty_purchase = null;
					} else {
						this.product_qty_purchase = dis.readDouble();
					}

					this.name = readString(dis);

					this.picking_id = readInteger(dis);

					this.ref_product = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.origin, dos);

				// Double

				if (this.product_qty_purchase == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_qty_purchase);
				}

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.picking_id, dos);

				// String

				writeString(this.ref_product, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",origin=" + origin);
			sb.append(",product_qty_purchase="
					+ String.valueOf(product_qty_purchase));
			sb.append(",name=" + name);
			sb.append(",picking_id=" + String.valueOf(picking_id));
			sb.append(",ref_product=" + ref_product);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public Double product_qty_purchase;

		public Double getProduct_qty_purchase() {
			return this.product_qty_purchase;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer picking_id;

		public Integer getPicking_id() {
			return this.picking_id;
		}

		public String ref_product;

		public String getRef_product() {
			return this.ref_product;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.origin = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_qty_purchase = null;
					} else {
						this.product_qty_purchase = dis.readDouble();
					}

					this.name = readString(dis);

					this.picking_id = readInteger(dis);

					this.ref_product = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.origin, dos);

				// Double

				if (this.product_qty_purchase == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_qty_purchase);
				}

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.picking_id, dos);

				// String

				writeString(this.ref_product, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",origin=" + origin);
			sb.append(",product_qty_purchase="
					+ String.valueOf(product_qty_purchase));
			sb.append(",name=" + name);
			sb.append(",picking_id=" + String.valueOf(picking_id));
			sb.append(",ref_product=" + ref_product);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sale_lineStruct implements
			routines.system.IPersistableRow<sale_lineStruct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public Double product_qty_purchase;

		public Double getProduct_qty_purchase() {
			return this.product_qty_purchase;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Integer picking_id;

		public Integer getPicking_id() {
			return this.picking_id;
		}

		public String ref_product;

		public String getRef_product() {
			return this.ref_product;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.origin = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_qty_purchase = null;
					} else {
						this.product_qty_purchase = dis.readDouble();
					}

					this.name = readString(dis);

					this.picking_id = readInteger(dis);

					this.ref_product = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.origin, dos);

				// Double

				if (this.product_qty_purchase == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.product_qty_purchase);
				}

				// String

				writeString(this.name, dos);

				// Integer

				writeInteger(this.picking_id, dos);

				// String

				writeString(this.ref_product, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",origin=" + origin);
			sb.append(",product_qty_purchase="
					+ String.valueOf(product_qty_purchase));
			sb.append(",name=" + name);
			sb.append(",picking_id=" + String.valueOf(picking_id));
			sb.append(",ref_product=" + ref_product);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sale_lineStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class saleStruct implements
			routines.system.IPersistableRow<saleStruct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String Column;

		public String getColumn() {
			return this.Column;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public Double Column8;

		public Double getColumn8() {
			return this.Column8;
		}

		public Double Column9;

		public Double getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String sale_name;

		public String getSale_name() {
			return this.sale_name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.Column = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Column8 = null;
					} else {
						this.Column8 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Column9 = null;
					} else {
						this.Column9 = dis.readDouble();
					}

					this.Column10 = readString(dis);

					this.sale_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// Double

				if (this.Column8 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Column8);
				}

				// Double

				if (this.Column9 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Column9);
				}

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.sale_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column=" + Column);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + String.valueOf(Column8));
			sb.append(",Column9=" + String.valueOf(Column9));
			sb.append(",Column10=" + Column10);
			sb.append(",sale_name=" + sale_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(saleStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_A_1Struct implements
			routines.system.IPersistableRow<row_A_1Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String Column;

		public String getColumn() {
			return this.Column;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		public String Column14;

		public String getColumn14() {
			return this.Column14;
		}

		public String Column15;

		public String getColumn15() {
			return this.Column15;
		}

		public String Column16;

		public String getColumn16() {
			return this.Column16;
		}

		public String Column17;

		public String getColumn17() {
			return this.Column17;
		}

		public String Column18;

		public String getColumn18() {
			return this.Column18;
		}

		public String Column19;

		public String getColumn19() {
			return this.Column19;
		}

		public String Column20;

		public String getColumn20() {
			return this.Column20;
		}

		public String Column21;

		public String getColumn21() {
			return this.Column21;
		}

		public String Column22;

		public String getColumn22() {
			return this.Column22;
		}

		public String Column23;

		public String getColumn23() {
			return this.Column23;
		}

		public String Column24;

		public String getColumn24() {
			return this.Column24;
		}

		public String Column25;

		public String getColumn25() {
			return this.Column25;
		}

		public String Column26;

		public String getColumn26() {
			return this.Column26;
		}

		public String Column27;

		public String getColumn27() {
			return this.Column27;
		}

		public String Column28;

		public String getColumn28() {
			return this.Column28;
		}

		public String Column29;

		public String getColumn29() {
			return this.Column29;
		}

		public String Column30;

		public String getColumn30() {
			return this.Column30;
		}

		public String Column31;

		public String getColumn31() {
			return this.Column31;
		}

		public String Column32;

		public String getColumn32() {
			return this.Column32;
		}

		public String Column33;

		public String getColumn33() {
			return this.Column33;
		}

		public String Column34;

		public String getColumn34() {
			return this.Column34;
		}

		public String Column35;

		public String getColumn35() {
			return this.Column35;
		}

		public String Column36;

		public String getColumn36() {
			return this.Column36;
		}

		public String Column37;

		public String getColumn37() {
			return this.Column37;
		}

		public String Column38;

		public String getColumn38() {
			return this.Column38;
		}

		public String Column39;

		public String getColumn39() {
			return this.Column39;
		}

		public String Column40;

		public String getColumn40() {
			return this.Column40;
		}

		public String Column41;

		public String getColumn41() {
			return this.Column41;
		}

		public String Column42;

		public String getColumn42() {
			return this.Column42;
		}

		public String Column43;

		public String getColumn43() {
			return this.Column43;
		}

		public String Column44;

		public String getColumn44() {
			return this.Column44;
		}

		public String Column45;

		public String getColumn45() {
			return this.Column45;
		}

		public String Column46;

		public String getColumn46() {
			return this.Column46;
		}

		public String Column47;

		public String getColumn47() {
			return this.Column47;
		}

		public String Column48;

		public String getColumn48() {
			return this.Column48;
		}

		public String Column49;

		public String getColumn49() {
			return this.Column49;
		}

		public String Column50;

		public String getColumn50() {
			return this.Column50;
		}

		public String Column51;

		public String getColumn51() {
			return this.Column51;
		}

		public String Column52;

		public String getColumn52() {
			return this.Column52;
		}

		public String Column53;

		public String getColumn53() {
			return this.Column53;
		}

		public String Column54;

		public String getColumn54() {
			return this.Column54;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.Column = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

					this.Column14 = readString(dis);

					this.Column15 = readString(dis);

					this.Column16 = readString(dis);

					this.Column17 = readString(dis);

					this.Column18 = readString(dis);

					this.Column19 = readString(dis);

					this.Column20 = readString(dis);

					this.Column21 = readString(dis);

					this.Column22 = readString(dis);

					this.Column23 = readString(dis);

					this.Column24 = readString(dis);

					this.Column25 = readString(dis);

					this.Column26 = readString(dis);

					this.Column27 = readString(dis);

					this.Column28 = readString(dis);

					this.Column29 = readString(dis);

					this.Column30 = readString(dis);

					this.Column31 = readString(dis);

					this.Column32 = readString(dis);

					this.Column33 = readString(dis);

					this.Column34 = readString(dis);

					this.Column35 = readString(dis);

					this.Column36 = readString(dis);

					this.Column37 = readString(dis);

					this.Column38 = readString(dis);

					this.Column39 = readString(dis);

					this.Column40 = readString(dis);

					this.Column41 = readString(dis);

					this.Column42 = readString(dis);

					this.Column43 = readString(dis);

					this.Column44 = readString(dis);

					this.Column45 = readString(dis);

					this.Column46 = readString(dis);

					this.Column47 = readString(dis);

					this.Column48 = readString(dis);

					this.Column49 = readString(dis);

					this.Column50 = readString(dis);

					this.Column51 = readString(dis);

					this.Column52 = readString(dis);

					this.Column53 = readString(dis);

					this.Column54 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

				// String

				writeString(this.Column14, dos);

				// String

				writeString(this.Column15, dos);

				// String

				writeString(this.Column16, dos);

				// String

				writeString(this.Column17, dos);

				// String

				writeString(this.Column18, dos);

				// String

				writeString(this.Column19, dos);

				// String

				writeString(this.Column20, dos);

				// String

				writeString(this.Column21, dos);

				// String

				writeString(this.Column22, dos);

				// String

				writeString(this.Column23, dos);

				// String

				writeString(this.Column24, dos);

				// String

				writeString(this.Column25, dos);

				// String

				writeString(this.Column26, dos);

				// String

				writeString(this.Column27, dos);

				// String

				writeString(this.Column28, dos);

				// String

				writeString(this.Column29, dos);

				// String

				writeString(this.Column30, dos);

				// String

				writeString(this.Column31, dos);

				// String

				writeString(this.Column32, dos);

				// String

				writeString(this.Column33, dos);

				// String

				writeString(this.Column34, dos);

				// String

				writeString(this.Column35, dos);

				// String

				writeString(this.Column36, dos);

				// String

				writeString(this.Column37, dos);

				// String

				writeString(this.Column38, dos);

				// String

				writeString(this.Column39, dos);

				// String

				writeString(this.Column40, dos);

				// String

				writeString(this.Column41, dos);

				// String

				writeString(this.Column42, dos);

				// String

				writeString(this.Column43, dos);

				// String

				writeString(this.Column44, dos);

				// String

				writeString(this.Column45, dos);

				// String

				writeString(this.Column46, dos);

				// String

				writeString(this.Column47, dos);

				// String

				writeString(this.Column48, dos);

				// String

				writeString(this.Column49, dos);

				// String

				writeString(this.Column50, dos);

				// String

				writeString(this.Column51, dos);

				// String

				writeString(this.Column52, dos);

				// String

				writeString(this.Column53, dos);

				// String

				writeString(this.Column54, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column=" + Column);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append(",Column14=" + Column14);
			sb.append(",Column15=" + Column15);
			sb.append(",Column16=" + Column16);
			sb.append(",Column17=" + Column17);
			sb.append(",Column18=" + Column18);
			sb.append(",Column19=" + Column19);
			sb.append(",Column20=" + Column20);
			sb.append(",Column21=" + Column21);
			sb.append(",Column22=" + Column22);
			sb.append(",Column23=" + Column23);
			sb.append(",Column24=" + Column24);
			sb.append(",Column25=" + Column25);
			sb.append(",Column26=" + Column26);
			sb.append(",Column27=" + Column27);
			sb.append(",Column28=" + Column28);
			sb.append(",Column29=" + Column29);
			sb.append(",Column30=" + Column30);
			sb.append(",Column31=" + Column31);
			sb.append(",Column32=" + Column32);
			sb.append(",Column33=" + Column33);
			sb.append(",Column34=" + Column34);
			sb.append(",Column35=" + Column35);
			sb.append(",Column36=" + Column36);
			sb.append(",Column37=" + Column37);
			sb.append(",Column38=" + Column38);
			sb.append(",Column39=" + Column39);
			sb.append(",Column40=" + Column40);
			sb.append(",Column41=" + Column41);
			sb.append(",Column42=" + Column42);
			sb.append(",Column43=" + Column43);
			sb.append(",Column44=" + Column44);
			sb.append(",Column45=" + Column45);
			sb.append(",Column46=" + Column46);
			sb.append(",Column47=" + Column47);
			sb.append(",Column48=" + Column48);
			sb.append(",Column49=" + Column49);
			sb.append(",Column50=" + Column50);
			sb.append(",Column51=" + Column51);
			sb.append(",Column52=" + Column52);
			sb.append(",Column53=" + Column53);
			sb.append(",Column54=" + Column54);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_A_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_B_2Struct implements
			routines.system.IPersistableRow<row_B_2Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public String Column;

		public String getColumn() {
			return this.Column;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public double Column8;

		public double getColumn8() {
			return this.Column8;
		}

		public double Column9;

		public double getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.Column = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = dis.readDouble();

					this.Column9 = dis.readDouble();

					this.Column10 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// double

				dos.writeDouble(this.Column8);

				// double

				dos.writeDouble(this.Column9);

				// String

				writeString(this.Column10, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column=" + Column);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + String.valueOf(Column8));
			sb.append(",Column9=" + String.valueOf(Column9));
			sb.append(",Column10=" + Column10);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_B_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileList_1Struct implements
			routines.system.IPersistableRow<after_tFileList_1Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileList_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_2Process(globalMap);
				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_4Process(globalMap);

				row_A_1Struct row_A_1 = new row_A_1Struct();
				row_B_2Struct row_B_2 = new row_B_2Struct();
				saleStruct sale = new saleStruct();
				sale_lineStruct sale_line = new sale_lineStruct();
				row3Struct row3 = new row3Struct();
				out_2Struct out_2 = new out_2Struct();
				row2Struct row2 = new row2Struct();
				out_1Struct out_1 = new out_1Struct();

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileInputMSDelimited_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());
				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.Path_wms_files_purchase;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				maskList_tFileList_1.add("*");
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final String filemask_tFileList_1 : maskList_tFileList_1) {
								String filemask_compile_tFileList_1 = filemask_tFileList_1;

								filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_1.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_1);

								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									list_tFileList_1.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */
					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tFileInputMSDelimited_1++;
					iterateLoop++;

					/**
					 * [tMemorizeRows_1 begin ] start
					 */

					ok_Hash.put("tMemorizeRows_1", false);
					start_Hash.put("tMemorizeRows_1",
							System.currentTimeMillis());
					currentComponent = "tMemorizeRows_1";

					int tos_count_tMemorizeRows_1 = 0;
					int iRows_tMemorizeRows_1 = 1;
					String[] Column_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column",
							Column_tMemorizeRows_1);
					String[] Column1_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column1",
							Column1_tMemorizeRows_1);
					String[] Column2_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column2",
							Column2_tMemorizeRows_1);
					String[] Column3_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column3",
							Column3_tMemorizeRows_1);
					String[] Column4_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column4",
							Column4_tMemorizeRows_1);
					String[] Column5_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column5",
							Column5_tMemorizeRows_1);
					String[] Column6_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column6",
							Column6_tMemorizeRows_1);
					String[] Column7_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column7",
							Column7_tMemorizeRows_1);
					String[] Column8_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column8",
							Column8_tMemorizeRows_1);
					String[] Column9_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column9",
							Column9_tMemorizeRows_1);
					String[] Column10_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column10",
							Column10_tMemorizeRows_1);
					String[] Column11_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column11",
							Column11_tMemorizeRows_1);
					String[] Column12_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column12",
							Column12_tMemorizeRows_1);
					String[] Column13_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column13",
							Column13_tMemorizeRows_1);
					String[] Column14_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column14",
							Column14_tMemorizeRows_1);
					String[] Column15_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column15",
							Column15_tMemorizeRows_1);
					String[] Column16_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column16",
							Column16_tMemorizeRows_1);
					String[] Column17_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column17",
							Column17_tMemorizeRows_1);
					String[] Column18_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column18",
							Column18_tMemorizeRows_1);
					String[] Column19_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column19",
							Column19_tMemorizeRows_1);
					String[] Column20_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column20",
							Column20_tMemorizeRows_1);
					String[] Column21_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column21",
							Column21_tMemorizeRows_1);
					String[] Column22_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column22",
							Column22_tMemorizeRows_1);
					String[] Column23_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column23",
							Column23_tMemorizeRows_1);
					String[] Column24_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column24",
							Column24_tMemorizeRows_1);
					String[] Column25_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column25",
							Column25_tMemorizeRows_1);
					String[] Column26_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column26",
							Column26_tMemorizeRows_1);
					String[] Column27_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column27",
							Column27_tMemorizeRows_1);
					String[] Column28_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column28",
							Column28_tMemorizeRows_1);
					String[] Column29_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column29",
							Column29_tMemorizeRows_1);
					String[] Column30_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column30",
							Column30_tMemorizeRows_1);
					String[] Column31_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column31",
							Column31_tMemorizeRows_1);
					String[] Column32_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column32",
							Column32_tMemorizeRows_1);
					String[] Column33_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column33",
							Column33_tMemorizeRows_1);
					String[] Column34_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column34",
							Column34_tMemorizeRows_1);
					String[] Column35_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column35",
							Column35_tMemorizeRows_1);
					String[] Column36_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column36",
							Column36_tMemorizeRows_1);
					String[] Column37_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column37",
							Column37_tMemorizeRows_1);
					String[] Column38_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column38",
							Column38_tMemorizeRows_1);
					String[] Column39_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column39",
							Column39_tMemorizeRows_1);
					String[] Column40_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column40",
							Column40_tMemorizeRows_1);
					String[] Column41_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column41",
							Column41_tMemorizeRows_1);
					String[] Column42_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column42",
							Column42_tMemorizeRows_1);
					String[] Column43_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column43",
							Column43_tMemorizeRows_1);
					String[] Column44_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column44",
							Column44_tMemorizeRows_1);
					String[] Column45_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column45",
							Column45_tMemorizeRows_1);
					String[] Column46_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column46",
							Column46_tMemorizeRows_1);
					String[] Column47_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column47",
							Column47_tMemorizeRows_1);
					String[] Column48_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column48",
							Column48_tMemorizeRows_1);
					String[] Column49_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column49",
							Column49_tMemorizeRows_1);
					String[] Column50_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column50",
							Column50_tMemorizeRows_1);
					String[] Column51_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column51",
							Column51_tMemorizeRows_1);
					String[] Column52_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column52",
							Column52_tMemorizeRows_1);
					String[] Column53_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column53",
							Column53_tMemorizeRows_1);
					String[] Column54_tMemorizeRows_1 = new String[iRows_tMemorizeRows_1];
					globalMap.put("tMemorizeRows_1_Column54",
							Column54_tMemorizeRows_1);
					globalMap.put("tMemorizeRows_1_NB_LINE_ROWS",
							iRows_tMemorizeRows_1);

					/**
					 * [tMemorizeRows_1 begin ] stop
					 */

					/**
					 * [tPostgresqlOutput_2 begin ] start
					 */

					ok_Hash.put("tPostgresqlOutput_2", false);
					start_Hash.put("tPostgresqlOutput_2",
							System.currentTimeMillis());
					currentComponent = "tPostgresqlOutput_2";

					int tos_count_tPostgresqlOutput_2 = 0;

					String dbschema_tPostgresqlOutput_2 = null;
					dbschema_tPostgresqlOutput_2 = (String) globalMap
							.get("schema_" + "tPostgresqlConnection_1");

					String tableName_tPostgresqlOutput_2 = null;
					if (dbschema_tPostgresqlOutput_2 == null
							|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
						tableName_tPostgresqlOutput_2 = "stock_picking";
					} else {
						tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
								+ "\".\"" + "stock_picking";
					}

					int updateKeyCount_tPostgresqlOutput_2 = 1;
					if (updateKeyCount_tPostgresqlOutput_2 < 1) {
						throw new RuntimeException(
								"For update, Schema must have a key");
					}
					int nb_line_tPostgresqlOutput_2 = 0;
					int nb_line_update_tPostgresqlOutput_2 = 0;
					int nb_line_inserted_tPostgresqlOutput_2 = 0;
					int nb_line_deleted_tPostgresqlOutput_2 = 0;
					int nb_line_rejected_tPostgresqlOutput_2 = 0;

					int deletedCount_tPostgresqlOutput_2 = 0;
					int updatedCount_tPostgresqlOutput_2 = 0;
					int insertedCount_tPostgresqlOutput_2 = 0;
					int rejectedCount_tPostgresqlOutput_2 = 0;

					boolean whetherReject_tPostgresqlOutput_2 = false;

					java.sql.Connection conn_tPostgresqlOutput_2 = null;

					conn_tPostgresqlOutput_2 = (java.sql.Connection) globalMap
							.get("conn_tPostgresqlConnection_1");

					int batchSize_tPostgresqlOutput_2 = 10000;
					int batchSizeCounter_tPostgresqlOutput_2 = 0;

					int count_tPostgresqlOutput_2 = 0;
					String update_tPostgresqlOutput_2 = "UPDATE \""
							+ tableName_tPostgresqlOutput_2
							+ "\" SET \"state\" = ? WHERE \"id\" = ?";
					java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
							.prepareStatement(update_tPostgresqlOutput_2);

					/**
					 * [tPostgresqlOutput_2 begin ] stop
					 */

					/**
					 * [tMap_4 begin ] start
					 */

					ok_Hash.put("tMap_4", false);
					start_Hash.put("tMap_4", System.currentTimeMillis());
					currentComponent = "tMap_4";

					int tos_count_tMap_4 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_4__Struct {
					}
					Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out_2Struct out_2_tmp = new out_2Struct();
					// ###############################

					/**
					 * [tMap_4 begin ] stop
					 */

					/**
					 * [tPostgresqlOutput_1 begin ] start
					 */

					ok_Hash.put("tPostgresqlOutput_1", false);
					start_Hash.put("tPostgresqlOutput_1",
							System.currentTimeMillis());
					currentComponent = "tPostgresqlOutput_1";

					int tos_count_tPostgresqlOutput_1 = 0;

					String dbschema_tPostgresqlOutput_1 = null;
					dbschema_tPostgresqlOutput_1 = (String) globalMap
							.get("schema_" + "tPostgresqlConnection_1");

					String tableName_tPostgresqlOutput_1 = null;
					if (dbschema_tPostgresqlOutput_1 == null
							|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
						tableName_tPostgresqlOutput_1 = "stock_move";
					} else {
						tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
								+ "\".\"" + "stock_move";
					}

					int updateKeyCount_tPostgresqlOutput_1 = 2;
					if (updateKeyCount_tPostgresqlOutput_1 < 1) {
						throw new RuntimeException(
								"For update, Schema must have a key");
					}
					int nb_line_tPostgresqlOutput_1 = 0;
					int nb_line_update_tPostgresqlOutput_1 = 0;
					int nb_line_inserted_tPostgresqlOutput_1 = 0;
					int nb_line_deleted_tPostgresqlOutput_1 = 0;
					int nb_line_rejected_tPostgresqlOutput_1 = 0;

					int deletedCount_tPostgresqlOutput_1 = 0;
					int updatedCount_tPostgresqlOutput_1 = 0;
					int insertedCount_tPostgresqlOutput_1 = 0;
					int rejectedCount_tPostgresqlOutput_1 = 0;

					boolean whetherReject_tPostgresqlOutput_1 = false;

					java.sql.Connection conn_tPostgresqlOutput_1 = null;

					conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
							.get("conn_tPostgresqlConnection_1");

					int batchSize_tPostgresqlOutput_1 = 10000;
					int batchSizeCounter_tPostgresqlOutput_1 = 0;

					int count_tPostgresqlOutput_1 = 0;
					String update_tPostgresqlOutput_1 = "UPDATE \""
							+ tableName_tPostgresqlOutput_1
							+ "\" SET \"wms_qty\" = ? WHERE \"origin\" = ? AND \"product_id\" = ?";
					java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
							.prepareStatement(update_tPostgresqlOutput_1);

					/**
					 * [tPostgresqlOutput_1 begin ] stop
					 */

					/**
					 * [tMap_3 begin ] start
					 */

					ok_Hash.put("tMap_3", false);
					start_Hash.put("tMap_3", System.currentTimeMillis());
					currentComponent = "tMap_3";

					int tos_count_tMap_3 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
							.get("tHash_Lookup_row4"));

					row4Struct row4HashKey = new row4Struct();
					row4Struct row4Default = new row4Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
							.get("tHash_Lookup_row5"));

					row5Struct row5HashKey = new row5Struct();
					row5Struct row5Default = new row5Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_3__Struct {
					}
					Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					out_1Struct out_1_tmp = new out_1Struct();
					// ###############################

					/**
					 * [tMap_3 begin ] stop
					 */

					/**
					 * [tReplicate_1 begin ] start
					 */

					ok_Hash.put("tReplicate_1", false);
					start_Hash.put("tReplicate_1", System.currentTimeMillis());
					currentComponent = "tReplicate_1";

					int tos_count_tReplicate_1 = 0;

					/**
					 * [tReplicate_1 begin ] stop
					 */

					/**
					 * [tMap_2 begin ] start
					 */

					ok_Hash.put("tMap_2", false);
					start_Hash.put("tMap_2", System.currentTimeMillis());
					currentComponent = "tMap_2";

					int tos_count_tMap_2 = 0;

					// ###############################
					// # Lookup's keys initialization

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
							.get("tHash_Lookup_row1"));

					row1Struct row1HashKey = new row1Struct();
					row1Struct row1Default = new row1Struct();
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_2__Struct {
					}
					Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					sale_lineStruct sale_line_tmp = new sale_lineStruct();
					// ###############################

					/**
					 * [tMap_2 begin ] stop
					 */

					/**
					 * [tMap_1 begin ] start
					 */

					ok_Hash.put("tMap_1", false);
					start_Hash.put("tMap_1", System.currentTimeMillis());
					currentComponent = "tMap_1";

					int tos_count_tMap_1 = 0;

					// ###############################
					// # Lookup's keys initialization
					// ###############################

					// ###############################
					// # Vars initialization
					class Var__tMap_1__Struct {
					}
					Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
					// ###############################

					// ###############################
					// # Outputs initialization
					saleStruct sale_tmp = new saleStruct();
					// ###############################

					/**
					 * [tMap_1 begin ] stop
					 */

					/**
					 * [tFileInputMSDelimited_1 begin ] start
					 */

					ok_Hash.put("tFileInputMSDelimited_1", false);
					start_Hash.put("tFileInputMSDelimited_1",
							System.currentTimeMillis());
					currentComponent = "tFileInputMSDelimited_1";

					int tos_count_tFileInputMSDelimited_1 = 0;

					org.talend.fileprocess.FileInputDelimited fid_tFileInputMSDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")),
							"UTF-8", ";", "\n", true, 0, 0, -1, -1, false);
					String temp_tFileInputMSDelimited_1 = null;
					while (fid_tFileInputMSDelimited_1.nextRecord()) {
						row_A_1 = null;
						row_B_2 = null;
						try {
							if (fid_tFileInputMSDelimited_1
									.get(Integer.parseInt("0")).trim()
									.equals("E")) {
								row_A_1 = new row_A_1Struct();
								row_A_1.Column = fid_tFileInputMSDelimited_1
										.get(0).trim();
								row_A_1.Column1 = fid_tFileInputMSDelimited_1
										.get(1).trim();
								row_A_1.Column2 = fid_tFileInputMSDelimited_1
										.get(2).trim();
								row_A_1.Column3 = fid_tFileInputMSDelimited_1
										.get(3).trim();
								row_A_1.Column4 = fid_tFileInputMSDelimited_1
										.get(4).trim();
								row_A_1.Column5 = fid_tFileInputMSDelimited_1
										.get(5).trim();
								row_A_1.Column6 = fid_tFileInputMSDelimited_1
										.get(6).trim();
								row_A_1.Column7 = fid_tFileInputMSDelimited_1
										.get(7).trim();
								row_A_1.Column8 = fid_tFileInputMSDelimited_1
										.get(8).trim();
								row_A_1.Column9 = fid_tFileInputMSDelimited_1
										.get(9).trim();
								row_A_1.Column10 = fid_tFileInputMSDelimited_1
										.get(10).trim();
								row_A_1.Column11 = fid_tFileInputMSDelimited_1
										.get(11).trim();
								row_A_1.Column12 = fid_tFileInputMSDelimited_1
										.get(12).trim();
								row_A_1.Column13 = fid_tFileInputMSDelimited_1
										.get(13).trim();
								row_A_1.Column14 = fid_tFileInputMSDelimited_1
										.get(14).trim();
								row_A_1.Column15 = fid_tFileInputMSDelimited_1
										.get(15).trim();
								row_A_1.Column16 = fid_tFileInputMSDelimited_1
										.get(16).trim();
								row_A_1.Column17 = fid_tFileInputMSDelimited_1
										.get(17).trim();
								row_A_1.Column18 = fid_tFileInputMSDelimited_1
										.get(18).trim();
								row_A_1.Column19 = fid_tFileInputMSDelimited_1
										.get(19).trim();
								row_A_1.Column20 = fid_tFileInputMSDelimited_1
										.get(20).trim();
								row_A_1.Column21 = fid_tFileInputMSDelimited_1
										.get(21).trim();
								row_A_1.Column22 = fid_tFileInputMSDelimited_1
										.get(22).trim();
								row_A_1.Column23 = fid_tFileInputMSDelimited_1
										.get(23).trim();
								row_A_1.Column24 = fid_tFileInputMSDelimited_1
										.get(24).trim();
								row_A_1.Column25 = fid_tFileInputMSDelimited_1
										.get(25).trim();
								row_A_1.Column26 = fid_tFileInputMSDelimited_1
										.get(26).trim();
								row_A_1.Column27 = fid_tFileInputMSDelimited_1
										.get(27).trim();
								row_A_1.Column28 = fid_tFileInputMSDelimited_1
										.get(28).trim();
								row_A_1.Column29 = fid_tFileInputMSDelimited_1
										.get(29).trim();
								row_A_1.Column30 = fid_tFileInputMSDelimited_1
										.get(30).trim();
								row_A_1.Column31 = fid_tFileInputMSDelimited_1
										.get(31).trim();
								row_A_1.Column32 = fid_tFileInputMSDelimited_1
										.get(32).trim();
								row_A_1.Column33 = fid_tFileInputMSDelimited_1
										.get(33).trim();
								row_A_1.Column34 = fid_tFileInputMSDelimited_1
										.get(34).trim();
								row_A_1.Column35 = fid_tFileInputMSDelimited_1
										.get(35).trim();
								row_A_1.Column36 = fid_tFileInputMSDelimited_1
										.get(36).trim();
								row_A_1.Column37 = fid_tFileInputMSDelimited_1
										.get(37).trim();
								row_A_1.Column38 = fid_tFileInputMSDelimited_1
										.get(38).trim();
								row_A_1.Column39 = fid_tFileInputMSDelimited_1
										.get(39).trim();
								row_A_1.Column40 = fid_tFileInputMSDelimited_1
										.get(40).trim();
								row_A_1.Column41 = fid_tFileInputMSDelimited_1
										.get(41).trim();
								row_A_1.Column42 = fid_tFileInputMSDelimited_1
										.get(42).trim();
								row_A_1.Column43 = fid_tFileInputMSDelimited_1
										.get(43).trim();
								row_A_1.Column44 = fid_tFileInputMSDelimited_1
										.get(44).trim();
								row_A_1.Column45 = fid_tFileInputMSDelimited_1
										.get(45).trim();
								row_A_1.Column46 = fid_tFileInputMSDelimited_1
										.get(46).trim();
								row_A_1.Column47 = fid_tFileInputMSDelimited_1
										.get(47).trim();
								row_A_1.Column48 = fid_tFileInputMSDelimited_1
										.get(48).trim();
								row_A_1.Column49 = fid_tFileInputMSDelimited_1
										.get(49).trim();
								row_A_1.Column50 = fid_tFileInputMSDelimited_1
										.get(50).trim();
								row_A_1.Column51 = fid_tFileInputMSDelimited_1
										.get(51).trim();
								row_A_1.Column52 = fid_tFileInputMSDelimited_1
										.get(52).trim();
								row_A_1.Column53 = fid_tFileInputMSDelimited_1
										.get(53).trim();
								row_A_1.Column54 = fid_tFileInputMSDelimited_1
										.get(54).trim();
							} else if (fid_tFileInputMSDelimited_1
									.get(Integer.parseInt("0")).trim()
									.equals("D")) {
								row_B_2 = new row_B_2Struct();
								row_B_2.Column = fid_tFileInputMSDelimited_1
										.get(0).trim();
								row_B_2.Column1 = fid_tFileInputMSDelimited_1
										.get(1).trim();
								row_B_2.Column2 = fid_tFileInputMSDelimited_1
										.get(2).trim();
								row_B_2.Column3 = fid_tFileInputMSDelimited_1
										.get(3).trim();
								row_B_2.Column4 = fid_tFileInputMSDelimited_1
										.get(4).trim();
								row_B_2.Column5 = fid_tFileInputMSDelimited_1
										.get(5).trim();
								row_B_2.Column6 = fid_tFileInputMSDelimited_1
										.get(6).trim();
								row_B_2.Column7 = fid_tFileInputMSDelimited_1
										.get(7).trim();
								temp_tFileInputMSDelimited_1 = fid_tFileInputMSDelimited_1
										.get(8).trim();
								if (temp_tFileInputMSDelimited_1.length() > 0) {
									row_B_2.Column8 = ParserUtils
											.parseTo_double(temp_tFileInputMSDelimited_1);
								} else {
									row_B_2.Column8 = 0;
								}
								temp_tFileInputMSDelimited_1 = fid_tFileInputMSDelimited_1
										.get(9).trim();
								if (temp_tFileInputMSDelimited_1.length() > 0) {
									row_B_2.Column9 = ParserUtils
											.parseTo_double(temp_tFileInputMSDelimited_1);
								} else {
									row_B_2.Column9 = 0;
								}
								row_B_2.Column10 = fid_tFileInputMSDelimited_1
										.get(10).trim();
							}
						} catch (java.lang.Exception e) {
							System.err.println(e.getMessage());
							row_A_1 = null;
							row_B_2 = null;
						}

						/**
						 * [tFileInputMSDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputMSDelimited_1 main ] start
						 */

						currentComponent = "tFileInputMSDelimited_1";

						tos_count_tFileInputMSDelimited_1++;

						/**
						 * [tFileInputMSDelimited_1 main ] stop
						 */
						// Start of branch "row_A_1"
						if (row_A_1 != null) {

							/**
							 * [tMemorizeRows_1 main ] start
							 */

							currentComponent = "tMemorizeRows_1";

							for (int i_tMemorizeRows_1 = iRows_tMemorizeRows_1 - 1; i_tMemorizeRows_1 > 0; i_tMemorizeRows_1--) {
								Column19_tMemorizeRows_1[i_tMemorizeRows_1] = Column19_tMemorizeRows_1[i_tMemorizeRows_1 - 1];
							}
							Column19_tMemorizeRows_1[0] = row_A_1.Column19;

							tos_count_tMemorizeRows_1++;

							/**
							 * [tMemorizeRows_1 main ] stop
							 */

						} // End of branch "row_A_1"

						// Start of branch "row_B_2"
						if (row_B_2 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								sale = null;

								// # Output table : 'sale'
								sale_tmp.Column = row_B_2.Column;
								sale_tmp.Column1 = row_B_2.Column1;
								sale_tmp.Column2 = row_B_2.Column2;
								sale_tmp.Column3 = row_B_2.Column3;
								sale_tmp.Column4 = row_B_2.Column4;
								sale_tmp.Column5 = row_B_2.Column5;
								sale_tmp.Column6 = row_B_2.Column6;
								sale_tmp.Column7 = row_B_2.Column7;
								sale_tmp.Column8 = row_B_2.Column8;
								sale_tmp.Column9 = row_B_2.Column9;
								sale_tmp.Column10 = row_B_2.Column10;
								sale_tmp.sale_name = Column19_tMemorizeRows_1[0];
								sale = sale_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "sale"
							if (sale != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row1"
								// /////////////////////////////////////////////

								boolean forceLooprow1 = false;

								row1Struct row1ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row1HashKey.origin = sale.sale_name;

									row1HashKey.hashCodeDirty = true;

									tHash_Lookup_row1.lookup(row1HashKey);

									if (!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row1 != null
										&& tHash_Lookup_row1
												.getCount(row1HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.origin = '"
									// + row1HashKey.origin + "'");
								} // G 071

								row1Struct row1 = null;

								row1Struct fromLookup_row1 = null;
								row1 = row1Default;

								if (tHash_Lookup_row1 != null
										&& tHash_Lookup_row1.hasNext()) { // G
																			// 099

									fromLookup_row1 = tHash_Lookup_row1.next();

								} // G 099

								if (fromLookup_row1 != null) {
									row1 = fromLookup_row1;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									sale_line = null;

									if (!rejectedInnerJoin_tMap_2) {

										// # Output table : 'sale_line'
										sale_line_tmp.id = sale.Column;
										sale_line_tmp.origin = (row1.origin != null ? row1.origin
												: "").trim();
										sale_line_tmp.product_qty_purchase = sale.Column9;
										sale_line_tmp.name = row1.name;
										sale_line_tmp.picking_id = row1.id;
										sale_line_tmp.ref_product = sale.Column2;
										sale_line = sale_line_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "sale_line"
								if (sale_line != null) {

									/**
									 * [tReplicate_1 main ] start
									 */

									currentComponent = "tReplicate_1";

									row3 = new row3Struct();

									row3.id = sale_line.id;
									row3.origin = sale_line.origin;
									row3.product_qty_purchase = sale_line.product_qty_purchase;
									row3.name = sale_line.name;
									row3.picking_id = sale_line.picking_id;
									row3.ref_product = sale_line.ref_product;
									row2 = new row2Struct();

									row2.id = sale_line.id;
									row2.origin = sale_line.origin;
									row2.product_qty_purchase = sale_line.product_qty_purchase;
									row2.name = sale_line.name;
									row2.picking_id = sale_line.picking_id;
									row2.ref_product = sale_line.ref_product;

									tos_count_tReplicate_1++;

									/**
									 * [tReplicate_1 main ] stop
									 */

									/**
									 * [tMap_4 main ] start
									 */

									currentComponent = "tMap_4";

									boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_4 = false;
									boolean mainRowRejected_tMap_4 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
										// ###############################
										// # Output tables

										out_2 = null;

										// # Output table : 'out_2'
										out_2_tmp.id = row3.picking_id;
										out_2_tmp.create_uid = null;
										out_2_tmp.create_date = null;
										out_2_tmp.write_date = null;
										out_2_tmp.write_uid = null;
										out_2_tmp.origin = null;
										out_2_tmp.date_done = null;
										out_2_tmp.min_date = null;
										out_2_tmp.date = null;
										out_2_tmp.partner_id = null;
										out_2_tmp.stock_journal_id = null;
										out_2_tmp.backorder_id = null;
										out_2_tmp.name = null;
										out_2_tmp.location_id = null;
										out_2_tmp.move_type = null;
										out_2_tmp.company_id = 0;
										out_2_tmp.invoice_state = null;
										out_2_tmp.note = null;
										out_2_tmp.state = "updated";
										out_2_tmp.location_dest_id = null;
										out_2_tmp.max_date = null;
										out_2_tmp.auto_picking = null;
										out_2_tmp.type = null;
										out_2_tmp.purchase_id = null;
										out_2_tmp.sale_id = null;
										out_2_tmp.carrier_tracking_ref = null;
										out_2_tmp.number_of_packages = null;
										out_2_tmp.carrier_id = null;
										out_2_tmp.weight = null;
										out_2_tmp.weight_uom_id = 0;
										out_2_tmp.weight_net = null;
										out_2_tmp.volume = null;
										out_2_tmp.warning = null;
										out_2 = out_2_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_4 = false;

									tos_count_tMap_4++;

									/**
									 * [tMap_4 main ] stop
									 */
									// Start of branch "out_2"
									if (out_2 != null) {

										/**
										 * [tPostgresqlOutput_2 main ] start
										 */

										currentComponent = "tPostgresqlOutput_2";

										whetherReject_tPostgresqlOutput_2 = false;
										if (out_2.state == null) {
											pstmt_tPostgresqlOutput_2.setNull(
													1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tPostgresqlOutput_2
													.setString(1, out_2.state);
										}

										pstmt_tPostgresqlOutput_2.setInt(
												2 + count_tPostgresqlOutput_2,
												out_2.id);

										pstmt_tPostgresqlOutput_2.addBatch();
										nb_line_tPostgresqlOutput_2++;

										batchSizeCounter_tPostgresqlOutput_2++;

										if (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2) {
											try {
												int countSum_tPostgresqlOutput_2 = 0;
												for (int countEach_tPostgresqlOutput_2 : pstmt_tPostgresqlOutput_2
														.executeBatch()) {
													countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
															: countEach_tPostgresqlOutput_2);
												}

												updatedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

												batchSizeCounter_tPostgresqlOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e) {

												int countSum_tPostgresqlOutput_2 = 0;
												for (int countEach_tPostgresqlOutput_2 : e
														.getUpdateCounts()) {
													countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
															: countEach_tPostgresqlOutput_2);
												}

												updatedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

												System.err.println(e
														.getMessage());

											}

										}

										tos_count_tPostgresqlOutput_2++;

										/**
										 * [tPostgresqlOutput_2 main ] stop
										 */

									} // End of branch "out_2"

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row4"
									// /////////////////////////////////////////////

									boolean forceLooprow4 = false;

									row4Struct row4ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_3 = false;

										Object exprKeyValue_row4__id = row2.picking_id;
										if (exprKeyValue_row4__id == null) {
											hasCasePrimitiveKeyWithNull_tMap_3 = true;
										} else {
											row4HashKey.id = (int) (Integer) exprKeyValue_row4__id;
										}

										row4HashKey.hashCodeDirty = true;

										if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

											tHash_Lookup_row4
													.lookup(row4HashKey);

										} // G_TM_M_091

										if (hasCasePrimitiveKeyWithNull_tMap_3
												|| !tHash_Lookup_row4.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_3 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row4 != null
											&& tHash_Lookup_row4
													.getCount(row4HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.id = '"
										// + row4HashKey.id + "'");
									} // G 071

									row4Struct row4 = null;

									row4Struct fromLookup_row4 = null;
									row4 = row4Default;

									if (tHash_Lookup_row4 != null
											&& tHash_Lookup_row4.hasNext()) { // G
																				// 099

										fromLookup_row4 = tHash_Lookup_row4
												.next();

									} // G 099

									if (fromLookup_row4 != null) {
										row4 = fromLookup_row4;
									}

									// /////////////////////////////////////////////
									// Starting Lookup Table "row5"
									// /////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_3 = false;

										row5HashKey.old_code = row2.ref_product;

										row5HashKey.hashCodeDirty = true;

										tHash_Lookup_row5.lookup(row5HashKey);

										if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_3 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row5 != null
											&& tHash_Lookup_row5
													.getCount(row5HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.old_code = '"
										// + row5HashKey.old_code + "'");
									} // G 071

									row5Struct row5 = null;

									row5Struct fromLookup_row5 = null;
									row5 = row5Default;

									if (tHash_Lookup_row5 != null
											&& tHash_Lookup_row5.hasNext()) { // G
																				// 099

										fromLookup_row5 = tHash_Lookup_row5
												.next();

									} // G 099

									if (fromLookup_row5 != null) {
										row5 = fromLookup_row5;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										out_1 = null;

										if (!rejectedInnerJoin_tMap_3) {

											// # Output table : 'out_1'
											out_1_tmp.id = 0;
											out_1_tmp.create_uid = null;
											out_1_tmp.create_date = null;
											out_1_tmp.write_date = null;
											out_1_tmp.write_uid = null;
											out_1_tmp.origin = row2.origin;
											out_1_tmp.product_uos_qty = null;
											out_1_tmp.date_expected = null;
											out_1_tmp.product_uom = 0;
											out_1_tmp.price_unit = null;
											out_1_tmp.date = null;
											out_1_tmp.prodlot_id = null;
											out_1_tmp.move_dest_id = null;
											out_1_tmp.product_qty = row2.product_qty_purchase
													.intValue();
											out_1_tmp.product_uos = null;
											out_1_tmp.partner_id = null;
											out_1_tmp.name = row2.name;
											out_1_tmp.note = null;
											out_1_tmp.product_id = row5.id;
											out_1_tmp.auto_validate = null;
											out_1_tmp.price_currency_id = null;
											out_1_tmp.location_id = 0;
											out_1_tmp.company_id = 0;
											out_1_tmp.picking_id = null;
											out_1_tmp.priority = null;
											out_1_tmp.state = null;
											out_1_tmp.location_dest_id = 0;
											out_1_tmp.tracking_id = null;
											out_1_tmp.product_packaging = null;
											out_1_tmp.purchase_line_id = null;
											out_1_tmp.sale_line_id = null;
											out_1_tmp.weight = null;
											out_1_tmp.weight_net = null;
											out_1_tmp.weight_uom_id = 0;
											out_1_tmp.tracking_to = null;
											out_1_tmp.tracking_from = null;
											out_1_tmp.reference = null;
											out_1_tmp.wms_qty = row2.product_qty_purchase
													.intValue();
											out_1 = out_1_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */
									// Start of branch "out_1"
									if (out_1 != null) {

										/**
										 * [tPostgresqlOutput_1 main ] start
										 */

										currentComponent = "tPostgresqlOutput_1";

										whetherReject_tPostgresqlOutput_1 = false;
										if (out_1.wms_qty == null) {
											pstmt_tPostgresqlOutput_1.setNull(
													1, java.sql.Types.INTEGER);
										} else {
											pstmt_tPostgresqlOutput_1.setInt(1,
													out_1.wms_qty);
										}

										if (out_1.origin == null) {
											pstmt_tPostgresqlOutput_1
													.setNull(
															2 + count_tPostgresqlOutput_1,
															java.sql.Types.VARCHAR);
										} else {
											pstmt_tPostgresqlOutput_1
													.setString(
															2 + count_tPostgresqlOutput_1,
															out_1.origin);
										}

										pstmt_tPostgresqlOutput_1.setInt(
												3 + count_tPostgresqlOutput_1,
												out_1.product_id);

										pstmt_tPostgresqlOutput_1.addBatch();
										nb_line_tPostgresqlOutput_1++;

										batchSizeCounter_tPostgresqlOutput_1++;

										if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {
											try {
												int countSum_tPostgresqlOutput_1 = 0;
												for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
														.executeBatch()) {
													countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
															: countEach_tPostgresqlOutput_1);
												}

												updatedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

												batchSizeCounter_tPostgresqlOutput_1 = 0;
											} catch (java.sql.BatchUpdateException e) {

												int countSum_tPostgresqlOutput_1 = 0;
												for (int countEach_tPostgresqlOutput_1 : e
														.getUpdateCounts()) {
													countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
															: countEach_tPostgresqlOutput_1);
												}

												updatedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

												System.err.println(e
														.getMessage());

											}

										}

										tos_count_tPostgresqlOutput_1++;

										/**
										 * [tPostgresqlOutput_1 main ] stop
										 */

									} // End of branch "out_1"

								} // End of branch "sale_line"

							} // End of branch "sale"

						} // End of branch "row_B_2"

						/**
						 * [tFileInputMSDelimited_1 end ] start
						 */

						currentComponent = "tFileInputMSDelimited_1";

					}
					if (fid_tFileInputMSDelimited_1 != null) {
						fid_tFileInputMSDelimited_1.close();
					}

					ok_Hash.put("tFileInputMSDelimited_1", true);
					end_Hash.put("tFileInputMSDelimited_1",
							System.currentTimeMillis());

					/**
					 * [tFileInputMSDelimited_1 end ] stop
					 */

					/**
					 * [tMap_1 end ] start
					 */

					currentComponent = "tMap_1";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_1", true);
					end_Hash.put("tMap_1", System.currentTimeMillis());

					/**
					 * [tMap_1 end ] stop
					 */

					/**
					 * [tMap_2 end ] start
					 */

					currentComponent = "tMap_2";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_2", true);
					end_Hash.put("tMap_2", System.currentTimeMillis());

					/**
					 * [tMap_2 end ] stop
					 */

					/**
					 * [tReplicate_1 end ] start
					 */

					currentComponent = "tReplicate_1";

					ok_Hash.put("tReplicate_1", true);
					end_Hash.put("tReplicate_1", System.currentTimeMillis());

					/**
					 * [tReplicate_1 end ] stop
					 */

					/**
					 * [tMap_3 end ] start
					 */

					currentComponent = "tMap_3";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_3", true);
					end_Hash.put("tMap_3", System.currentTimeMillis());

					/**
					 * [tMap_3 end ] stop
					 */

					/**
					 * [tPostgresqlOutput_1 end ] start
					 */

					currentComponent = "tPostgresqlOutput_1";

					try {
						int countSum_tPostgresqlOutput_1 = 0;
						if (pstmt_tPostgresqlOutput_1 != null) {
							for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
									.executeBatch()) {
								countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
										: countEach_tPostgresqlOutput_1);
							}
						}

						updatedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

					} catch (java.sql.BatchUpdateException e) {

						int countSum_tPostgresqlOutput_1 = 0;
						for (int countEach_tPostgresqlOutput_1 : e
								.getUpdateCounts()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
									: countEach_tPostgresqlOutput_1);
						}

						updatedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

						System.out.println(e.getMessage());

					}

					if (pstmt_tPostgresqlOutput_1 != null) {

						pstmt_tPostgresqlOutput_1.close();

					}

					nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
							+ deletedCount_tPostgresqlOutput_1;
					nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
							+ updatedCount_tPostgresqlOutput_1;
					nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
							+ insertedCount_tPostgresqlOutput_1;
					nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
							+ rejectedCount_tPostgresqlOutput_1;

					globalMap.put("tPostgresqlOutput_1_NB_LINE",
							nb_line_tPostgresqlOutput_1);
					globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
							nb_line_update_tPostgresqlOutput_1);
					globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
							nb_line_inserted_tPostgresqlOutput_1);
					globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
							nb_line_deleted_tPostgresqlOutput_1);
					globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
							nb_line_rejected_tPostgresqlOutput_1);

					ok_Hash.put("tPostgresqlOutput_1", true);
					end_Hash.put("tPostgresqlOutput_1",
							System.currentTimeMillis());

					/**
					 * [tPostgresqlOutput_1 end ] stop
					 */

					/**
					 * [tMap_4 end ] start
					 */

					currentComponent = "tMap_4";

					// ###############################
					// # Lookup hashes releasing
					// ###############################

					ok_Hash.put("tMap_4", true);
					end_Hash.put("tMap_4", System.currentTimeMillis());

					/**
					 * [tMap_4 end ] stop
					 */

					/**
					 * [tPostgresqlOutput_2 end ] start
					 */

					currentComponent = "tPostgresqlOutput_2";

					try {
						int countSum_tPostgresqlOutput_2 = 0;
						if (pstmt_tPostgresqlOutput_2 != null) {
							for (int countEach_tPostgresqlOutput_2 : pstmt_tPostgresqlOutput_2
									.executeBatch()) {
								countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
										: countEach_tPostgresqlOutput_2);
							}
						}

						updatedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

					} catch (java.sql.BatchUpdateException e) {

						int countSum_tPostgresqlOutput_2 = 0;
						for (int countEach_tPostgresqlOutput_2 : e
								.getUpdateCounts()) {
							countSum_tPostgresqlOutput_2 += (countEach_tPostgresqlOutput_2 < 0 ? 0
									: countEach_tPostgresqlOutput_2);
						}

						updatedCount_tPostgresqlOutput_2 += countSum_tPostgresqlOutput_2;

						System.out.println(e.getMessage());

					}

					if (pstmt_tPostgresqlOutput_2 != null) {

						pstmt_tPostgresqlOutput_2.close();

					}

					nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
							+ deletedCount_tPostgresqlOutput_2;
					nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
							+ updatedCount_tPostgresqlOutput_2;
					nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
							+ insertedCount_tPostgresqlOutput_2;
					nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
							+ rejectedCount_tPostgresqlOutput_2;

					globalMap.put("tPostgresqlOutput_2_NB_LINE",
							nb_line_tPostgresqlOutput_2);
					globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
							nb_line_update_tPostgresqlOutput_2);
					globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
							nb_line_inserted_tPostgresqlOutput_2);
					globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
							nb_line_deleted_tPostgresqlOutput_2);
					globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
							nb_line_rejected_tPostgresqlOutput_2);

					ok_Hash.put("tPostgresqlOutput_2", true);
					end_Hash.put("tPostgresqlOutput_2",
							System.currentTimeMillis());

					/**
					 * [tPostgresqlOutput_2 end ] stop
					 */

					/**
					 * [tMemorizeRows_1 end ] start
					 */

					currentComponent = "tMemorizeRows_1";

					ok_Hash.put("tMemorizeRows_1", true);
					end_Hash.put("tMemorizeRows_1", System.currentTimeMillis());

					/**
					 * [tMemorizeRows_1 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		} finally {
			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row1");

		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileCopy_1 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());
				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = context.Path_wms_files_purchase;
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				maskList_tFileList_2.add("*");
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final String filemask_tFileList_2 : maskList_tFileList_2) {
								String filemask_compile_tFileList_2 = filemask_tFileList_2;

								filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_2.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_2);

								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									list_tFileList_2.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */
					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */
					NB_ITERATE_tFileCopy_1++;
					iterateLoop++;

					/**
					 * [tFileCopy_1 begin ] start
					 */

					ok_Hash.put("tFileCopy_1", false);
					start_Hash.put("tFileCopy_1", System.currentTimeMillis());
					currentComponent = "tFileCopy_1";

					int tos_count_tFileCopy_1 = 0;

					/**
					 * [tFileCopy_1 begin ] stop
					 */
					/**
					 * [tFileCopy_1 main ] start
					 */

					currentComponent = "tFileCopy_1";

					String srcFileName_tFileCopy_1 = ((String) globalMap
							.get("tFileList_2_CURRENT_FILEPATH"));

					java.io.File srcFile_tFileCopy_1 = new java.io.File(
							srcFileName_tFileCopy_1);

					// here need check first, before mkdirs().
					if (!srcFile_tFileCopy_1.exists()
							|| !srcFile_tFileCopy_1.isFile()) {
						throw new RuntimeException("The source File \""
								+ srcFileName_tFileCopy_1
								+ "\" does not exist or is not a file.");
					}

					String desDirName_tFileCopy_1 = context.Path_wms_files_purchase;

					String desFileName_tFileCopy_1 = (((String) globalMap
							.get("tFileList_2_CURRENT_FILEEXTENSION")) == "") ? ((String) globalMap
							.get("tFileList_2_CURRENT_FILE"))
							.replace(
									((String) globalMap
											.get("tFileList_2_CURRENT_FILEEXTENSION")),
									"").concat(
									TalendDate.formatDate(
											"yyyy_MM_dd_HH_mm_ss", new Date()))
							: ((String) globalMap
									.get("tFileList_2_CURRENT_FILE"))
									.replace(
											((String) globalMap
													.get("tFileList_2_CURRENT_FILEEXTENSION")),
											"")
									.concat(TalendDate.formatDate(
											"yyyy_MM_dd_HH_mm_ss", new Date()))
									.concat(".")
									.concat(((String) globalMap
											.get("tFileList_2_CURRENT_FILEEXTENSION")));

					if (desFileName_tFileCopy_1 != null
							&& ("").equals(desFileName_tFileCopy_1.trim())) {
						desFileName_tFileCopy_1 = "NewName.temp";
					}

					java.io.File desFile_tFileCopy_1 = new java.io.File(
							desDirName_tFileCopy_1, desFileName_tFileCopy_1);

					if (!srcFile_tFileCopy_1.getPath().equals(
							desFile_tFileCopy_1.getPath())) {
						java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1
								.getParentFile();

						if (parentFile_tFileCopy_1 != null
								&& !parentFile_tFileCopy_1.exists()) {
							parentFile_tFileCopy_1.mkdirs();
						}
						org.talend.FileCopy.copyFile(
								srcFile_tFileCopy_1.getPath(),
								desFile_tFileCopy_1.getPath(), true);
						java.io.File isRemoved_tFileCopy_1 = new java.io.File(
								((String) globalMap
										.get("tFileList_2_CURRENT_FILEPATH")));
						if (isRemoved_tFileCopy_1.exists()) {
							System.err
									.println("The source file could not be removed from the folder because it is open or you only have read-only rights.\n");
						}

					}
					globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",
							desFile_tFileCopy_1.getPath());
					globalMap.put("tFileCopy_1_DESTINATION_FILENAME",
							desFile_tFileCopy_1.getName());

					globalMap.put("tFileCopy_1_SOURCE_DIRECTORY",
							srcFile_tFileCopy_1.getParent());
					globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY",
							desFile_tFileCopy_1.getParent());

					tos_count_tFileCopy_1++;

					/**
					 * [tFileCopy_1 main ] stop
					 */
					/**
					 * [tFileCopy_1 end ] start
					 */

					currentComponent = "tFileCopy_1";

					ok_Hash.put("tFileCopy_1", true);
					end_Hash.put("tFileCopy_1", System.currentTimeMillis());

					/**
					 * [tFileCopy_1 end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tFileList_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_3 begin ] start
				 */

				int NB_ITERATE_tSCPPut_1 = 0; // for statistics

				ok_Hash.put("tFileList_3", false);
				start_Hash.put("tFileList_3", System.currentTimeMillis());
				currentComponent = "tFileList_3";

				int tos_count_tFileList_3 = 0;

				String directory_tFileList_3 = context.Path_wms_files_purchase;
				final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
				maskList_tFileList_3.add("*");
				int NB_FILEtFileList_3 = 0;

				final boolean case_sensitive_tFileList_3 = true;
				final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
				java.io.File file_tFileList_3 = new java.io.File(
						directory_tFileList_3);

				file_tFileList_3.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_3 = file.getName();
							for (final String filemask_tFileList_3 : maskList_tFileList_3) {
								String filemask_compile_tFileList_3 = filemask_tFileList_3;

								filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(
										filemask_tFileList_3.toCharArray(),
										org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

								java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern
										.compile(filemask_compile_tFileList_3);

								if (fileNamePattern_tFileList_3.matcher(
										fileName_tFileList_3).matches()) {
									list_tFileList_3.add(file);
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_3);

				for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3
						.size(); i_tFileList_3++) {
					java.io.File files_tFileList_3 = list_tFileList_3
							.get(i_tFileList_3);
					String fileName_tFileList_3 = files_tFileList_3.getName();

					String currentFileName_tFileList_3 = files_tFileList_3
							.getName();
					String currentFilePath_tFileList_3 = files_tFileList_3
							.getAbsolutePath();
					String currentFileDirectory_tFileList_3 = files_tFileList_3
							.getParent();
					String currentFileExtension_tFileList_3 = null;

					if (files_tFileList_3.getName().contains(".")
							&& files_tFileList_3.isFile()) {
						currentFileExtension_tFileList_3 = files_tFileList_3
								.getName().substring(
										files_tFileList_3.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_3 = "";
					}

					NB_FILEtFileList_3++;
					globalMap.put("tFileList_3_CURRENT_FILE",
							currentFileName_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEPATH",
							currentFilePath_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_3);
					globalMap.put("tFileList_3_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_3);
					globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);

					/**
					 * [tFileList_3 begin ] stop
					 */
					/**
					 * [tFileList_3 main ] start
					 */

					currentComponent = "tFileList_3";

					tos_count_tFileList_3++;

					/**
					 * [tFileList_3 main ] stop
					 */
					NB_ITERATE_tSCPPut_1++;
					iterateLoop++;

					/**
					 * [tSCPPut_1 begin ] start
					 */

					ok_Hash.put("tSCPPut_1", false);
					start_Hash.put("tSCPPut_1", System.currentTimeMillis());
					currentComponent = "tSCPPut_1";

					int tos_count_tSCPPut_1 = 0;

					int nb_file_tSCPPut_1 = 0;
					globalMap.put("tSCPPut_1_STATUS", "");

					/* Create a connection instance */

					ch.ethz.ssh2.Connection conn_tSCPPut_1 = (ch.ethz.ssh2.Connection) globalMap
							.get("conn_tSCPConnection_1");

					ch.ethz.ssh2.SCPClient scp_tSCPPut_1 = new ch.ethz.ssh2.SCPClient(
							conn_tSCPPut_1);

					java.util.List<String> sourceList_tSCPPut_1 = new java.util.ArrayList<String>();
					if ((new java.io.File(
							((String) globalMap
									.get("tFileList_3_CURRENT_FILEPATH")))
							.exists())
							&& (new java.io.File(
									((String) globalMap
											.get("tFileList_3_CURRENT_FILEPATH")))
									.isFile())) {
						sourceList_tSCPPut_1.add(((String) globalMap
								.get("tFileList_3_CURRENT_FILEPATH")));
					}
					String[] sourceFileNames_tSCPPut_1 = new String[sourceList_tSCPPut_1
							.size()];
					for (int i_tSCPPut_1 = 0; i_tSCPPut_1 < sourceList_tSCPPut_1
							.size(); i_tSCPPut_1++) {
						sourceFileNames_tSCPPut_1[i_tSCPPut_1] = sourceList_tSCPPut_1
								.get(i_tSCPPut_1);
					}

					/**
					 * [tSCPPut_1 begin ] stop
					 */
					/**
					 * [tSCPPut_1 main ] start
					 */

					currentComponent = "tSCPPut_1";

					try {
						if (sourceFileNames_tSCPPut_1 != null
								&& sourceFileNames_tSCPPut_1.length != 0) {
							scp_tSCPPut_1
									.put(sourceFileNames_tSCPPut_1,
											((String) globalMap
													.get("davits_wmsfiles_after_treated")),
											"0644");
							nb_file_tSCPPut_1 = sourceFileNames_tSCPPut_1.length;
							globalMap.put("tSCPPut_1_STATUS", "File put OK.");
						} else {
							globalMap.put("tSCPPut_1_STATUS",
									"No file transfered.");
						}
					} catch (java.lang.Exception e) {
						e.printStackTrace();
						globalMap.put("tSCPPut_1_STATUS", "File put fail.");
					}

					tos_count_tSCPPut_1++;

					/**
					 * [tSCPPut_1 main ] stop
					 */
					/**
					 * [tSCPPut_1 end ] start
					 */

					currentComponent = "tSCPPut_1";

					globalMap.put("tSCPPut_1_NB_FILE", nb_file_tSCPPut_1);

					ok_Hash.put("tSCPPut_1", true);
					end_Hash.put("tSCPPut_1", System.currentTimeMillis());

					/**
					 * [tSCPPut_1 end ] stop
					 */

					/**
					 * [tFileList_3 end ] start
					 */

					currentComponent = "tFileList_3";

				}
				globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);

				ok_Hash.put("tFileList_3", true);
				end_Hash.put("tFileList_3", System.currentTimeMillis());

				/**
				 * [tFileList_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileDelete_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());
				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */
				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}

				java.io.File filetFileDelete_1 = new java.io.File(
						context.Path_wms_files_purchase);

				if (filetFileDelete_1.exists()
						&& filetFileDelete_1.isDirectory()) {
					DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
					if (dftFileDelete_1.delete(filetFileDelete_1)) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"Path deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No path deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"Path does not exists or is invalid.");

				}
				globalMap.put("tFileDelete_1_DELETE_PATH",
						context.Path_wms_files_purchase);

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */
				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSCPFileList_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tSCPFileList_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSCPFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSCPFileList_2 begin ] start
				 */

				int NB_ITERATE_tSCPDelete_1 = 0; // for statistics

				ok_Hash.put("tSCPFileList_2", false);
				start_Hash.put("tSCPFileList_2", System.currentTimeMillis());
				currentComponent = "tSCPFileList_2";

				int tos_count_tSCPFileList_2 = 0;

				/* Create a connection instance */

				ch.ethz.ssh2.Connection conn_tSCPFileList_2 = (ch.ethz.ssh2.Connection) globalMap
						.get("conn_tSCPConnection_1");

				// initial the command
				StringBuilder command_tSCPFileList_2 = new StringBuilder();
				if (command_tSCPFileList_2.length() > 0) {
					command_tSCPFileList_2.append(":");
				}
				command_tSCPFileList_2.append("ls -1 ".concat(
						(String) globalMap
								.get("davits_path_wms_openerp_purchase"))
						.concat("/*"));

				/* Create a session */
				ch.ethz.ssh2.Session sess_tSCPFileList_2 = conn_tSCPFileList_2
						.openSession();

				// execute the command
				sess_tSCPFileList_2.execCommand((command_tSCPFileList_2)
						.toString());

				int nb_line_tSCPFileList_2 = 0;

				// get the return info
				java.io.InputStream stdout_tSCPFileList_2 = sess_tSCPFileList_2
						.getStdout();
				java.io.BufferedReader brout_tSCPFileList_2 = new java.io.BufferedReader(
						new java.io.InputStreamReader(stdout_tSCPFileList_2));
				String line_out_tSCPFileList_2 = "";
				StringBuilder stringStdout_tSCPFileList_2 = new StringBuilder();
				while ((line_out_tSCPFileList_2 = brout_tSCPFileList_2
						.readLine()) != null) {

					/**
					 * [tSCPFileList_2 begin ] stop
					 */
					/**
					 * [tSCPFileList_2 main ] start
					 */

					currentComponent = "tSCPFileList_2";

					nb_line_tSCPFileList_2++;

					stringStdout_tSCPFileList_2.append(line_out_tSCPFileList_2
							+ "\n");
					globalMap.put("tSCPFileList_2_NB_LINE",
							nb_line_tSCPFileList_2);
					globalMap.put("tSCPFileList_2_CURRENT_LINE",
							line_out_tSCPFileList_2);

					tos_count_tSCPFileList_2++;

					/**
					 * [tSCPFileList_2 main ] stop
					 */
					NB_ITERATE_tSCPDelete_1++;
					iterateLoop++;

					/**
					 * [tSCPDelete_1 begin ] start
					 */

					ok_Hash.put("tSCPDelete_1", false);
					start_Hash.put("tSCPDelete_1", System.currentTimeMillis());
					currentComponent = "tSCPDelete_1";

					int tos_count_tSCPDelete_1 = 0;

					int nb_file_tSCPDelete_1 = 0;

					/* Create a connection instance */
					ch.ethz.ssh2.Connection conn_tSCPDelete_1 = null;

					conn_tSCPDelete_1 = (ch.ethz.ssh2.Connection) globalMap
							.get("conn_tSCPConnection_1");
					String hostname_tSCPDelete_1 = "127.0.0.1";
					String username_tSCPDelete_1 = "username";

					/**
					 * [tSCPDelete_1 begin ] stop
					 */
					/**
					 * [tSCPDelete_1 main ] start
					 */

					currentComponent = "tSCPDelete_1";

					// initial the command
					StringBuilder command_tSCPDelete_1 = new StringBuilder();
					String dir_tSCPDelete_1 = null;
					dir_tSCPDelete_1 = ((String) globalMap
							.get("tSCPFileList_2_CURRENT_LINE"));
					dir_tSCPDelete_1 = "\"" + dir_tSCPDelete_1 + "\"";
					command_tSCPDelete_1.append("rm " + dir_tSCPDelete_1);
					nb_file_tSCPDelete_1++;

					/* Create a session */
					ch.ethz.ssh2.Session sess_tSCPDelete_1 = conn_tSCPDelete_1
							.openSession();

					// execute the command
					sess_tSCPDelete_1.execCommand((command_tSCPDelete_1)
							.toString());

					// get the return info

					java.io.InputStream stderr_tSCPDelete_1 = sess_tSCPDelete_1
							.getStderr();
					java.io.BufferedReader breer_tSCPDelete_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(stderr_tSCPDelete_1));
					String line_err_tSCPDelete_1 = "";
					StringBuilder stringStderr_tSCPDelete_1 = new StringBuilder();
					while ((line_err_tSCPDelete_1 = breer_tSCPDelete_1
							.readLine()) != null) {
						stringStderr_tSCPDelete_1.append(line_err_tSCPDelete_1
								+ "\n");
					}
					String stderrString_tSCPDelete_1 = stringStderr_tSCPDelete_1
							.toString();

					if (stderrString_tSCPDelete_1.contains(((String) globalMap
							.get("tSCPFileList_2_CURRENT_LINE")))) {
						nb_file_tSCPDelete_1--;
					}

					breer_tSCPDelete_1.close();
					stderr_tSCPDelete_1.close();

					/* Close this session */
					sess_tSCPDelete_1.close();

					if (("").equals(stringStderr_tSCPDelete_1.toString())
							|| (stringStderr_tSCPDelete_1.toString() == null)) {
						globalMap.put("tSCPDelete_1_STATUS",
								"File(s) deleted OK");
					} else {
						globalMap.put("tSCPDelete_1_STATUS",
								stringStderr_tSCPDelete_1.toString());
					}

					tos_count_tSCPDelete_1++;

					/**
					 * [tSCPDelete_1 main ] stop
					 */
					/**
					 * [tSCPDelete_1 end ] start
					 */

					currentComponent = "tSCPDelete_1";

					globalMap.put("tSCPDelete_1_NB_FILE", nb_file_tSCPDelete_1);

					ok_Hash.put("tSCPDelete_1", true);
					end_Hash.put("tSCPDelete_1", System.currentTimeMillis());

					/**
					 * [tSCPDelete_1 end ] stop
					 */

					/**
					 * [tSCPFileList_2 end ] start
					 */

					currentComponent = "tSCPFileList_2";

				}

				brout_tSCPFileList_2.close();
				stdout_tSCPFileList_2.close();

				java.io.InputStream stderr_tSCPFileList_2 = sess_tSCPFileList_2
						.getStderr();
				java.io.BufferedReader breer_tSCPFileList_2 = new java.io.BufferedReader(
						new java.io.InputStreamReader(stderr_tSCPFileList_2));
				String line_err_tSCPFileList_2 = "";
				StringBuilder stringStderr_tSCPFileList_2 = new StringBuilder();
				while ((line_err_tSCPFileList_2 = breer_tSCPFileList_2
						.readLine()) != null) {
					stringStderr_tSCPFileList_2.append(line_err_tSCPFileList_2
							+ "\n");
				}
				breer_tSCPFileList_2.close();
				stderr_tSCPFileList_2.close();

				/* Close this session */
				sess_tSCPFileList_2.close();

				if (("").equals(stringStderr_tSCPFileList_2)
						|| stringStderr_tSCPFileList_2 == null) {
					globalMap.put("tSCPFileList_2_STATUS",
							stringStdout_tSCPFileList_2.toString());
				} else {
					globalMap.put("tSCPFileList_2_STATUS",
							stringStderr_tSCPFileList_2.toString());
				}
				globalMap.put("tSCPFileList_2_NB_LINE", nb_line_tSCPFileList_2);

				ok_Hash.put("tSCPFileList_2", true);
				end_Hash.put("tSCPFileList_2", System.currentTimeMillis());

				/**
				 * [tSCPFileList_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSCPFileList_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tSCPClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tSCPFileList_2_SUBPROCESS_STATE", 1);
	}

	public void tSCPClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSCPClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSCPClose_1 begin ] start
				 */

				ok_Hash.put("tSCPClose_1", false);
				start_Hash.put("tSCPClose_1", System.currentTimeMillis());
				currentComponent = "tSCPClose_1";

				int tos_count_tSCPClose_1 = 0;

				/**
				 * [tSCPClose_1 begin ] stop
				 */
				/**
				 * [tSCPClose_1 main ] start
				 */

				currentComponent = "tSCPClose_1";

				ch.ethz.ssh2.Connection conn_tSCPClose_1 = (ch.ethz.ssh2.Connection) globalMap
						.get("conn_tSCPConnection_1");
				if (conn_tSCPClose_1 != null) {
					conn_tSCPClose_1.close();
				}

				tos_count_tSCPClose_1++;

				/**
				 * [tSCPClose_1 main ] stop
				 */
				/**
				 * [tSCPClose_1 end ] start
				 */

				currentComponent = "tSCPClose_1";

				ok_Hash.put("tSCPClose_1", true);
				end_Hash.put("tSCPClose_1", System.currentTimeMillis());

				/**
				 * [tSCPClose_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tSCPClose_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id = this.id;
			other.name = this.name;
			other.type = this.type;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id = this.id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.id = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.type = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.type, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row4";

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tPostgresqlInput_2 - inputs:(after_tFileList_1)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 -
				// inputs:(row4) outputs:()
				// linked node: tMap_3 - inputs:(row2,row4,row5) outputs:(out_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_2) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_2 = dataSources_tPostgresqlInput_2
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_2);
				}

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "select id,name,type from stock_picking where state in ('confirmed','assigned') ";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
						.executeQuery(dbquery_tPostgresqlInput_2);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
						.getColumnCount();

				String tmpContent_tPostgresqlInput_2 = null;
				int column_index_tPostgresqlInput_2 = 1;
				while (rs_tPostgresqlInput_2.next()) {
					nb_line_tPostgresqlInput_2++;

					column_index_tPostgresqlInput_2 = 1;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.id = 0;
					} else {

						if (rs_tPostgresqlInput_2
								.getObject(column_index_tPostgresqlInput_2) != null) {
							row4.id = rs_tPostgresqlInput_2
									.getInt(column_index_tPostgresqlInput_2);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_2 = 2;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.name = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.name = tmpContent_tPostgresqlInput_2;
						} else {
							row4.name = null;
						}

					}
					column_index_tPostgresqlInput_2 = 3;

					if (colQtyInRs_tPostgresqlInput_2 < column_index_tPostgresqlInput_2) {
						row4.type = null;
					} else {

						tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
								.getString(column_index_tPostgresqlInput_2);
						if (tmpContent_tPostgresqlInput_2 != null) {
							row4.type = tmpContent_tPostgresqlInput_2;
						} else {
							row4.type = null;
						}

					}

					/**
					 * [tPostgresqlInput_2 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_2 main ] start
					 */

					currentComponent = "tPostgresqlInput_2";

					tos_count_tPostgresqlInput_2++;

					/**
					 * [tPostgresqlInput_2 main ] stop
					 */

					/**
					 * [tAdvancedHash_row4 main ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.id = row4.id;

					row4_HashRow.name = row4.name;

					row4_HashRow.type = row4.type;

					tHash_Lookup_row4.put(row4_HashRow);

					tos_count_tAdvancedHash_row4++;

					/**
					 * [tAdvancedHash_row4 main ] stop
					 */

					/**
					 * [tPostgresqlInput_2 end ] start
					 */

					currentComponent = "tPostgresqlInput_2";

				}
				stmt_tPostgresqlInput_2.close();

				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.origin == null) ? 0 : this.origin.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.origin == null) {
				if (other.origin != null)
					return false;
			} else if (!this.origin.equals(other.origin))
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.name = this.name;
			other.origin = this.origin;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.origin = this.origin;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.origin = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.origin, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				this.name = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				writeString(this.name, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",origin=" + origin);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.origin, other.origin);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash
						.put("tAdvancedHash_row1", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row1";

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tPostgresqlInput_1 - inputs:(after_tFileList_1)
				// outputs:(row1,row1) | target node:tAdvancedHash_row1 -
				// inputs:(row1) outputs:()
				// linked node: tMap_2 - inputs:(sale,row1) outputs:(sale_line)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct> getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != dataSources_tPostgresqlInput_1) {
					conn_tPostgresqlInput_1 = dataSources_tPostgresqlInput_1
							.get("").getConnection();
				} else {
					java.lang.Class.forName("org.postgresql.Driver");

					String url_tPostgresqlInput_1 = "jdbc:postgresql://"
							+ context.davidts_dev_Server + ":"
							+ context.davidts_dev_Port + "/"
							+ context.davidts_dev_Database;
					String dbUser_tPostgresqlInput_1 = context.davidts_dev_Login;
					String dbPwd_tPostgresqlInput_1 = context.davidts_dev_Password;
					conn_tPostgresqlInput_1 = java.sql.DriverManager
							.getConnection(url_tPostgresqlInput_1,
									dbUser_tPostgresqlInput_1,
									dbPwd_tPostgresqlInput_1);

				}
				conn_tPostgresqlInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "select id,name,origin from stock_picking where state in ('confirmed','assigned') and type = 'in'";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
						.executeQuery(dbquery_tPostgresqlInput_1);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
						.getColumnCount();

				String tmpContent_tPostgresqlInput_1 = null;
				int column_index_tPostgresqlInput_1 = 1;
				while (rs_tPostgresqlInput_1.next()) {
					nb_line_tPostgresqlInput_1++;

					column_index_tPostgresqlInput_1 = 1;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.id = 0;
					} else {

						if (rs_tPostgresqlInput_1
								.getObject(column_index_tPostgresqlInput_1) != null) {
							row1.id = rs_tPostgresqlInput_1
									.getInt(column_index_tPostgresqlInput_1);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_1 = 2;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.name = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.name = tmpContent_tPostgresqlInput_1;
						} else {
							row1.name = null;
						}

					}
					column_index_tPostgresqlInput_1 = 3;

					if (colQtyInRs_tPostgresqlInput_1 < column_index_tPostgresqlInput_1) {
						row1.origin = null;
					} else {

						tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
								.getString(column_index_tPostgresqlInput_1);
						if (tmpContent_tPostgresqlInput_1 != null) {
							row1.origin = tmpContent_tPostgresqlInput_1;
						} else {
							row1.origin = null;
						}

					}

					/**
					 * [tPostgresqlInput_1 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_1 main ] start
					 */

					currentComponent = "tPostgresqlInput_1";

					tos_count_tPostgresqlInput_1++;

					/**
					 * [tPostgresqlInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row1 main ] start
					 */

					currentComponent = "tAdvancedHash_row1";

					row1Struct row1_HashRow = new row1Struct();

					row1_HashRow.id = row1.id;

					row1_HashRow.name = row1.name;

					row1_HashRow.origin = row1.origin;

					tHash_Lookup_row1.put(row1_HashRow);

					tos_count_tAdvancedHash_row1++;

					/**
					 * [tAdvancedHash_row1 main ] stop
					 */

					/**
					 * [tPostgresqlInput_1 end ] start
					 */

					currentComponent = "tPostgresqlInput_1";

				}
				stmt_tPostgresqlInput_1.close();

				conn_tPostgresqlInput_1.commit();
				conn_tPostgresqlInput_1.close();

				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		static byte[] commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id;

		public int getId() {
			return this.id;
		}

		public Integer create_uid;

		public Integer getCreate_uid() {
			return this.create_uid;
		}

		public java.util.Date create_date;

		public java.util.Date getCreate_date() {
			return this.create_date;
		}

		public java.util.Date write_date;

		public java.util.Date getWrite_date() {
			return this.write_date;
		}

		public Integer write_uid;

		public Integer getWrite_uid() {
			return this.write_uid;
		}

		public String ean13;

		public String getEan13() {
			return this.ean13;
		}

		public Integer color;

		public Integer getColor() {
			return this.color;
		}

		public Object image;

		public Object getImage() {
			return this.image;
		}

		public Double price_extra;

		public Double getPrice_extra() {
			return this.price_extra;
		}

		public String default_code;

		public String getDefault_code() {
			return this.default_code;
		}

		public String name_template;

		public String getName_template() {
			return this.name_template;
		}

		public Boolean active;

		public Boolean getActive() {
			return this.active;
		}

		public Object image_medium;

		public Object getImage_medium() {
			return this.image_medium;
		}

		public Object image_small;

		public Object getImage_small() {
			return this.image_small;
		}

		public int product_tmpl_id;

		public int getProduct_tmpl_id() {
			return this.product_tmpl_id;
		}

		public Double price_margin;

		public Double getPrice_margin() {
			return this.price_margin;
		}

		public Double cost_price_extra;

		public Double getCost_price_extra() {
			return this.cost_price_extra;
		}

		public Double additional_weight_net;

		public Double getAdditional_weight_net() {
			return this.additional_weight_net;
		}

		public String variants;

		public String getVariants() {
			return this.variants;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public Double additional_volume;

		public Double getAdditional_volume() {
			return this.additional_volume;
		}

		public Double additional_weight;

		public Double getAdditional_weight() {
			return this.additional_weight;
		}

		public String description_sale;

		public String getDescription_sale() {
			return this.description_sale;
		}

		public Boolean track_outgoing;

		public Boolean getTrack_outgoing() {
			return this.track_outgoing;
		}

		public Boolean track_incoming;

		public Boolean getTrack_incoming() {
			return this.track_incoming;
		}

		public String valuation;

		public String getValuation() {
			return this.valuation;
		}

		public Boolean track_production;

		public Boolean getTrack_production() {
			return this.track_production;
		}

		public String old_code;

		public String getOld_code() {
			return this.old_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.old_code == null) ? 0 : this.old_code
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.old_code == null) {
				if (other.old_code != null)
					return false;
			} else if (!this.old_code.equals(other.old_code))
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id = this.id;
			other.create_uid = this.create_uid;
			other.create_date = this.create_date;
			other.write_date = this.write_date;
			other.write_uid = this.write_uid;
			other.ean13 = this.ean13;
			other.color = this.color;
			other.image = this.image;
			other.price_extra = this.price_extra;
			other.default_code = this.default_code;
			other.name_template = this.name_template;
			other.active = this.active;
			other.image_medium = this.image_medium;
			other.image_small = this.image_small;
			other.product_tmpl_id = this.product_tmpl_id;
			other.price_margin = this.price_margin;
			other.cost_price_extra = this.cost_price_extra;
			other.additional_weight_net = this.additional_weight_net;
			other.variants = this.variants;
			other.name = this.name;
			other.additional_volume = this.additional_volume;
			other.additional_weight = this.additional_weight;
			other.description_sale = this.description_sale;
			other.track_outgoing = this.track_outgoing;
			other.track_incoming = this.track_incoming;
			other.valuation = this.valuation;
			other.track_production = this.track_production;
			other.old_code = this.old_code;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.old_code = this.old_code;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length) {
					if (length < 1024
							&& commonByteArray_TALENDOPENERP_213_wms_openerp_purchase.length == 0) {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[1024];
					} else {
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length);
				strReturn = new String(
						commonByteArray_TALENDOPENERP_213_wms_openerp_purchase,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TALENDOPENERP_213_wms_openerp_purchase) {

				try {

					int length = 0;

					this.old_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.old_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readInt();

				this.create_uid = readInteger(dis, ois);

				this.create_date = readDate(dis, ois);

				this.write_date = readDate(dis, ois);

				this.write_uid = readInteger(dis, ois);

				this.ean13 = readString(dis, ois);

				this.color = readInteger(dis, ois);

				this.image = (Object) ois.readObject();

				length = dis.readByte();
				if (length == -1) {
					this.price_extra = null;
				} else {
					this.price_extra = dis.readDouble();
				}

				this.default_code = readString(dis, ois);

				this.name_template = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.active = null;
				} else {
					this.active = dis.readBoolean();
				}

				this.image_medium = (Object) ois.readObject();

				this.image_small = (Object) ois.readObject();

				this.product_tmpl_id = dis.readInt();

				length = dis.readByte();
				if (length == -1) {
					this.price_margin = null;
				} else {
					this.price_margin = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.cost_price_extra = null;
				} else {
					this.cost_price_extra = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.additional_weight_net = null;
				} else {
					this.additional_weight_net = dis.readDouble();
				}

				this.variants = readString(dis, ois);

				this.name = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.additional_volume = null;
				} else {
					this.additional_volume = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.additional_weight = null;
				} else {
					this.additional_weight = dis.readDouble();
				}

				this.description_sale = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.track_outgoing = null;
				} else {
					this.track_outgoing = dis.readBoolean();
				}

				length = dis.readByte();
				if (length == -1) {
					this.track_incoming = null;
				} else {
					this.track_incoming = dis.readBoolean();
				}

				this.valuation = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.track_production = null;
				} else {
					this.track_production = dis.readBoolean();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.id);

				writeInteger(this.create_uid, dos, oos);

				writeDate(this.create_date, dos, oos);

				writeDate(this.write_date, dos, oos);

				writeInteger(this.write_uid, dos, oos);

				writeString(this.ean13, dos, oos);

				writeInteger(this.color, dos, oos);

				oos.writeObject(this.image);

				if (this.price_extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_extra);
				}

				writeString(this.default_code, dos, oos);

				writeString(this.name_template, dos, oos);

				if (this.active == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.active);
				}

				oos.writeObject(this.image_medium);

				oos.writeObject(this.image_small);

				dos.writeInt(this.product_tmpl_id);

				if (this.price_margin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.price_margin);
				}

				if (this.cost_price_extra == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.cost_price_extra);
				}

				if (this.additional_weight_net == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.additional_weight_net);
				}

				writeString(this.variants, dos, oos);

				writeString(this.name, dos, oos);

				if (this.additional_volume == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.additional_volume);
				}

				if (this.additional_weight == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.additional_weight);
				}

				writeString(this.description_sale, dos, oos);

				if (this.track_outgoing == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.track_outgoing);
				}

				if (this.track_incoming == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.track_incoming);
				}

				writeString(this.valuation, dos, oos);

				if (this.track_production == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.track_production);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",create_uid=" + String.valueOf(create_uid));
			sb.append(",create_date=" + String.valueOf(create_date));
			sb.append(",write_date=" + String.valueOf(write_date));
			sb.append(",write_uid=" + String.valueOf(write_uid));
			sb.append(",ean13=" + ean13);
			sb.append(",color=" + String.valueOf(color));
			sb.append(",image=" + String.valueOf(image));
			sb.append(",price_extra=" + String.valueOf(price_extra));
			sb.append(",default_code=" + default_code);
			sb.append(",name_template=" + name_template);
			sb.append(",active=" + String.valueOf(active));
			sb.append(",image_medium=" + String.valueOf(image_medium));
			sb.append(",image_small=" + String.valueOf(image_small));
			sb.append(",product_tmpl_id=" + String.valueOf(product_tmpl_id));
			sb.append(",price_margin=" + String.valueOf(price_margin));
			sb.append(",cost_price_extra=" + String.valueOf(cost_price_extra));
			sb.append(",additional_weight_net="
					+ String.valueOf(additional_weight_net));
			sb.append(",variants=" + variants);
			sb.append(",name=" + name);
			sb.append(",additional_volume=" + String.valueOf(additional_volume));
			sb.append(",additional_weight=" + String.valueOf(additional_weight));
			sb.append(",description_sale=" + description_sale);
			sb.append(",track_outgoing=" + String.valueOf(track_outgoing));
			sb.append(",track_incoming=" + String.valueOf(track_incoming));
			sb.append(",valuation=" + valuation);
			sb.append(",track_production=" + String.valueOf(track_production));
			sb.append(",old_code=" + old_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.old_code, other.old_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());
				currentComponent = "tAdvancedHash_row5";

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tPostgresqlInput_4 - inputs:(after_tFileList_1)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 -
				// inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(row2,row4,row5) outputs:(out_1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());
				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				conn_tPostgresqlInput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (null == conn_tPostgresqlInput_4) {
					java.util.Map<String, routines.system.TalendDataSource> dataSources_tPostgresqlInput_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					conn_tPostgresqlInput_4 = dataSources_tPostgresqlInput_4
							.get("").getConnection();
					// globalMap.put("conn_tPostgresqlConnection_1",
					// conn_tPostgresqlInput_4);
				}

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "SELECT   id ,  create_uid,   create_date ,    write_date ,   write_uid ,     ean13 ,    color ,    image ,     price_extra ,   default_code ,   name_template ,     active ,   image_medium ,   image_small ,   product_tmpl_id ,    price_margin ,     cost_price_extra ,    additional_weight_net ,   variants ,    name ,     additional_volume ,   additional_weight ,   description_sale ,   track_outgoing ,   track_incoming ,   valuation ,   track_production ,    old_code  FROM product_product ";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);

				java.sql.ResultSet rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
						.executeQuery(dbquery_tPostgresqlInput_4);
				java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
						.getMetaData();
				int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
						.getColumnCount();

				String tmpContent_tPostgresqlInput_4 = null;
				int column_index_tPostgresqlInput_4 = 1;
				while (rs_tPostgresqlInput_4.next()) {
					nb_line_tPostgresqlInput_4++;

					column_index_tPostgresqlInput_4 = 1;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.id = 0;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.id = rs_tPostgresqlInput_4
									.getInt(column_index_tPostgresqlInput_4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_4 = 2;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.create_uid = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.create_uid = rs_tPostgresqlInput_4
									.getInt(column_index_tPostgresqlInput_4);
						} else {
							row5.create_uid = null;
						}

					}
					column_index_tPostgresqlInput_4 = 3;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.create_date = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getTimestamp(column_index_tPostgresqlInput_4) != null) {
							row5.create_date = new java.util.Date(
									rs_tPostgresqlInput_4.getTimestamp(
											column_index_tPostgresqlInput_4)
											.getTime());
						} else {
							row5.create_date = null;
						}

					}
					column_index_tPostgresqlInput_4 = 4;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.write_date = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getTimestamp(column_index_tPostgresqlInput_4) != null) {
							row5.write_date = new java.util.Date(
									rs_tPostgresqlInput_4.getTimestamp(
											column_index_tPostgresqlInput_4)
											.getTime());
						} else {
							row5.write_date = null;
						}

					}
					column_index_tPostgresqlInput_4 = 5;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.write_uid = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.write_uid = rs_tPostgresqlInput_4
									.getInt(column_index_tPostgresqlInput_4);
						} else {
							row5.write_uid = null;
						}

					}
					column_index_tPostgresqlInput_4 = 6;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.ean13 = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.ean13 = tmpContent_tPostgresqlInput_4;
						} else {
							row5.ean13 = null;
						}

					}
					column_index_tPostgresqlInput_4 = 7;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.color = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.color = rs_tPostgresqlInput_4
									.getInt(column_index_tPostgresqlInput_4);
						} else {
							row5.color = null;
						}

					}
					column_index_tPostgresqlInput_4 = 8;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.image = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.image = rs_tPostgresqlInput_4
									.getObject(column_index_tPostgresqlInput_4);
						} else {
							row5.image = null;
						}

					}
					column_index_tPostgresqlInput_4 = 9;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.price_extra = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.price_extra = rs_tPostgresqlInput_4
									.getDouble(column_index_tPostgresqlInput_4);
						} else {
							row5.price_extra = null;
						}

					}
					column_index_tPostgresqlInput_4 = 10;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.default_code = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.default_code = tmpContent_tPostgresqlInput_4;
						} else {
							row5.default_code = null;
						}

					}
					column_index_tPostgresqlInput_4 = 11;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.name_template = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.name_template = tmpContent_tPostgresqlInput_4;
						} else {
							row5.name_template = null;
						}

					}
					column_index_tPostgresqlInput_4 = 12;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.active = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.active = rs_tPostgresqlInput_4
									.getBoolean(column_index_tPostgresqlInput_4);
						} else {
							row5.active = null;
						}

					}
					column_index_tPostgresqlInput_4 = 13;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.image_medium = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.image_medium = rs_tPostgresqlInput_4
									.getObject(column_index_tPostgresqlInput_4);
						} else {
							row5.image_medium = null;
						}

					}
					column_index_tPostgresqlInput_4 = 14;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.image_small = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.image_small = rs_tPostgresqlInput_4
									.getObject(column_index_tPostgresqlInput_4);
						} else {
							row5.image_small = null;
						}

					}
					column_index_tPostgresqlInput_4 = 15;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.product_tmpl_id = 0;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.product_tmpl_id = rs_tPostgresqlInput_4
									.getInt(column_index_tPostgresqlInput_4);
						} else {
							throw new RuntimeException(
									"Null value in non-Nullable column");
						}

					}
					column_index_tPostgresqlInput_4 = 16;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.price_margin = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.price_margin = rs_tPostgresqlInput_4
									.getDouble(column_index_tPostgresqlInput_4);
						} else {
							row5.price_margin = null;
						}

					}
					column_index_tPostgresqlInput_4 = 17;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.cost_price_extra = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.cost_price_extra = rs_tPostgresqlInput_4
									.getDouble(column_index_tPostgresqlInput_4);
						} else {
							row5.cost_price_extra = null;
						}

					}
					column_index_tPostgresqlInput_4 = 18;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.additional_weight_net = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.additional_weight_net = rs_tPostgresqlInput_4
									.getDouble(column_index_tPostgresqlInput_4);
						} else {
							row5.additional_weight_net = null;
						}

					}
					column_index_tPostgresqlInput_4 = 19;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.variants = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.variants = tmpContent_tPostgresqlInput_4;
						} else {
							row5.variants = null;
						}

					}
					column_index_tPostgresqlInput_4 = 20;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.name = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.name = tmpContent_tPostgresqlInput_4;
						} else {
							row5.name = null;
						}

					}
					column_index_tPostgresqlInput_4 = 21;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.additional_volume = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.additional_volume = rs_tPostgresqlInput_4
									.getDouble(column_index_tPostgresqlInput_4);
						} else {
							row5.additional_volume = null;
						}

					}
					column_index_tPostgresqlInput_4 = 22;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.additional_weight = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.additional_weight = rs_tPostgresqlInput_4
									.getDouble(column_index_tPostgresqlInput_4);
						} else {
							row5.additional_weight = null;
						}

					}
					column_index_tPostgresqlInput_4 = 23;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.description_sale = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.description_sale = tmpContent_tPostgresqlInput_4;
						} else {
							row5.description_sale = null;
						}

					}
					column_index_tPostgresqlInput_4 = 24;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.track_outgoing = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.track_outgoing = rs_tPostgresqlInput_4
									.getBoolean(column_index_tPostgresqlInput_4);
						} else {
							row5.track_outgoing = null;
						}

					}
					column_index_tPostgresqlInput_4 = 25;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.track_incoming = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.track_incoming = rs_tPostgresqlInput_4
									.getBoolean(column_index_tPostgresqlInput_4);
						} else {
							row5.track_incoming = null;
						}

					}
					column_index_tPostgresqlInput_4 = 26;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.valuation = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.valuation = tmpContent_tPostgresqlInput_4;
						} else {
							row5.valuation = null;
						}

					}
					column_index_tPostgresqlInput_4 = 27;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.track_production = null;
					} else {

						if (rs_tPostgresqlInput_4
								.getObject(column_index_tPostgresqlInput_4) != null) {
							row5.track_production = rs_tPostgresqlInput_4
									.getBoolean(column_index_tPostgresqlInput_4);
						} else {
							row5.track_production = null;
						}

					}
					column_index_tPostgresqlInput_4 = 28;

					if (colQtyInRs_tPostgresqlInput_4 < column_index_tPostgresqlInput_4) {
						row5.old_code = null;
					} else {

						tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
								.getString(column_index_tPostgresqlInput_4);
						if (tmpContent_tPostgresqlInput_4 != null) {
							row5.old_code = tmpContent_tPostgresqlInput_4;
						} else {
							row5.old_code = null;
						}

					}

					/**
					 * [tPostgresqlInput_4 begin ] stop
					 */
					/**
					 * [tPostgresqlInput_4 main ] start
					 */

					currentComponent = "tPostgresqlInput_4";

					tos_count_tPostgresqlInput_4++;

					/**
					 * [tPostgresqlInput_4 main ] stop
					 */

					/**
					 * [tAdvancedHash_row5 main ] start
					 */

					currentComponent = "tAdvancedHash_row5";

					row5Struct row5_HashRow = new row5Struct();

					row5_HashRow.id = row5.id;

					row5_HashRow.create_uid = row5.create_uid;

					row5_HashRow.create_date = row5.create_date;

					row5_HashRow.write_date = row5.write_date;

					row5_HashRow.write_uid = row5.write_uid;

					row5_HashRow.ean13 = row5.ean13;

					row5_HashRow.color = row5.color;

					row5_HashRow.image = row5.image;

					row5_HashRow.price_extra = row5.price_extra;

					row5_HashRow.default_code = row5.default_code;

					row5_HashRow.name_template = row5.name_template;

					row5_HashRow.active = row5.active;

					row5_HashRow.image_medium = row5.image_medium;

					row5_HashRow.image_small = row5.image_small;

					row5_HashRow.product_tmpl_id = row5.product_tmpl_id;

					row5_HashRow.price_margin = row5.price_margin;

					row5_HashRow.cost_price_extra = row5.cost_price_extra;

					row5_HashRow.additional_weight_net = row5.additional_weight_net;

					row5_HashRow.variants = row5.variants;

					row5_HashRow.name = row5.name;

					row5_HashRow.additional_volume = row5.additional_volume;

					row5_HashRow.additional_weight = row5.additional_weight;

					row5_HashRow.description_sale = row5.description_sale;

					row5_HashRow.track_outgoing = row5.track_outgoing;

					row5_HashRow.track_incoming = row5.track_incoming;

					row5_HashRow.valuation = row5.valuation;

					row5_HashRow.track_production = row5.track_production;

					row5_HashRow.old_code = row5.old_code;

					tHash_Lookup_row5.put(row5_HashRow);

					tos_count_tAdvancedHash_row5++;

					/**
					 * [tAdvancedHash_row5 main ] stop
					 */

					/**
					 * [tPostgresqlInput_4 end ] start
					 */

					currentComponent = "tPostgresqlInput_4";

				}
				stmt_tPostgresqlInput_4.close();

				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw error;

		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final wms_openerp_purchase wms_openerp_purchaseClass = new wms_openerp_purchase();

		int exitCode = wms_openerp_purchaseClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = wms_openerp_purchase.class
					.getClassLoader().getResourceAsStream(
							"talendopenerp_213/wms_openerp_purchase_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.davidts_dev_Database = (String) context
					.getProperty("davidts_dev_Database");
			context.davidts_dev_Login = (String) context
					.getProperty("davidts_dev_Login");
			context.davidts_dev_Password = (java.lang.String) context
					.getProperty("davidts_dev_Password");
			context.davidts_dev_Port = (String) context
					.getProperty("davidts_dev_Port");
			context.davidts_dev_Schema = (String) context
					.getProperty("davidts_dev_Schema");
			context.davidts_dev_Server = (String) context
					.getProperty("davidts_dev_Server");
			context.path_files_sale = (String) context
					.getProperty("path_files_sale");
			context.path_wms_archive = (String) context
					.getProperty("path_wms_archive");
			context.Path_wms_files_sale = (String) context
					.getProperty("Path_wms_files_sale");
			context.Path_wms_files_purchase = (String) context
					.getProperty("Path_wms_files_purchase");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("davidts_dev_Database")) {
				context.davidts_dev_Database = (String) parentContextMap
						.get("davidts_dev_Database");
			}
			if (parentContextMap.containsKey("davidts_dev_Login")) {
				context.davidts_dev_Login = (String) parentContextMap
						.get("davidts_dev_Login");
			}
			if (parentContextMap.containsKey("davidts_dev_Password")) {
				context.davidts_dev_Password = (java.lang.String) parentContextMap
						.get("davidts_dev_Password");
			}
			if (parentContextMap.containsKey("davidts_dev_Port")) {
				context.davidts_dev_Port = (String) parentContextMap
						.get("davidts_dev_Port");
			}
			if (parentContextMap.containsKey("davidts_dev_Schema")) {
				context.davidts_dev_Schema = (String) parentContextMap
						.get("davidts_dev_Schema");
			}
			if (parentContextMap.containsKey("davidts_dev_Server")) {
				context.davidts_dev_Server = (String) parentContextMap
						.get("davidts_dev_Server");
			}
			if (parentContextMap.containsKey("path_files_sale")) {
				context.path_files_sale = (String) parentContextMap
						.get("path_files_sale");
			}
			if (parentContextMap.containsKey("path_wms_archive")) {
				context.path_wms_archive = (String) parentContextMap
						.get("path_wms_archive");
			}
			if (parentContextMap.containsKey("Path_wms_files_sale")) {
				context.Path_wms_files_sale = (String) parentContextMap
						.get("Path_wms_files_sale");
			}
			if (parentContextMap.containsKey("Path_wms_files_purchase")) {
				context.Path_wms_files_purchase = (String) parentContextMap
						.get("Path_wms_files_purchase");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_1) {

			e_tPostgresqlConnection_1.printStackTrace();
			globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : wms_openerp_purchase");
		}

		closeScpConnections();

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

		closeScpConnections();
	}

	private void closeScpConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tSCPConnection_1");
			if (null != obj_conn) {
				((ch.ethz.ssh2.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tSCPConnection_1",
				globalMap.get("conn_tSCPConnection_1"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 297912 characters generated by Talend Open Studio for Data Integration on the
 * 15 avril 2015 10:24:53 CET
 ************************************************************************************************/
